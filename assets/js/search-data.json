{
  
    
        "post0": {
            "title": "Digital Divide Reflection",
            "content": "Big Idea 5.2 Digital Divide Reflection . What are the pros and cons on internet blockers at router and lack of admin password on lab machines at schools? Pros . | | | | | . | Cons . | | | | | . What concerns do you have personally about the digital divide? |",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2020/2023/01/24/digitaldivideblog.html",
            "relUrl": "/apcsp%20week%2020/2023/01/24/digitaldivideblog.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Beneficial and Harmful Effects Blog Reflection",
            "content": "Big Idea 5.1 Beneficial and Harmful Effects . Computing is the process of using computer technology to complete a given goal-oriented task. One benefit of computing is that it makes real life things much more accessible on the internet, such as electronic transactions. Another benefit is that computers make things easier for us, such as accessing information online through Google, and a lot of information can be given to pretty much anyone around the world. The last benefit is that communication has become easier because of computing. Now we are able to talk to anyone around the world through computers. . One harmful effect is that society can adapt so much to computers that it can take away from doing stuff in the real world. Another harmful effect of computers is that there is constant competition between the companies that are online. Example would be Google and ChatGPT. ChatGPT is like google, except skips the steps where you have to click on stuff to get the information, rather you search it up and spits out the information to you. One more harmful effect of computers is that a lot of people have access to it, and not all people on the internet can be reliable. It is easier to scam and take advantage of someone online than in person. . | Beneficial and Harmful Effects related to our project . One benefit from our project is that it will help people become more healthy by tracking how much they eat and by plugging in information to attain a certain diet goal. Another benefit of our project is that it is applicable to anyone, and is different for everyone depending on the goal they want to reach in terms of their fitness lifestyle. One last benefit is that it calculates all the calories and macros that you need without you having to do it manually yourself. . A potential harmful effect of our project is that it could increase competition between other websites and apps that also track your calories and help you reach a fitness goal, or it could be hard for our website to compete if not performed well. . | Dopamine Issues . I feel that the dopamine problem is no conspiracy, and is definitely real. Whenever we go on social media or use the internet for long periods of time, we release dopamine, which is that “feel good” chemical. However this brews addiction. In order to satisfy ourselves, we continue to scroll on Instagram and TikTok, however we end up on our screens longer than we should. I can take away from productivity throughout the day, and sleep at night, and I can personally attest to those things. |",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2020/2023/01/24/benefitharmblog.html",
            "relUrl": "/apcsp%20week%2020/2023/01/24/benefitharmblog.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$l71...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$5gQ...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$6Tw...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$t3L...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$ROF...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$l71...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$5gQ...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$szr...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$t3L...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$ROF...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$l712O4ASTEofJllb$3c81fdc72db69bf9f9af453893c0a3154c6cc8405b71ba96ae6f234ef5f2e588&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$5gQXNTl76yONK8Sq$15f2032df3480d0104cf0aad9d845229bf797749fca918f86b35f9b939f75ded&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$szrtVUmUHcjKA5gi$5d131da76ba3c399e7798613c8ad79596f145a6ee128d0037b0cf07dce3b5674&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$t3L1jqyXsfNkPePX$6280950e77992bb1b3d90eef5a13814d649e76eed91775fbad07af27d9dfdb48&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$ROFNOu2vGncsCeQJ$ca1f0c8684dced0d31227bff1b05b35a922f307640c70b491845369cb6679eb1&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$l712O4ASTEofJllb$3c81fdc72db69bf9f9af453893c0a3154c6cc8405b71ba96ae6f234ef5f2e588&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$5gQXNTl76yONK8Sq$15f2032df3480d0104cf0aad9d845229bf797749fca918f86b35f9b939f75ded&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$szrtVUmUHcjKA5gi$5d131da76ba3c399e7798613c8ad79596f145a6ee128d0037b0cf07dce3b5674&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$t3L1jqyXsfNkPePX$6280950e77992bb1b3d90eef5a13814d649e76eed91775fbad07af27d9dfdb48&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$ROFNOu2vGncsCeQJ$ca1f0c8684dced0d31227bff1b05b35a922f307640c70b491845369cb6679eb1&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2005, 1, 17) age = calculate_age(dob) print(age) print(dob) . 17 2005-01-17 . Hack Helper . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) #getter @property def classOf(self): return self._classOf #setter @classOf.setter def classOf(self, classOf): self._classOf = classOf # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot;: self.classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, classOf={self._classOf})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Derek Sol&#39;, uid=&#39;dmsol218&#39;, password=&#39;Tera123&#39;, dob=date(2005, 1, 17), classOf=&#39;2023&#39;) print(&quot;Print users info:&quot;) print(u1) print(&quot; nJSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . Print users info: {&#34;name&#34;: &#34;Derek Sol&#34;, &#34;uid&#34;: &#34;dmsol218&#34;, &#34;dob&#34;: &#34;01-17-2005&#34;, &#34;age&#34;: 17, &#34;classOf&#34;: &#34;2023&#34;} JSON ready string: {&#34;name&#34;: &#34;Derek Sol&#34;, &#34;uid&#34;: &#34;dmsol218&#34;, &#34;dob&#34;: &#34;01-17-2005&#34;, &#34;age&#34;: 17, &#34;classOf&#34;: &#34;2023&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Derek Sol&#39;, &#39;_uid&#39;: &#39;dmsol218&#39;, &#39;_password&#39;: &#39;sha256$wrbTzLVE2ToH8yJB$c380908a6ed8e0a9f9e8e7b0c138de4d2e91ee4dfe242eb9d5fec23da3ebc9d6&#39;, &#39;_dob&#39;: datetime.date(2005, 1, 17), &#39;_classOf&#39;: &#39;2023&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Derek Sol, uid=dmsol218, password=sha256$wrbTzLVE2ToH8yJB$c380908a6ed8e0a9f9e8e7b0c138de4d2e91ee4dfe242eb9d5fec23da3ebc9d6,dob=2005-01-17, classOf=2023) . Idea for my Group&#39;s Project . import json class userInfo: def __init__(user, firstName, lastName, genre, favoritemovie): user._firstName = firstName # variables with self prefix become part of the object, user._lastName = lastName user._genre = genre user._favoritemovie = favoritemovie # first name getter @property def firstName(user): return user._firstName # first name setter @firstName.setter def firstName(user, firstName): user._firstName = firstName # last name getter @property def lastName(user): return user._lastName # last name setter @lastName.setter def lastName(user, lastName): user._lastName = lastName #favorite movie genre getter @property def genre(user): return user._genre #favorite movie genre setter @genre.setter def genre(user, genre): user._genre = genre #favorite movie getter @property def favoritemovie(user): return user._favoritemovie # favorite movie setter @favoritemovie.setter def favoritemovie(user, favoritemovie): user._favoritemovie = favoritemovie # output content using str(object) in human readable form, uses getter def __str__(user): return f&#39;first name: &quot;{user.firstName}&quot;, last name: &quot;{user.lastName}&quot;, genre: &quot;{user.genre}&quot;, favorite movie: &quot;{user.favoritemovie}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(user): return f&#39;Person(first name={user._firstName}, last name={user._lastName}, genre={user.genre}, favorite movie: {user._favoritemovie})&#39; # tester method to print users def tester(user, firstName, lastName, genre, favoritemovie): result = None for user in users: print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = userInfo(firstName=&#39;Derek&#39;, lastName=&#39;Sol&#39;, genre=&#39;Adventure&#39;, favoritemovie=&#39;Kung Fu Panda&#39;) # put user objects in list for convenience users = [u1] print(&quot;Users in Database in JSON: n n&quot;,u1) . Users in Database in JSON: first name: &#34;Derek&#34;, last name: &#34;Sol&#34;, genre: &#34;Adventure&#34;, favorite movie: &#34;Kung Fu Panda&#34; .",
            "url": "https://dereksol.github.io/Tera/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Student Teaching Portfolio",
            "content": "My Vocab . Unit 3 Sections 1-2 . Notes . Variable is an abstraction inside a program that can hold a value | organizes data by labeling it with descriptive name | consists of three parts: name, value, and type | When naming variables, keep it easy and simple to read, because it can be messy and confusing later on | types of data, integer is a number, text/string is a word, and Boolean is data that determines if something is true or false | assignment operator allows a program to change the value represented by a variable, used to assign values to variables | value stored in a variable will be the most recent value assigned | . Data Abstraction . Method used in coding to represent data in a useful form, by taking away aspects of data that aren&#39;t being used in the situation | Variables and lists are primary tools in data abstraction | Provides a separation between the abstract properties of a data type and the concrete details of its representation | . Lists &amp; Strings . List = ordered sequence of elements | Element = individual value in a list that is assigned to a unique index | Index = a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index | String = ordered sequence of characters (Letters, numbers, special characters) | . What are Lists? . Allow for data abstraction | Bundle variables together | Store multiple elements | Allows multiple related items to be treated as a single value | Give one name to a set of memory cells | Can keep adding elements to it as needed | Can store elements as a single variable by using a list | . 3 Types of List Operations . Assigning values to a list at certain indices | Creating an empty list and assigning it to a variable | Assigning a copy of one list to another list (setting one list equal to another list) | Practice . colorList=[&quot;green&quot;, &quot;red&quot;, &quot;pink&quot;, &quot;purple&quot;, &quot;blue&quot;, &quot;brown&quot;] print(str(colorList)) . [&#39;green&#39;, &#39;red&#39;, &#39;pink&#39;, &#39;purple&#39;, &#39;blue&#39;, &#39;brown&#39;] . Homework . print(&quot;General Knowledge Trivia&quot;) QandA = { &quot;#1) What is the largest mammal?&quot;: &quot;blue whale&quot;, &quot;#2) What is the largest organ in the body?&quot;: &quot;skin&quot;, &quot;#3) What galaxy do we live in?&quot;: &quot;milky way&quot;, &quot;#4) Who founded Amazon?&quot;: &quot;jeff bezos&quot;, &quot;#5) What is the world&#39;s largest ocean?&quot;: &quot;pacific ocean&quot;, } def qandresp(question): # display question, return inputted response print(question) resp = input() return resp correct = 0 # Setup print(&quot;Current number of questions: &quot; + str(len(QandA))) # iterate over each key for key in QandA: rsp = qandresp(key) # save user&#39;s response to a variable rsp rsp = rsp.lower() # answer is case sensitive, so match response to lowercase for answer key to work if rsp == QandA[key]: # check if the response is equal to the answer in the dictionary print(f&quot;Correct!&quot;) correct += 1 else: print(f&quot;{rsp} is incorrect &quot;) percent = str(round(correct/len(QandA), 2)*100) # calculate percentage print(&quot;You scored &quot; + str(correct) +&quot;/&quot; + str(len(QandA))) print(f&quot;Which is also, {percent}%&quot;) # print score and percentage . General Knowledge Trivia Current number of questions: 5 #1) What is the largest mammal? Correct! #2) What is the largest organ in the body? heart is incorrect #3) What galaxy do we live in? Correct! #4) Who founded Amazon? Correct! #5) What is the world&#39;s largest ocean? atlantic ocean is incorrect You scored 3/5 Which is also, 60.0% . Unit 3 Sections 3-4 . Notes . An algorithm has three components: sequencing, selection, and iteration | sequencing is algorithms doing tasks in the order of specification | selection is allowing is to choose two different outcomes based off a decision | iteration is that if a condition is true, then the code is repeated | . Algorithm Can Be Represented In Two Ways . flowcharts, which uses shapes and arrows to represent steps of an algorithm | pseudocode, which is a blend of human language and coding format | . Basic Operations . subtraction, represented by - | addition, represented by + | multiplication, represented by * | division, represented by / | getting the remainder, represented by MOD(% in python) | . Different Ways Values Are Stored in Variables . numerical value stored in variable | value of another variable stored in variable | result of an operation stored in a variable | result of a procedure call stored in a variable | . Strings . What is a String? A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . Homework . Tracking Variables Hack . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 # Result is 20.4 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 # Result is 0 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueC) # Result is 17 . 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) # Result is straightbrownshort . straightbrownshort . String Hacks . Problem 1 . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = Noun[:7] yoda = abrev + &quot; &quot; + Verb + &quot; &quot; + Adjective2 + &quot; &quot; + Adjective + &quot;.&quot; print(yoda) . Mr.Mort is Very handsome. . Problem 2 . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 len2 = len(cookie2) * 45 vote1 = (str(cookie) + &quot; vote &quot; + str(len2)) vote2 = (str(cookie2) + &quot; vote &quot; + str(len1)) votes = (str(vote1) + &quot; &quot; + str(vote2)) print(votes) . choclate vote 225 rasin vote 4.0 . Unit 3 Sections 8-10 . Notes . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . There is list, then four total collection data types in Python . Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn&#39;t allow duplicates | Dictionary: collection that is ordered, changeable, doesn&#39;t allow duplicates | . More Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . Methods . Method Definition Example . append() | adds element to the end of the list | fruits.append(&quot;watermelon&quot;) | . index() | returns the index of the first element with the specified value | fruits.index(&quot;apple&quot;) | . insert() | adds element at given position | fruits.insert(1, &quot;watermelon&quot;) | . remove() | removes the first item with the specified value | fruits.remove(&quot;strawberry&quot;) | . reverse() | reverses the list order | fruits.reverse() | . sort() | sorts the list | fruits.sort() | . count() | returns the amount of elements with the specified value | fruits.count(&quot;apple&quot;) | . copy() | returns a copy of the list | fruits.copy() | . clear() | removes the elements from the list | fruits.clear() | . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. | There&#39;s a lot of types of iteration though, what to use? How do we apply iteration to lists? | Some methods include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension | here are 2 types of iteration: definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met | . Else, elif, break . Else: when the condition does not meet, do statement() | Elif: when the condition does not meet, but meets another condition, do statement() | Break: stop the loop | . Homework . HW Iteration . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() print(inp + &quot; -&gt;&quot;) for i in range(len(inp)): for j in range(len(words)): if inp[i] == words [j][0]: print(words[j]) . derek -&gt; delta echo romeo echo kilo . Other way to print matrix . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . def print_matrix3(matrix): for i in range(len(keypad)): print(*keypad[i]) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . Birth Month HW . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] print(str(keyboard[0][1]) + str(keyboard[3][9]) + str(keyboard[0][1]) + str(keyboard[0][7]) + str(keyboard[3][9]) + str(keyboard[0][2]) + str(keyboard[0][10]) + str(keyboard[0][10]) + str(keyboard[0][5]) + &quot; n&quot; + str(keyboard[0][1]) + str(keyboard[0][7])) . 1/17/2005 17 . Unit 3 Sections 9-11 . Notes . Algorithms . Algorithms can be written in different ways and still accomplish the same tasks | Algorithms that appear similar can yield different side effects or results. | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) | Different algorithms can be developed or use to solve the same problem. | . Conditionals vs. Boolean . The condition and instructions are what differ, that&#39;s where the magic happens. The condition is a boolean expression when an expression outputs either true or false. Boolean values are another type of data type in programming languages, and they can only ever hold true or false. . Selection vs. Iteration . Selection: . A process used in algorithms where a conditional if-statement leads to one of two outcomes | Outcome 1: if the conditional statement is true, something will happen | Outcome 2: if the conditional statement is false, something else will happen | . Iteration . A process used in algorithms that allows certain things to happen until a condition is satisfied | Once the condition is satisfied, then an outcome is produced | This can take the form of a for-loop, while-loop, and/or if-statement | . Takeaways . You can use code you&#39;ve previously wrote in order to make a project easier. | Breaking algorithms down into steps can make things easier and more simple. | . Homework . Flowchart . Link to flowchart . import random def RandomNumGen(x): RandomNumGenList = [] while x &gt; 0: RandomNumGenList.append(random.randint(1,20)) x -= 1 print(RandomNumGenList) return max(RandomNumGenList) RandomNumGen(3) . [1, 16, 18] . 18 . Unit 3 Sections 12-13 . Notes . Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . Developing Procedures . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a pre-written procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . quizGrade = 25 def currentGrade(currentPoints): currentGrade = currentPoints / 40 currentGrade = currentGrade * 100 return currentGrade newPoints = int(input(&quot;What did you get out of 40?&quot;)) newPercent = (currentGrade(int(newPoints))) if (newPoints &gt; quizGrade): newquizGrade = newPercent print(&quot;your new grade is &quot; + str(newquizGrade) + &quot;%&quot;) else: print(&quot;your grade is still &quot; + str(quizGrade) + &quot;/40&quot;) . your new grade is 87.5% . Homework . class Student: marks = [] def getData(self, rn, name, m1, m2, m3): Student.rn = rn Student.name = name Student.marks.append(m1) Student.marks.append(m2) Student.marks.append(m3) def displayData(self): print(&quot;Roll Call Number: &quot;, Student.rn) print(&quot;Name is: &quot;, Student.name) print(&quot;Grade in subject 1: &quot;, Student.marks[0]) print(&quot;Grade in subject 2: &quot;, Student.marks[1]) print(&quot;Grade in subject 3: &quot;, Student.marks[2]) print(&quot;Average Grade of: &quot;, self.average()) GradeAverage = self.average() if (GradeAverage &gt; 90): print(&quot;your an A student&quot;) elif (GradeAverage &gt; 80): print(&quot;your a B Student&quot;) else: print(&quot;do better&quot;) def total(self): m = Student.marks return(Student.marks[0] + Student.marks[1] +Student.marks[2]) def average(self): return ((Student.marks[0] + Student.marks[1] +Student.marks[2])/3) r = int (input(&quot;Enter the roll call number: &quot;)) name = input(&quot;Enter the name: &quot;) m1 = int (input(&quot;Enter the Grade in first subject: &quot;)) m2 = int (input(&quot;Enter the Grade in second subject: &quot;)) m3 = int (input(&quot;Enter the Grade in third subject: &quot;)) s1 = Student() s1.getData(r, name, m1, m2, m3) s1.displayData() . Roll Call Number: 26 Name is: Derek Sol Grade in subject 1: 81 Grade in subject 2: 84 Grade in subject 3: 93 Average Grade of: 86.0 your a B Student . Unit 3 Sections 14-15 . Notes . Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . API&#8217;s . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . Random Values . Random number generation (RNG) produces a random number (crazy right?) | This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . Homework . import random n = int(input(&quot;How many numbers would you like to generate?&quot;)) a = int(input(&quot;Give the lowest number you want all numbers to be picked from?&quot;)) b = int(input(&quot;Give the highest number you want all numbers to be picked from?&quot;)) numbers = [random.randint(a, b) for _ in range(n)] # I input the range from numbers 1-100 evens = [] odds = [] for number in numbers: if number % 2 == 0: evens.append(number) else: odds.append(number) print(evens) print(odds) . [46, 78, 12, 78, 76, 8, 18, 92, 98, 42, 64, 30] [83, 95, 7, 97, 39, 61, 73, 21] . import numpy as np poly = np.poly1d([2, 0, 0, -6, 24, 0]) derivative = poly.deriv() print(&quot;The derivative of n&quot; + str(poly) + &quot; n&quot; + &quot;is&quot; + &quot; n&quot; + str(derivative)) . The derivative of 5 2 2 x - 6 x + 24 x is 4 10 x - 12 x + 24 . import numpy as np n = np.poly1d([13, 0, 4, 0, 0]) d = np.poly1d([2]) derivative = ((d * n.deriv()) - (d.deriv() * n)) / 4 result = derivative(9) print(&quot;The derivative of n&quot; + str(n) + &quot; n divided by&quot; + str(d) + &quot; nis: n&quot; + str(derivative)) print(&quot; nWhen x = 9, f&#39;(x) = n&quot; + str(round(result))) . The derivative of 4 2 13 x + 4 x divided by 2 is: 3 26 x + 4 x When x = 9, f&#39;(x) = 18990 . import random animals = [&#39;dog1&#39;, &#39;dog2&#39;, &#39;dog3&#39;, &#39;dog4&#39;, &#39;dog5&#39;, &#39;dog6&#39;, &#39;dog7&#39;, &#39;dog8&#39;, &#39;dog9&#39;, &#39;dog10&#39;, &#39;cat1&#39;, &#39;cat2&#39;, &#39;cat3&#39;, &#39;cat4&#39;, &#39;cat5&#39;, &#39;cat6&#39;, &#39;cat7&#39;, &#39;cat8&#39;, &#39;cat9&#39;, &#39;cat10&#39;] random.shuffle(animals) print(animals) . [&#39;dog10&#39;, &#39;cat8&#39;, &#39;cat4&#39;, &#39;dog3&#39;, &#39;cat1&#39;, &#39;dog1&#39;, &#39;cat10&#39;, &#39;dog2&#39;, &#39;cat6&#39;, &#39;dog6&#39;, &#39;dog4&#39;, &#39;dog7&#39;, &#39;cat2&#39;, &#39;dog5&#39;, &#39;cat9&#39;, &#39;cat7&#39;, &#39;dog9&#39;, &#39;cat5&#39;, &#39;dog8&#39;, &#39;cat3&#39;] . Two Other Python Libraries . Keras . Keras is a deep learning API written in Python, running on top of the machine learning platform TensorFlow. It was developed with a focus on enabling fast experimentation. Being able to go from idea to result as fast as possible is key to doing good research. | It is simple, flexible, and powerful. | Keras reduces developer cognitive load to free you to focus on the parts of the problem that really matter. | Keras adopts the principle of progressive disclosure of complexity: simple workflows should be quick and easy, while arbitrarily advanced workflows should be possible via a clear path that builds upon what you&#39;ve already learned. | Keras provides industry-strength performance and scalability: it is used by organizations and companies including NASA, YouTube, or Waymo. | . Pandas . Pandas is an open source Python package that is most widely used for data science/data analysis and machine learning tasks. It is built on top of another package named Numpy, which provides support for multi-dimensional arrays. -Pandas makes it simple to do many of the time consuming, repetitive tasks associated with working with data such as; data cleansing, data fill, data normalization, merges and joins, data visualization, statistical analysis, data inspection, loading and saving data, etc. | Pretty much used to analyze data fast, powerfully, and flexibly | . Unit 3 Sections 16 . Notes . What is a simulation? . A simulation is a tested scenario used for viewing results/outputs to prepare for them in real world situations | These can be used for games like dice rolling, spinners, etc | These can be used for practical things such as building structures, testing car crashes, and other things before engaging in them in the real world | These simulations can have the option of obeying real world physics (Gravity, collision) or they can go against these norms since this is a fictitious scenario, and couldn&#39;t happen in real life | . Simulations in Real Life . Simulations are used extremely frequently in real life applications. One of the most common examples of simulations are video games. A games physics engine can accurately simulate objects colliding | Another example is Blender, the software used in 3d animations class, here at Del Norte. Blender is made up of many small simulations, but one big one it uses is simulating the way light bounces off of and interacts with objects. | . Homework . import time # Define a function that updates the simulation def update_simulation(): # Update the state of the simulation here... # Prompt the user to enter the mass and radius of a planet mass = float(input(&quot;Enter the mass of the planet (in kilograms): &quot;)) radius = float(input(&quot;Enter the radius of the planet (in kilometers): &quot;)) # Calculate the gravity of the planet gravity = (6.67 * 10**-11 * mass) / (radius**2) print(f&quot;Gravity of planet: {gravity}&quot;) #Gravity of planet 1: Neptune #Gravity of planet 2: Saturn #Gravity of planet 3: Jupiter #Gravity of planet 4: Uranus # Run the simulation indefinitely while True: update_simulation() time.sleep(1) # Pause for 1 second between each update . Gravity of planet: 29180968.4670602 Gravity of planet: 28951451.382520344 Gravity of planet: 67089129.85402547 Gravity of planet: 23315153.5014559 . ValueError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb Cell 57 in &lt;cell line: 21&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; #Gravity of planet 1: Neptune &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; #Gravity of planet 2: Saturn &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; #Gravity of planet 3: Jupiter &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; #Gravity of planet 4: Uranus &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; # Run the simulation indefinitely &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; while True: &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; update_simulation() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; time.sleep(1) /Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb Cell 57 in update_simulation() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; def update_simulation(): &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; # Update the state of the simulation here... &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # Prompt the user to enter the mass and radius of a planet -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; mass = float(input(&#34;Enter the mass of the planet (in kilograms): &#34;)) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; radius = float(input(&#34;Enter the radius of the planet (in kilometers): &#34;)) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; # Calculate the gravity of the planet ValueError: could not convert string to float: &#39;&#39; . Example of a Simulation . In terms of coding, NBA 2K is a simulation because it uses a computer program to simulate the behavior and interactions of the various elements that make up a game of basketball. This includes the players, the ball, the court, and the rules of the game. To create this simulation, the developers of NBA 2K use a combination of algorithms, data structures, and mathematical calculations to model the behavior of these elements. For example, they may use algorithms to simulate the movement of the ball and the players on the court, and use data structures to store information about the teams, players, and game rules. Additionally, the developers may use mathematical calculations to model the physics of the game, such as the effects of gravity on the ball and the players, and the interactions between different objects on the court. . Unit 3 Sections 17-18 . Notes . What is Algorithmic Efficiency? . The ability of an algorithm to solve a problem in an efficient way An efficient algorithm solves a problem quickly and with a minimum amount of resources, such as time and memory. | . | How do we determine if an algorithm is efficient or not? One way we can do this is by determining the time complexity of the algorithm. | Another way is through space complexity. ### Heuristic solution | An heuristic solution is an approach to a problem that produces a solution that isn&#39;t necessarily optimal but can be used when normal methods take forever. | . | . Decidable problem vs Undecidable problem . A decidable problem is a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. In other words, a decidable problem is a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not. | . An undecidable problem problem is a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. This means that it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem. | . The Halting Problem . The halting problem is an example of an undecidable problem. It states that it is not always possible to correctly determine whether a code halts or runs forever. . There is no way to write an algorithm to analyze and determine whether a body of code can run forever or not. | . Homework . Traveling Merchant Problem Hacks: . What did you and your team discuss? (record below) . We discussed all the possible ways to start from Indianapolis and visit all the cities. We said that in order to get the shortest route, you have to take the shortest flight first, so go cincinnati, then figure out the shortest distances from there and continue on. . Describe the method used to solve the traveling merchant problem. (record below) . The method used was a heuristic solution. We go to the shortest travel from Indianapolis, then look at the neighboring cities. We continue to pick the shortest travel every time and follow that until the end. This makes the traveling more optimal with less distance traveled and less time consuming if it were to be a real life scenario. . Hacks . Come up with one situation in which a computer runs into an undecidable problem. Explain why it is considered an undecidable problem. . One situation in which a computer may run into an undecidable problem is when it is trying to determine whether a given mathematical statement is true or false. This problem, known as the axiomatic truth problem, is considered undecidable because there is no algorithm that can accurately determine the truth value of an arbitrary mathematical statement. The reason the axiomatic truth problem is undecidable is that it involves trying to determine the truth or falsity of an arbitrary statement, which may be impossible to do with complete accuracy. In mathematics, a statement is considered true if it can be proven to be true using a set of axioms and rules of inference. However, it is not always possible to prove the truth or falsity of a given statement using these methods. For example, the statement &quot;There are infinitely many prime numbers&quot; cannot be proven or disproven using the standard axioms of mathematics. . import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return print(&quot;Your number was found at&quot;, i) end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 x = 5500 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) linear_search(lst, x) # runs procedure . Found element after 5500 loops in 372 microseconds Your number was found at 5499 . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 55# replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . Element found after 12 loops in 6 microseconds . 54 . Graphs on Review Ticket . Link to see the Graphs/ReviewTicket . Looking at the graphs, even though both graphs contained the same x values, the 1st code gave me much higher values in microseconds(y) than the 2nd code. Therefore, the 2nd graph and code is more efficient. This is because it is finding the element in an overall less time(in microseconds) than the 1st graph. . Decidable Problem . def find_smallest_odd(n): # Set the smallest odd number to 1 smallest_odd = 1 # Set the current number to 1 current_num = 1 # Loop until the current number is greater than n while current_num &lt;= n: # If the current number is odd, update the smallest odd number if current_num % 2 == 1: smallest_odd = current_num # Break the loop since we have found the smallest odd number break # Increment the current number current_num += 1 # Return the smallest odd number return smallest_odd find_smallest_odd(20) #Since the smallest odd number that is less than or equal to 20 is 1, the output will be 1 . Code that runs forever . def is_prime(n): # Check if the number is less than 2, which is not considered prime if n &lt; 2: return False # Check if the number is divisible by any number less than itself for i in range(2, n): if n % i == 0: return False # If the number is not divisible by any number less than itself, it is prime return True # Set the current number to 2, which is the smallest prime number current_num = 2 # Set a flag to indicate whether the current number is prime is_prime = True # Loop indefinitely while True: current_num += 1 .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2014-17/2022/12/15/STP.html",
            "relUrl": "/apcsp%20week%2014-17/2022/12/15/STP.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 3 Sections 17-18",
            "content": "Do Now!!! . Set up your notebook by either wgetting the lesson or tracking it by your own (We would recommend wgetting since there are some fill in the blanks!) | wget here: https://raw.githubusercontent.com/mmaxwu/Tri2-GroupFastpages/master/_notebooks/2022-12-dd-lesson.ipynb | . 3.17: Algorithm Efficiency . Purpose: . The purpose of this lesson is to help students understand how to make an efficient program and optimize it and understand its importance to the CSP curriculum. . What is Algorithmic Efficiency? . The ability of an algorithm to solve a problem in an efficient way An efficient algorithm solves a problem quickly and with a minimum amount of resources, such as time and memory. | . | How do we determine if an algorithm is efficient or not? One way we can do this is by determining the time complexity of the algorithm. | Another way is through space complexity. | . | . Traveling Merchant Problem Hacks: . What did you and your team discuss? (record below) . We discussed all the possible ways to start from Indianapolis and visit all the cities. We said that in order to get the shortest route, you have to take the shortest flight first, so go cincinnati, then figure out the shortest distances from there and continue on. . An heuristic solution is an approach to a problem that produces a solution that isn&#39;t necessarily optimal but can be used when normal methods take forever | . Describe the method used to solve the traveling merchant problem. (record below) . The method used was a heuristic solution. We go to the shortest travel from Indianapolis, then look at the neighboring cities. We continue to pick the shortest travel every time and follow that until the end. This makes the traveling more optimal with less distance traveled and less time consuming if it were to be a real life scenario. . 3.18: Undecidable Problems . Purpose: . The purpose of this lesson is to introduce students to the concept of undecidable problems in computer science and to explain why these problems are important. . Key vocabulary: . Decision problem | Decidable problem | Undecidable problem | . Decision Problem . A decision problem is a problem in computer science and mathematics that can be solved by a yes-no answer, also known as a binary answer. In other words, a decision problem is a problem for which there are only two possible outputs:&quot;yes&quot; or &quot;no&quot;. There are two types of decision problems that Collegeboard goes over: . Decidable Problems | Undecidable Problems | . A decidable problem is a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. In other words, a decidable problem is a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not. . An undecidable problem problem is a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. This means that it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem. . Decidable Problems . A decidable problem is an algorithm that can always have an output of yes or no given any input. It is always correct. . Example of a Decidable Problem . The procedure below tests to see if a number is divisible by 13. If it is, it returns true. If it isn&#39;t, it returns false. . def divideThirteen(number): if number % 13 == 0: return True else: return False print(divideThirteen(26)) print(divideThirteen(30)) . True False . Undecidable Problems . An Example of a Forever Running Code . The code keeps adding 1 to the variable number until number is no longer an integer(This is not the python data type &quot;integer&quot;, it&#39;s the integer in number theory). However, there is no end to this code, making the computer run forever. There is no halt to the code. . i = 0 number = 1 def integerTest(n): # Testing if the number is an integer if n%1 ==0: return True else: return False # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. while i == 0: number += 1 if integerTest(number) == False: i +=1 print(&quot;Done&quot;) . KeyboardInterrupt Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-12-14-Studentlesson9.ipynb Cell 11 in &lt;cell line: 10&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-14-Studentlesson9.ipynb#X13sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; return False &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-14-Studentlesson9.ipynb#X13sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-14-Studentlesson9.ipynb#X13sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; while i == 0: &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-14-Studentlesson9.ipynb#X13sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; number += 1 &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-14-Studentlesson9.ipynb#X13sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; if integerTest(number) == False: KeyboardInterrupt: . The Halting Problem . The halting problem is an example of an undecidable problem. It states that it is not always possible to correctly determine whether a code halts or runs forever. . There is no way to write an algorithm to analyze and determine whether a body of code can run forever or not. . Halting Problem Example: . In order to understand this, suppose that an algorithm was able to analyze whether a code halts or not. Let&#39;s call this algorithm HaltChecker. | HaltChecker analyzes the program,program P, and its input,input I. If program P halts with input I, HaltChecker returns an output of &quot;halts&quot;. If program P doesn&#39;t halt(runs forever) with input I, HaltChecker returns an output of &quot;never&quot;. For example, in the code where it tests if variable number, the code runs forever, so HaltChecker returns an output of &quot;never&quot;. | Then, we add another algorithm called Reverser which reverses HaltChecker&#39;s output. So, if &quot;never&quot; is the output of HaltChecker, then the output of Reverser is &quot;halts&quot;. It&#39;s also the same the other way around: if HaltChecker has an output of &quot;halts&quot;, then Reverser has an output of &quot;never. | We combine these algorithms into one entire body of code. | Since Reverser is the algorithm at the end, hence giving the ultimate output, notice how it prints &quot;never&quot; when in fact there is an end(As proved by HaltChecker), and how it also prints &quot;halts&quot; when there is in fact is no end to the code(Also proved by HaltChecker). As a result, HaltChecker is inaccurate and this is an undecidable problem. | . This Diagram Sums up the Entire Process in the Bulleted List: . Credits of diagram and example to Khan Academy . FAQ . Q: If Reverser is causing the problem, why not remove it? | A: Removing Reverser will remove the problems, however, we are looking for ways which create the problem of not outputting a correct result. One example is enough to prove that it is an undecidable problem since it proves that the code is not completely accurate. | . Extra Things to Notice . Note that while a computer may take a long time to run a section of code, it does not mean that the computer is going to run forever. | Humans are able to solve some undecidable problems. The entire Halting Problem example was to prove that computers cannot solve undecidable problems. | . Hacks . Come up with one situation in which a computer runs into an undecidable problem. Explain why it is considered an undecidable problem. . One situation in which a computer may run into an undecidable problem is when it is trying to determine whether a given mathematical statement is true or false. This problem, known as the axiomatic truth problem, is considered undecidable because there is no algorithm that can accurately determine the truth value of an arbitrary mathematical statement. The reason the axiomatic truth problem is undecidable is that it involves trying to determine the truth or falsity of an arbitrary statement, which may be impossible to do with complete accuracy. In mathematics, a statement is considered true if it can be proven to be true using a set of axioms and rules of inference. However, it is not always possible to prove the truth or falsity of a given statement using these methods. For example, the statement &quot;There are infinitely many prime numbers&quot; cannot be proven or disproven using the standard axioms of mathematics. . 3.17 Homework . Your homework for Algorithmic Efficiency is pretty simple. . Use the 1st code below and graph it (Desmos, TI Inpire Cas, e.t.c), change the x value only! | Label the number of loops done as x and the time (microseconds) to find the index as y | Connect the points | Do the same thing with the 2nd code | Compare the two graphs and explain which one of the two is more efficient and why (min. 2 sentences) | Insert images of the graph either in your blog or on review ticket | import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return print(&quot;Your number was found at&quot;, i) end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 x = 5500 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) linear_search(lst, x) # runs procedure . Found element after 5500 loops in 338 microseconds Your number was found at 5499 . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 55# replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . Element found after 12 loops in 6 microseconds . 54 . Graphs on Review Ticket . Looking at the graphs, even though both graphs contained the same x values, the 1st code gave me much higher values in microseconds(y) than the 2nd code. Therefore, the 2nd graph and code is more efficient. This is because it is finding the element in an overall less time(in microseconds) than the 1st graph. . 3.18 Homework: . Use the Jupyter notebook to write an algorithm that solves a decidable problem. You can use math or whatever else you would like to do. | Write code to get the computer to run forever. Check this example if you need help, but please come up with your own idea. | Homeworks, hacks, and classwork(filled in blanks) for both 3.17 and 3.18 are due on Thursday at 9:00 pm. -0.1 points for each day late. . Decidable Problem . def find_smallest_odd(n): # Set the smallest odd number to 1 smallest_odd = 1 # Set the current number to 1 current_num = 1 # Loop until the current number is greater than n while current_num &lt;= n: # If the current number is odd, update the smallest odd number if current_num % 2 == 1: smallest_odd = current_num # Break the loop since we have found the smallest odd number break # Increment the current number current_num += 1 # Return the smallest odd number return smallest_odd find_smallest_odd(20) #Since the smallest odd number that is less than or equal to 20 is 1, the output will be 1 . 1 . Code that runs forever . def is_prime(n): # Check if the number is less than 2, which is not considered prime if n &lt; 2: return False # Check if the number is divisible by any number less than itself for i in range(2, n): if n % i == 0: return False # If the number is not divisible by any number less than itself, it is prime return True # Set the current number to 2, which is the smallest prime number current_num = 2 # Set a flag to indicate whether the current number is prime is_prime = True # Loop indefinitely while True: current_num += 1 .",
            "url": "https://dereksol.github.io/Tera/lesson",
            "relUrl": "/lesson",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "3.16 Lesson",
            "content": "First Order of Business: Get your notebook . Open a terminal in vscode, run command: cd _notebooks, type &#39;wget&#39; and paste this link into said terminal and run it . | Take notes wherever you please, but you will be graded on participating . | . So, what is a simulation anyway? . A simulation is a tested scenario used for viewing results/outputs to prepare for them in real world situations . | These can be used for games like dice rolling, spinners, etc . | These can be used for practical things such as building structures, testing car crashes, and other things before engaging in them in the real world . | These simulations can have the option of obeying real world physics (Gravity, collision) or they can go against these norms since this is a fictitious scenario, and couldn&#39;t happen in real life . | . Big Question . Which of the following simulations could be the LEAST useful? . | A retailer trying to identify which products sold the most . | A restaurant determining the efficiency of robots | An insurance company studying the rain impact of cars | A sports bike company studying design changes to their new bike design | . If you guessed a bike company, you&#39;re wrong, because the retail simulation was the right answer. Simulating robots in food service, sudying rain impact on vehicles, and new bike design can contribute a lot more to society in comparison to seeing what products sell more than others. | . Next Big Question . If you were making a simulation for making a new train station, which of the following would be true about this simulation? . It could reveal potential problems/safety issues before construction starts | It cannot be used to test the train station in different weather | Simulation will add high costs to projects | Simulation is not needed because this train station already exists | . Potential Saftey was the right answer, because you need somewhere to test the safety and ethicness of what you&#39;re about to do before you start building it. Otherwise, let&#39;s just say you&#39;ll have a special plaque for FBI&#39;s Most Wanted | . Simulation 1: . Both programs below do the same thing. Given a height and a weight, they calculate how long it will take for a object to fall to the ground in a vacuum subjected to normal Earth levels of gravity. . However, the second one is a simulation. It calculates the distance the object has fallen every 0.1 seconds. This is useful for if you wanted a visual representation of a falling object, which pure math can&#39;t do as smoothly. . height = float(input(&quot;height in meters?&quot;)) weight = input(&quot;weight in pounds?&quot;) stuff = (2 * (height / 9.8))**(1/2) print(&quot;It will take&quot;, stuff,&quot;seconds for an object that weighs&quot;,weight,&quot;pounds&quot;,&quot;to fall &quot;,height,&quot;meters in a vacuum&quot;) . It will take 1.4285714285714286 seconds for an object that weighs 50 pounds to fall 10.0 meters in a vacuum . t = 0 g = 0 d = 0 false = True while false: t = t + 0.1 d = 9.8 / 2 * (t**2) if d &gt;= height: false = False #print(d) # if you want to print the distance every time it calculates it. Too long to output to a terminal, but this could be useful to display graphically. #print(t) print(t) print(d) . 1.5000000000000002 11.025000000000002 . Simulation 2: . This simulation is made in order to simulate movement on a 2d plane vs a 3d plane. . | How it works: we have multiple variables, if statements and equations under a while command in order to randomy generate steps on a 2d plane. Once it reaches the set destination, it will say that the man made it home after x amount of steps. . | For the 3D plane, it takes a lot longer due to how big and open the 3d environment is, so there are more if statements in the 3d plane . | . (explain further) . import random x = 0 y = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): step = random.randrange(4) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 turn = turn + 1 if x == 0 and y == 0: nights = nights + 1 print(&quot;The Man Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y != 0: print(&quot;(&quot;, x,y, &quot;)&quot;) if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average, &quot;Ones that when&#39;t too long &quot;, stopped) . The Man Has Made It Home After 4 Turns ( 440 654 ) ( 1574 1142 ) ( 1988 1484 ) ( 2274 2238 ) ( 1424 2272 ) ( 913 3295 ) ( 509 3495 ) ( 261 3657 ) ( -400 3144 ) ( -1981 3347 ) Caped The Man Has Made It Home After 44846 Turns The Man Has Made It Home After 4 Turns ( -905 287 ) ( -966 354 ) ( -538 12 ) ( -319 -173 ) ( -253 -321 ) ( 33 -711 ) The Man Has Made It Home After 6716252 Turns ( 393 447 ) ( 261 605 ) The Man Has Made It Home After 2691676 Turns ( -673 -149 ) ( 212 784 ) ( 512 568 ) ( 1040 1556 ) ( 1247 2715 ) ( 602 1788 ) ( 154 2014 ) ( -166 2212 ) ( -917 2507 ) ( -2085 3059 ) Caped The Man Has Made It Home After 654 Turns The Man Has Made It Home After 680 Turns ( -22 -652 ) ( 769 -147 ) ( 780 -70 ) ( 522 -94 ) The Man Has Made It Home After 4893306 Turns ( 791 121 ) ( 710 -890 ) ( 1192 -792 ) ( 2243 -531 ) ( 3484 220 ) ( 3768 444 ) ( 4918 1976 ) ( 4889 2721 ) ( 4359 3667 ) ( 4854 4236 ) Caped The Man Has Made It Home After 2 Turns The Man Has Made It Home After 18 Turns The Man Has Made It Home After 124 Turns The Man Has Made It Home After 4 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 6 Turns The Man Has Made It Home After 506 Turns The Man Has Made It Home After 4852 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 4 Turns The Man Has Made It Home After 401730 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 276 Turns The Man Has Made It Home After 12 Turns The Man Has Made It Home After 18 Turns ( 427 143 ) ( 542 -620 ) ( 989 -1691 ) ( 2234 -1692 ) ( 1859 -2113 ) ( 1269 -2511 ) ( 592 -2206 ) ( 1028 -2328 ) ( 1025 -3321 ) ( 588 -2416 ) Caped . KeyboardInterrupt Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb Cell 10 in &lt;cell line: 9&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X12sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; y = y-1 &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X12sZmlsZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; turn = turn + 1 &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X12sZmlsZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; if x == 0 and y == 0: &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X12sZmlsZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; nights = nights + 1 &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X12sZmlsZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; print(&#34;The Man Has Made It Home After &#34;, turn, &#34;Turns&#34;) KeyboardInterrupt: . import random x = 0 y = 0 z = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): #rando movement step = random.randrange(6) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 if step == 4: z = z+1 if step == 5: z = z-1 #Turn counter turn = turn + 1 #Goal check if x == 0 and y == 0 and z == 0: nights = nights + 1 print(&quot;The Bird Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y + z != 0: print(&quot;(&quot;, x,y, &quot;) &quot;,&quot;| &quot;, z) #Too long Stoper if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 z = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average,&quot;Ones that when&#39;t too long &quot;, stopped) . The Bird Has Made It Home After 2 Turns The Bird Has Made It Home After 2 Turns The Bird Has Made It Home After 2 Turns ( -185 525 ) | 380 ( -293 379 ) | 498 ( -534 1074 ) | 828 ( 176 613 ) | 567 . KeyboardInterrupt Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb Cell 11 in &lt;cell line: 10&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X13sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; turns = [] &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X13sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; while (nights &lt; 100): &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X13sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; #rando movement &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X13sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; step = random.randrange(6) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X13sZmlsZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; if step == 0: &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X13sZmlsZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; x = x+1 File /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/random.py:215, in Random.randrange(self, start, stop, step, _int) 213 if stop is None: 214 if istart &gt; 0: --&gt; 215 return self._randbelow(istart) 216 raise ValueError(&#34;empty range for randrange()&#34;) 218 # stop argument supplied. File /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/random.py:255, in Random._randbelow_with_getrandbits(self, n) 253 getrandbits = self.getrandbits 254 k = n.bit_length() # don&#39;t use (n-1) here because n can be 1 --&gt; 255 r = getrandbits(k) # 0 &lt;= r &lt; 2**k 256 while r &gt;= n: 257 r = getrandbits(k) KeyboardInterrupt: . Simulations in the wild . Simulations are used extremely frequently in real life applications. One of the most common examples of simulations are video games. A games physics engine can accurately simulate objects colliding . Another example is Blender, the software used in 3d animations class, here at Del Norte. Blender is made up of many small simulations, but one big one it uses is simulating the way light bounces off of and interacts with objects. . HW !!! . Create a simulation. It can be anything, just has to simulate something. . Some ideas: . Two objects colliding | Gravity on other planets | . AND . Find an example of a simulation in a software/game you use, screenshot, and explain how it is a simulation . import time # Define a function that updates the simulation def update_simulation(): # Update the state of the simulation here... # Prompt the user to enter the mass and radius of a planet mass = float(input(&quot;Enter the mass of the planet (in kilograms): &quot;)) radius = float(input(&quot;Enter the radius of the planet (in kilometers): &quot;)) # Calculate the gravity of the planet gravity = (6.67 * 10**-11 * mass) / (radius**2) print(f&quot;Gravity of planet: {gravity}&quot;) #Gravity of planet 1: Neptune #Gravity of planet 2: Saturn #Gravity of planet 3: Jupiter #Gravity of planet 4: Uranus # Run the simulation indefinitely while True: update_simulation() time.sleep(1) # Pause for 1 second between each update . Gravity of planet: 54212767.98021029 Gravity of planet: 28951451.382520344 Gravity of planet: 67084535.02285952 Gravity of planet: 23315153.5014559 . ValueError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb Cell 15 in &lt;cell line: 17&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; # Run the simulation indefinitely &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; while True: &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; update_simulation() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; time.sleep(1) /Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb Cell 15 in update_simulation() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; def update_simulation(): &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; # Update the state of the simulation here... &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # Prompt the user to enter the mass and radius of a planet -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; mass = float(input(&#34;Enter the mass of the planet (in kilograms): &#34;)) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; radius = float(input(&#34;Enter the radius of the planet (in kilometers): &#34;)) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; # Calculate the gravity of the planet ValueError: could not convert string to float: &#39;&#39; . Example of a Simulation . In terms of coding, NBA 2K is a simulation because it uses a computer program to simulate the behavior and interactions of the various elements that make up a game of basketball. This includes the players, the ball, the court, and the rules of the game. To create this simulation, the developers of NBA 2K use a combination of algorithms, data structures, and mathematical calculations to model the behavior of these elements. For example, they may use algorithms to simulate the movement of the ball and the players on the court, and use data structures to store information about the teams, players, and game rules. Additionally, the developers may use mathematical calculations to model the physics of the game, such as the effects of gravity on the ball and the players, and the interactions between different objects on the court. .",
            "url": "https://dereksol.github.io/Tera/lesson/2022/12/13/Studentlesson8.html",
            "relUrl": "/lesson/2022/12/13/Studentlesson8.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Extra Credit 12/13",
            "content": "Kathyleen Beveridge . . Born in Vietnam, moved to San Diego in 2004 | Received her bachelors degree in Santa Clara bay area, then received a degree at USC | Lives by a mission statement, says my mission in life is to not merely survive, but to thrive and to do so with passion… Career . | First job was an investment banker at Wells Fargo, was a stock broker, mutual funds | Went back to university and switch careers after at High Tech | Took six months off in San Diego, learned how to surf | Switched again, went to Qualcomm, then left Companies . | HP Inc: Create technology that makes life better for everyone, everywhere | Qualcomm: Inventing the tech the world loves | Thermo Fisher Scientific: Enable our customers to make the world healthier, cleaner, and safer | Every company wants to code for the betterment of life and society | Thermo Fisher products that they make, make a massive impact | Her title is senior director for marketing and sales | . Kris Porter . . Title has been Software Engineer, SRE, DevOps, Infrastructure Engineer | Livermore High School alum, enjoyed STEM classes | Went to UCLA for Electrical Engineering, focused on Communication Systems and Computer Networks | Master Degree in Electrical Engineering for Cal State LA | Center for Embedded Networked Sensors Career . | Finished graduate school, stock market crashed | Worked at a shop that was fixing Mac computers | Systems Engineer at a start up, GPM | NBC Universal, Streaming media infrastructure | Intro to DevOps, transition to Qualcomm | Working at Twitter Continuous Learning highlights . | CCNA training | Machine Learning and Deep Learning (Qualcomm) | Python (Udemy) | Data Structures, Algorithms and System Design for Interviews | Twitter University Projects he has worked on . | Streaming Media Infrastructure for the 2012 Olympic Games | Analytics Infrastructure Projects (LocationSmart, Qualcomm) | Twitter Projects, New DataCenter Deployment, Migrating HomeTimeline to GraphQL | .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2012/2022/12/13/ExtraCredit.html",
            "relUrl": "/apcsp%20week%2012/2022/12/13/ExtraCredit.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "wget https://raw.githubusercontent.com/aidenhuynh/CS_Swag/master/_notebooks/2022-11-30-randomvalues.ipynb . Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . Why are libraries important? . Using Libraries makes Python Programming simpler and convenient for the programmer. | One example would be through looping and iteration, as we don’t need to write the same code again and again for different programs. | Python libraries play a very vital role in fields of Machine Learning, Data Science, Data Visualization, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . The AP Exam Refrence Sheet itself is a library! . Hacks: . Research two other Python Libraries NOT DISCUSSED DURING LESSON and make a markdown post, explaining their function and how it helps programmers code. . API&#8217;s . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . Activity: Walkthrough with NumPy . Install NumPy on VSCode: Open New Terminal In VSCode: | pip3 install --upgrade pip | pip install numpy | | . REMEMBER: When running library code cells use Python Interpreter Conda (Version 3.9.12) . Example of using NumPy for arrays: . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . [[1 2 3] [4 5 6] [7 8 9]] . Example of using NumPy for derivatives: . import numpy as np # defining polynomial function var = np.poly1d([2, 0, 1]) print(&quot;Polynomial function, f(x): n&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative, f(x)&#39;=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=5 f(x)&#39;=&quot;, derivative(5)) . Polynomial function, f(x): 2 2 x + 1 Derivative, f(x)&#39;= 4 x When x=5 f(x)&#39;= 20 . Random Values . Random number generation (RNG) produces a random number (crazy right?) This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . | CollegeBoard uses RANDOM(A, B), to return an integer between integers A and B. RANDOM(1, 10) can output 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10 | In Python, this would be random.randint(A, B), after importing Python&#39;s &quot;random&quot; library (import random) | JavaScript&#39;s works a little differently, with Math.random() returning a value between 0 and 1. To match Python and CollegeBoard, you could make a procedure like this | . | . | . CollegeBoard Example: What is the possible range of values for answ3 . Convert the following procedure to Python, then determine the range of outputs if n = 5. . PROCEDURE Dice(n) sum ← 0 REPEAT UNTIL n = 0 sum ← sum + RANDOM(1, 6) n ← n - 1 RETURN sum . import random # Fill in the blank def Dice(n): sum = 0 while n&gt;= 0: sum += random.randint(1, 6) n -= 1 return sum Dice(5) . 19 . Homework . Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier). . | Using NumPy and only coding in python cell, find the answer to the following questions: a. What is the derivative of 2x^5 - 6x^2 + 24x? b. What is the derivative of (13x^4 + 4x^2) / 2 when x = 9? . | Suppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order. . | import random n = int(input(&quot;How many numbers would you like to generate?&quot;)) a = int(input(&quot;Give the lowest number you want all numbers to be picked from?&quot;)) b = int(input(&quot;Give the highest number you want all numbers to be picked from?&quot;)) numbers = [random.randint(a, b) for _ in range(n)] # I input the range from numbers 1-100 evens = [] odds = [] for number in numbers: if number % 2 == 0: evens.append(number) else: odds.append(number) print(evens) print(odds) . [82, 90, 36, 50, 74, 62, 42, 66, 74, 8] [39, 25, 43, 35, 15, 49, 85, 83, 27, 59] . import numpy as np poly = np.poly1d([2, 0, 0, -6, 24, 0]) derivative = poly.deriv() print(&quot;The derivative of n&quot; + str(poly) + &quot; n&quot; + &quot;is&quot; + &quot; n&quot; + str(derivative)) . The derivative of 5 2 2 x - 6 x + 24 x is 4 10 x - 12 x + 24 . import numpy as np n = np.poly1d([13, 0, 4, 0, 0]) d = np.poly1d([2]) derivative = ((d * n.deriv()) - (d.deriv() * n)) / 4 result = derivative(9) print(&quot;The derivative of n&quot; + str(n) + &quot; n divided by&quot; + str(d) + &quot; nis: n&quot; + str(derivative)) print(&quot; nWhen x = 9, f&#39;(x) = n&quot; + str(round(result))) . The derivative of 4 2 13 x + 4 x divided by 2 is: 3 26 x + 4 x When x = 9, f&#39;(x) = 18990 . import random animals = [&#39;dog1&#39;, &#39;dog2&#39;, &#39;dog3&#39;, &#39;dog4&#39;, &#39;dog5&#39;, &#39;dog6&#39;, &#39;dog7&#39;, &#39;dog8&#39;, &#39;dog9&#39;, &#39;dog10&#39;, &#39;cat1&#39;, &#39;cat2&#39;, &#39;cat3&#39;, &#39;cat4&#39;, &#39;cat5&#39;, &#39;cat6&#39;, &#39;cat7&#39;, &#39;cat8&#39;, &#39;cat9&#39;, &#39;cat10&#39;] random.shuffle(animals) print(animals) . [&#39;dog3&#39;, &#39;dog9&#39;, &#39;cat2&#39;, &#39;dog4&#39;, &#39;dog5&#39;, &#39;cat4&#39;, &#39;cat8&#39;, &#39;dog8&#39;, &#39;cat10&#39;, &#39;dog6&#39;, &#39;cat1&#39;, &#39;cat5&#39;, &#39;cat7&#39;, &#39;dog7&#39;, &#39;cat9&#39;, &#39;cat6&#39;, &#39;cat3&#39;, &#39;dog10&#39;, &#39;dog2&#39;, &#39;dog1&#39;] . Hacks . Two Other Python Libraries . Keras . Keras is a deep learning API written in Python, running on top of the machine learning platform TensorFlow. It was developed with a focus on enabling fast experimentation. Being able to go from idea to result as fast as possible is key to doing good research. | It is simple, flexible, and powerful. | Keras reduces developer cognitive load to free you to focus on the parts of the problem that really matter. | Keras adopts the principle of progressive disclosure of complexity: simple workflows should be quick and easy, while arbitrarily advanced workflows should be possible via a clear path that builds upon what you&#39;ve already learned. | Keras provides industry-strength performance and scalability: it is used by organizations and companies including NASA, YouTube, or Waymo. | . Pandas . Pandas is an open source Python package that is most widely used for data science/data analysis and machine learning tasks. It is built on top of another package named Numpy, which provides support for multi-dimensional arrays. -Pandas makes it simple to do many of the time consuming, repetitive tasks associated with working with data such as; data cleansing, data fill, data normalization, merges and joins, data visualization, statistical analysis, data inspection, loading and saving data, etc. | Pretty much used to analyze data fast, powerfully, and flexibly | .",
            "url": "https://dereksol.github.io/Tera/jupyter/libraries",
            "relUrl": "/jupyter/libraries",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "3.9/3.11 Hacks",
            "content": "Flowchart . Link to flowchart . import random def RandomNumGen(x): RandomNumGenList = [] while x &gt; 0: RandomNumGenList.append(random.randint(1,20)) x -= 1 print(RandomNumGenList) return max(RandomNumGenList) RandomNumGen(3) . [3, 2, 13] . 13 .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2014-17/2022/12/09/3.9to11Hacks.html",
            "relUrl": "/apcsp%20week%2014-17/2022/12/09/3.9to11Hacks.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Units 2/3 Vocab",
            "content": "Unit 2 Binary/Data Terms . Bits . A bit is a unit of information that can have only two values: 0 or 1. It is the smallest unit of information that can be stored or processed by a computer. Bits are typically used to represent binary data, which is data that is encoded using only two possible values. In Python you can use &quot;int&quot; data type to represent binary data as a sequence of bits. . binary_number = 0b1010 # represents 1010 as an integer . Bytes . A byte is a group of 8 bits. It is a unit of information that can hold a single character in a computer&#39;s memory. . Hexadecimals/Nibbles . a hexadecimal is a base-16 number represented using the symbols 0-9 and A-F. Hexadecimals are often used to represent colors in web development, as they can be more concise and easier to read than longer binary numbers. | A nibble is a unit of data that is half of a byte (eight bits). It is often represented using a hexadecimal digit, which can represent a value from 0 to 15 in decimal. | . Unsigned Integer . An unsigned integer is a type of integer that can only represent non-negative (greater than or equal to zero) whole numbers. It is called &quot;unsigned&quot; because it does not have a sign bit to indicate whether the number is positive or negative. This means that an unsigned integer can represent a larger range of values than a signed integer, which uses a sign bit to indicate the sign of the number. . Signed Integer . An integer is a whole number that can be either positive or negative. It has no decimal point and can store very large numbers. By default, Python integers are stored as signed integers, which means they can represent both positive and negative numbers. . 10 -10 12345678901234567890 -9876543210987654321 # All these numbers a valid integers in Python . Floating Point . A floating point number is a number with a decimal point. It is used to represent real numbers, such as 3.14159 or -0.01. . For example, the following are all valid floating point numbers in Python: . 3.14 -10.6 0.0 12345.6789 . Boolean . A boolean is a data type that represents a truth value. It can have two values: True or False. Booleans are often used in conditional statements to control the flow of a program . x = True if x: print(&quot;x is True&quot;) else: print(&quot;x is False&quot;) . ASCII . ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text as a series of numbers. It defines a mapping between numerical values and characters, with each character being represented by a unique number between 0 and 127. . Unicode . Unicode is a character encoding standard that represents text as a series of numbers. It is a widely used standard that supports a much larger range of characters than ASCII, including non-Latin scripts and emojis. . In Python, Unicode characters are represented using the str data type, which is a sequence of Unicode code points. . RGB . A problem solving approach (algorithm) to find a satisfactory solution where finding an optimal or exact solution is impractical or impossible. . Lossy . In the context of digital media, &quot;lossy&quot; refers to a type of data compression that reduces the quality of the data in order to save space. Lossy compression algorithms remove data that is not perceived by the human eye or ear, resulting in a smaller file size but lower quality. In Python, you can use various libraries and modules to work with lossy data formats. For . from PIL import Image # Open a JPEG image and save it as a PNG image image = Image.open(&#39;image.jpg&#39;) image.save(&#39;image.png&#39;) . Lossless . Lossless compression algorithms remove redundant or unnecessary data from the file, but do not remove any data that is needed to accurately represent the original data. Lossless compression is commonly used for text, data, and other types of files where it is important to preserve the accuracy of the data. For example, the ZIP file format and the PDF document format are both lossless formats that are widely used for storing and distributing digital documents. . import zipfile # Create a ZIP file with zipfile.ZipFile(&#39;documents.zip&#39;, &#39;w&#39;) as z: z.write(&#39;document1.txt&#39;) z.write(&#39;document2.txt&#39;) # Extract the contents of the ZIP file with zipfile.ZipFile(&#39;documents.zip&#39;, &#39;r&#39;) as z: z.extractall() . Unit 3 Algorithm/Programming Terms . Variables . A variable is a named location in memory that stores a value or reference to a value. When you create a variable, you can specify the value that you want to store in it. You can then use the variable to refer to the value throughout your program. . For example, you might create a variable called name and store your name in it: . name = &quot;Derek&quot; . Data Types . In Python, data types are used to define the type of a value that can be stored in a variable. . ex: &quot;int&quot;, &quot;float&quot;, &quot;str&quot;, etc. . Assignment Operators . assignment operators are used to assign a value to a variable. The most basic assignment operator is the = operator, which assigns the value on the right side of the operator to the variable on the left side. . x = 10 y = 15 . Lists . A list is a collection of items that are ordered and changeable. Lists are written with square brackets and the items are separated by commas. . superheroes = [ &quot;Superman&quot;, &quot;Batman&quot;, &quot;Wonder Woman&quot;, &quot;The Flash&quot;, &quot;Green Lantern&quot;, &quot;Aquaman&quot;, &quot;Martian Manhunter&quot;, &quot;Cyborg&quot;, &quot;Black Canary&quot;, &quot;Captain Marvel&quot;] . 2D Lists . A 2D list is a list of lists. It is a data structure that allows you to store a collection of items, where each item is a list itself. . matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] . Dictionaries . A dictionary is a collection of key-value pairs. It is an unordered data structure that allows you to store and retrieve data using keys rather than indices. . contacts = { &quot;Alice&quot;: &quot;555-1234&quot;, &quot;Bob&quot;: &quot;555-5678&quot;, &quot;Eve&quot;: &quot;555-9101&quot; } . Class . a class is a blueprint for creating objects. It defines the properties and behaviors that the objects will have. . class Dog: def __init__(self, name, breed, age): self.name = name self.breed = breed self.age = age . Algorithms, Sequences, Selection, Iteration . Algorithms: a list set of instructions, used to solve problems or perform tasks. . Sequence: algorithms do tasks in the order of specification. . Selection: helps choose two different outcomes based off a decision. . Iteration: if a condition is true, then the code can repeat. . Expressions . An expression is a piece of code that returns a value. Expressions are made up of variables, operators, and function calls, and they can be used in a variety of contexts, such as assignments, function calls, and control structures. . Comparison Operators . Comparison operators are used to compare the values of two expressions. They return a Boolean value indicating whether the comparison is true or false. . ex: &#39;x == y&#39;: returns True if x is equal to y, and False otherwise. . Boolean Expressions and Selection . a Boolean expression is an expression that evaluates to either True or False. Boolean expressions are often used in control structures, such as if statements and while loops, to determine whether a block of code should be executed. . Here is an example of an if statement using a Boolean expression in Python: . x = 5 if x &gt; 0: print(&quot;x is positive&quot;) . x is positive . Boolean Expressions and Iteration . You can use Boolean expressions in iteration structures, such as for loops and while loops, to control the flow of the loop. . Here is an example of a while loop using a Boolean expression in Python: . x = 5 while x &gt; 0: print(x) x -= 1 . 5 4 3 2 1 . Truth Tables . A truth table is a way to represent the relationship between different logical statements or expressions. It lists all of the possible combinations of input values for the statements or expressions, and shows the corresponding output values that result. . have two values . 0 = off, false . 1 = on, true . Examples . 0 and 0 = false. And operator means both needs to be true. . 0 or 1 = true. Either or. . Use this in conditionals (selection). . XOR = exclusive or. . Or = similar to true or false. - . Ex: A is true, B is false . Characters . A character is a single Unicode character, which is a unit of text that represents a letter, number, symbol, or other type of character. Unicode is a standardized character encoding system that represents characters from many different languages and scripts. . Strings . A string is a sequence of characters. Strings are used to represent text and are often used to store and manipulate data. . string1 = &#39;Hello&#39; print(string1[0]) # Output: &#39;H&#39; print(string1[2]) # Output: &#39;l&#39; . H l . Length . The len() function returns the length of an object. For example, if you have a string, a list, or a tuple, you can use len() to determine the number of elements it contains. . Here&#39;s an example of using len() with a string: . lst = [1, 2, 3, 4, 5] len(lst) . 5 . Concatenation . Concatenation refers to the operation of joining two or more strings together to create a single string. This can be done using the + operator, which is used to add two or more strings together. . s1 = &#39;Hello&#39; s2 = &#39;world&#39; s3 = s1 + &#39; &#39; + s2 print(s3) . Hello world . Upper . Used to check if the argument contains any uppercase characters. . Lower . Returns the lowercase string from the given string. . Traversing Strings . The process of going through a String one character at a time, often using loops. . Python If, Elif, Else Conditionals . If: statement executes a piece of code when one statement is false and the following statement is true. . Elif: first if statement isn&#39;t true, but want to check for another condition. . Else: executes if &quot;if&quot; isn&#39;t true. . hours = 30 sal = &quot;&quot; experienced = True # using operators to determine the salary if (hours &gt;= 10): sal = &quot;130k&quot; elif (hours &gt;= 8): sal = &quot;90k&quot; else: sal = &quot;50k&quot; experienced = False # printing the final statement print (&#39;Derek has a salary of:&#39; , sal,&#39;and has experience:&#39; , experienced) . Derek has a salary of: 130k and has experience: True . Nested Selection Statements . Conditional within a conditional. When more than one decision must be made before the appropriate action can be taken. . Python For, While loops with Range, with List . Returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and stops before a specified number. . Combining loops with conditionals to break, continue . A statement that controls the flow of execution depending on some condition. . Procedural Abstraction . A function encapsulates a bundle of program statements (code): The function gives us a name for the statements, a way to invoke them at a high-level. . Python Def procedures . def is the keyword for defining a function. . def func1(): print(&quot;I am learning Python Function&quot;) . Parameters . A parameter is the variable listed inside the parentheses in the function definition. An argument is the value that is sent to the function when it is called. . def f(data): return data * 5 . Return Values . The value that a function returns to the caller is generally known as the function&#39;s return value. All Python functions have a return value, either explicit or implicit. . def addition(first_number, second_number): answer = first_number + second_number return answer .",
            "url": "https://dereksol.github.io/Tera/2022/12/07/vocab.html",
            "relUrl": "/2022/12/07/vocab.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 3 Sections 12-13",
            "content": "Calling Procedures . Slide 1: . A ___ is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as ___ or ___, depending on the programing language. | Parameters are input values of a procedure. ___ specify the values of the parameters when procedure is called. | A procedure call interrupts the ___ execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was ___. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of ___. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and ___ the arguments. | If the procedure returns some sort of data like a __ or ___, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . def convertFahrenheit(): # code goes here return celsius convertFahrenheit(outsideTemp) . Developing Procedures . Slide 8: . Picking a ___ name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . currentGrade &lt;- currentPoints / 40 currentGrade &lt;- current Grade * 100 if currentGrade &gt; quizGrade quizGrade &lt;- currentGrade . Procedural Abstraction . One type of abstraction is __ abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing __ in a program | Subdivision of a program into separate subprograms is called __ | A procedural abstraction may __ shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a __ procedure | Making sure to include the right arguments so the __ can do what its supposed to do is crucial | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . def procedure() # code goes here return # code goes here .",
            "url": "https://dereksol.github.io/Tera/lessons/2022/12/07/developing-procedures.html",
            "relUrl": "/lessons/2022/12/07/developing-procedures.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 3 Sections 12-13",
            "content": "Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . def convertFahrenheit(temperature): celsius = temperature -32 celsius = celsius * 5/9 return celsius outsideTemp = input(&quot;What is the temperature outside?&quot;) outsideTemp = convertFahrenheit(int(outsideTemp)) print(outsideTemp) . -15.0 . Developing Procedures . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . quizGrade = 25 def currentGrade(currentPoints): currentGrade = currentPoints / 40 currentGrade = currentGrade * 100 return currentGrade newPoints = int(input(&quot;What did you get out of 40?&quot;)) newPercent = (currentGrade(int(newPoints))) if (newPoints &gt; quizGrade): newquizGrade = newPercent print(&quot;your new grade is &quot; + str(newquizGrade) + &quot;%&quot;) else: print(&quot;your grade is still &quot; + str(quizGrade) + &quot;/40&quot;) . your new grade is 87.5% . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a prewritten procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . class Student: marks = [] def getData(self, rn, name, m1, m2, m3): Student.rn = rn Student.name = name Student.marks.append(m1) Student.marks.append(m2) Student.marks.append(m3) def displayData(self): print(&quot;Roll Call Number: &quot;, Student.rn) print(&quot;Name is: &quot;, Student.name) print(&quot;Grade in subject 1: &quot;, Student.marks[0]) print(&quot;Grade in subject 2: &quot;, Student.marks[1]) print(&quot;Grade in subject 3: &quot;, Student.marks[2]) print(&quot;Average Grade of: &quot;, self.average()) GradeAverage = self.average() if (GradeAverage &gt; 90): print(&quot;your an A student&quot;) elif (GradeAverage &gt; 80): print(&quot;your a B Student&quot;) else: print(&quot;do better&quot;) def total(self): m = Student.marks return(Student.marks[0] + Student.marks[1] +Student.marks[2]) def average(self): return ((Student.marks[0] + Student.marks[1] +Student.marks[2])/3) r = int (input(&quot;Enter the roll call number: &quot;)) name = input(&quot;Enter the name: &quot;) m1 = int (input(&quot;Enter the Grade in first subject: &quot;)) m2 = int (input(&quot;Enter the Grade in second subject: &quot;)) m3 = int (input(&quot;Enter the Grade in third subject: &quot;)) s1 = Student() s1.getData(r, name, m1, m2, m3) s1.displayData() . Roll Call Number: 26 Name is: Derek Sol Grade in subject 1: 81 Grade in subject 2: 84 Grade in subject 3: 93 Average Grade of: 86.0 your a B Student .",
            "url": "https://dereksol.github.io/Tera/lessons/2022/12/07/Studentlesson6.html",
            "relUrl": "/lessons/2022/12/07/Studentlesson6.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Student Teaching Portfolio",
            "content": "Unit 3 Sections 1-2 . Notes . Variable is an abstraction inside a program that can hold a value | organizes data by labeling it with descriptive name | consists of three parts: name, value, and type | When naming variables, keep it easy and simple to read, because it can be messy and confusing later on | types of data, integer is a number, text/string is a word, and Boolean is data that determines if something is true or false | assignment operator allows a program to change the value represented by a variable, used to assign values to variables | value stored in a variable will be the most recent value assigned | . Data Abstraction . Method used in coding to represent data in a useful form, by taking away aspects of data that aren&#39;t being used in the situation | Variables and lists are primary tools in data abstraction | Provides a separation between the abstract properties of a data type and the concrete details of its representation | . Lists &amp; Strings . List = ordered sequence of elements | Element = individual value in a list that is assigned to a unique index | Index = a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index | String = ordered sequence of characters (Letters, numbers, special characters) | . What are Lists? . Allow for data abstraction | Bundle variables together | Store multiple elements | Allows multiple related items to be treated as a single value | Give one name to a set of memory cells | Can keep adding elements to it as needed | Can store elements as a single variable by using a list | . 3 Types of List Operations . Assigning values to a list at certain indices | Creating an empty list and assigning it to a variable | Assigning a copy of one list to another list (setting one list equal to another list) | Practice . colorList=[&quot;green&quot;, &quot;red&quot;, &quot;pink&quot;, &quot;purple&quot;, &quot;blue&quot;, &quot;brown&quot;] print(str(colorList)) . [&#39;green&#39;, &#39;red&#39;, &#39;pink&#39;, &#39;purple&#39;, &#39;blue&#39;, &#39;brown&#39;] . Homework/Hacks . print(&quot;General Knowledge Trivia&quot;) QandA = { &quot;#1) What is the largest mammal?&quot;: &quot;blue whale&quot;, &quot;#2) What is the largest organ in the body?&quot;: &quot;skin&quot;, &quot;#3) What galaxy do we live in?&quot;: &quot;milky way&quot;, &quot;#4) Who founded Amazon?&quot;: &quot;jeff bezos&quot;, &quot;#5) What is the world&#39;s largest ocean?&quot;: &quot;pacific ocean&quot;, } def qandresp(question): # display question, return inputted response print(question) resp = input() return resp correct = 0 # Setup print(&quot;Current number of questions: &quot; + str(len(QandA))) # iterate over each key for key in QandA: rsp = qandresp(key) # save user&#39;s response to a variable rsp rsp = rsp.lower() # answer is case sensitive, so match response to lowercase for answer key to work if rsp == QandA[key]: # check if the response is equal to the answer in the dictionary print(f&quot;Correct!&quot;) correct += 1 else: print(f&quot;{rsp} is incorrect &quot;) percent = str(round(correct/len(QandA), 2)*100) # calculate percentage print(&quot;You scored &quot; + str(correct) +&quot;/&quot; + str(len(QandA))) print(f&quot;Which is also, {percent}%&quot;) # print score and percentage . General Knowledge Trivia Current number of questions: 5 #1) What is the largest mammal? Correct! #2) What is the largest organ in the body? heart is incorrect #3) What galaxy do we live in? Correct! #4) Who founded Amazon? Correct! #5) What is the world&#39;s largest ocean? atlantic ocean is incorrect You scored 3/5 Which is also, 60.0% . Unit 3 Sections 3-4 . Notes . An algorithm has three components: sequencing, selection, and iteration | sequencing is algorithms doing tasks in the order of specification | selection is allowing is to choose two different outcomes based off a decision | iteration is that if a condition is true, then the code is repeated | . Algorithm Can Be Represented In Two Ways . flowcharts, which uses shapes and arrows to represent steps of an algorithm | pseudocode, which is a blend of human language and coding format | . Basic Operations . subtraction, represented by - | addition, represented by + | multiplication, represented by * | division, represented by / | getting the remainder, represented by MOD(% in python) | . Different Ways Values Are Stored in Variables . numerical value stored in variable | value of another variable stored in variable | result of an operation stored in a variable | result of a procedure call stored in a variable | . Strings . What is a String? A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . Homework/Hacks . Tracking Variables Hack . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 # Result is 20.4 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 # Result is 0 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueC) # Result is 17 . 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) # Result is straightbrownshort . straightbrownshort . String Hacks . Problem 1 . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = Noun[:7] yoda = abrev + &quot; &quot; + Verb + &quot; &quot; + Adjective2 + &quot; &quot; + Adjective + &quot;.&quot; print(yoda) . Mr.Mort is Very handsome. . Problem 2 . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 len2 = len(cookie2) * 45 vote1 = (str(cookie) + &quot; vote &quot; + str(len2)) vote2 = (str(cookie2) + &quot; vote &quot; + str(len1)) votes = (str(vote1) + &quot; &quot; + str(vote2)) print(votes) . choclate vote 225 rasin vote 4.0 . Unit 3 Sections 8-10 . Notes . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . There is list, then four total collection data types in Python . Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn&#39;t allow duplicates | Dictionary: collection that is ordered, changeable, doesn&#39;t allow duplicates | . More Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . Methods . Method Definition Example . append() | adds element to the end of the list | fruits.append(&quot;watermelon&quot;) | . index() | returns the index of the first element with the specified value | fruits.index(&quot;apple&quot;) | . insert() | adds element at given position | fruits.insert(1, &quot;watermelon&quot;) | . remove() | removes the first item with the specified value | fruits.remove(&quot;strawberry&quot;) | . reverse() | reverses the list order | fruits.reverse() | . sort() | sorts the list | fruits.sort() | . count() | returns the amount of elements with the specified value | fruits.count(&quot;apple&quot;) | . copy() | returns a copy of the list | fruits.copy() | . clear() | removes the elements from the list | fruits.clear() | . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. | There&#39;s a lot of types of iteration though, what to use? How do we apply iteration to lists? | Some methods include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension | here are 2 types of iteration: definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met | . Else, elif, break . Else: when the condition does not meet, do statement() | Elif: when the condition does not meet, but meets another condition, do statement() | Break: stop the loop | . Homework . HW Iteration . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() print(inp + &quot; -&gt;&quot;) for i in range(len(inp)): for j in range(len(words)): if inp[i] == words [j][0]: print(words[j]) . derek -&gt; delta echo romeo echo kilo . Other way to print matrix . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . def print_matrix3(matrix): for i in range(len(keypad)): print(*keypad[i]) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . Birth Month HW . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] print(str(keyboard[0][1]) + str(keyboard[3][9]) + str(keyboard[0][1]) + str(keyboard[0][7]) + str(keyboard[3][9]) + str(keyboard[0][2]) + str(keyboard[0][10]) + str(keyboard[0][10]) + str(keyboard[0][5]) + &quot; n&quot; + str(keyboard[0][1]) + str(keyboard[0][7])) . 1/17/2005 17 . Unit 3 Sections 9-11 . Notes . Algorithms . Algorithms can be written in different ways and still accomplish the same tasks | Algorithms that appear similar can yield different side effects or results. | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) | Different algorithms can be developed or use to solve the same problem. | . Conditionals vs. Boolean . The condition and instructions are what differ, that&#39;s where the magic happens. The condition is a boolean expression when an expression outputs either true or false. Boolean values are another type of data type in programming languages, and they can only ever hold true or false. . Selection vs. Iteration . Selection: . A process used in algorithms where a conditional if-statement leads to one of two outcomes | Outcome 1: if the conditional statement is true, something will happen | Outcome 2: if the conditional statement is false, something else will happen | . Iteration . A process used in algorithms that allows certain things to happen until a condition is satisfied | Once the condition is satisfied, then an outcome is produced | This can take the form of a for-loop, while-loop, and/or if-statement | . Takeaways . You can use code you&#39;ve previously wrote in order to make a project easier. | Breaking algorithms down into steps can make things easier and more simple. | . Homework . Unit 3 Sections 12-13 . Notes . Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . Developing Procedures . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a prewritten procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . Homework .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2014-17/2022/12/01/Studentteachingportfolio.html",
            "relUrl": "/apcsp%20week%2014-17/2022/12/01/Studentteachingportfolio.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Mathematical Expressions and Strings",
            "content": "What is an Algorithm? . An algorithm: a set of instructions that can accomplish a specific task. . An Algorithm Has Three Components . Sequencing: Algorithms do tasks in the order of specification. | . Selection: Helps choose two different outcomes based off a decision. | . Iteration: If a condition is true, then the code can repeat. | . Algorithms Can Be Represented in Two Ways . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | . . Pseudocode: A blend of human language and coding format. | Hacks: Jamboard Flowchart . Click on this link for a group activity . . . Arithmetic Operations . Arithmetic operations exist in most programming languages. . Basic Operations . Subtraction: . Represented by “-&quot; | . num1 = 2 - 1 . Addition: . Represented by &quot;+&quot; | . num1 = 2 + 1 . Multiplication: . Represented by “*” | . num1 = 2 * 1 . Division: . Represented by “/” | . num1 = 2 / 1 . Getting the Remainder: . Represented by “MOD” (% in python) | . num1 = 5 % 2 . Different Uses . Items can be numbers or variables. . Examples: . num1 = 10 num2 = num1 - 25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Example: Evaluate num1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) . 10.0 . . . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable . | Value of another variable stored in a variable . | Result of an operation stored in a variable . | Result of a procedure call stored in a variable . | score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20, 60, 80) # 4 . Sequencing is Important! . Changing the order of the steps changes the overall outcome, since every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables, especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6, which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6, which is 16 # output: num1 = 10, num2 = 16, num3 = 6 . VS . num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14, num2 = 8, num3 = 6 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot, not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var2 = var1 - var3 #var1 = var2 #var3 = (var1 + var2) / 2 #var2 = 6 print(var1) print(var2) print(var3) . 9 7 2 . Hacks/Homework . Evaluate the variable &quot;result&quot;. . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueB) . 13 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) . straightbrownshort . . . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pseudocode starts at 1) . Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Problem 1 . from operator import concat Noun = &quot;Mr.Mortensen&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = substring (Noun, 1, 7) yoda = concat(Adjective2, &quot;4&quot;, Adjective, &quot;6&quot;, Adjective, &quot;4&quot;, Adjective, &quot;a&quot;) display[yoda] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 31 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; Adjective2 = &#34;Very&#34; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; Verb = &#34;is&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; abrev = substring(Noun, 1, 7) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; yoda = concat(Adjective2, &#34;4&#34;, Adjective, &#34;6&#34;, Adjective, &#34;4&#34;, Adjective, &#34;a&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; display[yoda] NameError: name &#39;substring&#39; is not defined . Problem 2 . cookie = len(&quot;choclate&quot;) cookie2 = len(&quot;rasin&quot;) len1 = cookie / 2 len2 = cookie2 * 45 vote1 = (cookie, &quot;vote&quot;, len2) vote2 = (cookie2, &quot;vote&quot;, len1) votes = concat(vote1, &quot; &quot;, vote2) display[votes] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 33 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; vote1 = (cookie, &#34;vote&#34;, len2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; vote2 = (cookie2, &#34;vote&#34;, len1) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; votes = concat(vote1, &#34; &#34;, vote2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; display[votes] NameError: name &#39;concat&#39; is not defined .",
            "url": "https://dereksol.github.io/Tera/jupyter/lesson2",
            "relUrl": "/jupyter/lesson2",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Variables, Assignments, and Data Abstraction",
            "content": "Variables . A variable is an abstraction inside a program that can hold a value | It organizes data by labeling it with a descriptive name | It consists of three parts: name, value, and type | Using meaningful variables names helps with readability of program code and understanding of what values are represented by the variables | . Naming Variables . Do&#39;s Don&#39;ts Why . highScore | highestScoreInTheGame | Keep it simple and easy to read, having variables that are too complicated can cause your code to become messy later on | . highScore | highscore | Differentiate the words in your variable with a capital letter. Makes things easier to read | . firstName | n | not specific enough/vague | . isRaining | is it raining | spaces are improper syntax | . phoneNumber | 555-number | dashes are improper syntax and numbers should be avoided in variable names | . Types of data Integer: A number | Text/string: A word | Boolean: Data that determines if something is true or false | . | . name = &quot;table1&quot; #string print(name, type(name)) number = 4 #integer print(number, type(number)) isAbsent = False print(isAbsent, type(isAbsent)) . table1 &lt;class &#39;str&#39;&gt; 4 &lt;class &#39;int&#39;&gt; False &lt;class &#39;bool&#39;&gt; . A list of data can also be stored in variables. Why is that useful? . print/retrieve specific values in the list without creating a lot of variables | easily remove/add/change items into the list | . colors = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;] print(colors[2]) . yellow . Assignments . The assignment operator allows a program to change the value represented by a variable | Used to assigning values to variables | . Operator Description Syntax Outcome when print(a) . = | Assign value of right side of expression to left side operand | a = b | b | . += | Add right side operand with left side operand and then assign to left operand | a += b | a + b | . -= | Subtract right operand from left operand and then assign to left operand: True if both operands are equal | a -= b | a - b | . *= | Multiply right operand with left operand and then assign to left operand | a *= b | a * b | . /= | Divide left operand with right operand and then assign to left operand | a /= b | a / b | . **= | Calculate exponent(raise power) value using operands and assign value to left operand | a **= b | a ^ b | . a = 1 b = 2 a = b print(a) . The value stored in a variable will be the most recent value assigned . a = 1 b = a a = 2 print(b) . 1 . Changing Values . currentScore = 10 highScore = currentScore currentScore = 7 print(highScore) . your turn! Here are 3 problems for you to solve . num1 = 5 num2 = 9 num1 = num2 print(num1) print(num2) . num1 = 15 num2 = 25 num3 = 42 num2 = num3 num3 = num1 num1 = num2 print(num1) print(num2) print(num3) . Which of these will show the sum? . num2 += num1 print(num1) print(num2) print(str(num1)+ str(num2)) print(num1 + num2) . Data Abstraction . Method used in coding to represent data in a useful form, by taking away aspects of data that aren&#39;t being used in the situation | Variables and lists are primary tools in data abstraction | Provides a separation between the abstract properties of a data type and the concrete details of its representation | . Lists &amp; Strings . List = ordered sequence of elements | Element = individual value in a list that is assigned to a unique index | Index = a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index | String = ordered sequence of characters (Letters, numbers, special characters) . Note: index starts at 1 for AP Exam, must be whole numbers, cannot be negative, and goes up to the number of elements in the list We can represent a list or string using a variable . | . Example of a List - Colors . Index Element . 1 | Green | . 2 | Blue | . 3 | Purple | . 4 | Pink | . At Index 1, the element is green, at index 2, the element is blue, etc. | . Managing the Complexity of a Program through Data Abstraction . Data abstractions help manage complexity in programs by giving a collection of data a name without referencing the specific details of the representation | Developing a data abstraction to use in a program can result in a program that is easier to develop and maintain | . Using Lists as Data Abstractions . What are Lists? . Allow for data abstraction | Bundle variables together | Store multiple elements | Allows multiple related items to be treated as a single value | Give one name to a set of memory cells | Can keep adding elements to it as needed | Can store elements as a single variable by using a list | . 3 Types of List Operations . Assigning values to a list at certain indices | Creating an empty list and assigning it to a variable | Assigning a copy of one list to another list (setting one list equal to another list) | 1. Assigning values to a list at certain indices . colorsList=[&quot;pink&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;orange&quot;] print(colorsList) . [&#39;pink&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;orange&#39;] . 2. Creating an empty list and assigning it to a variable . colorsList=[] # can be used if you want to create a list that can be filled with values later . 3. Assigning a copy of one list to another list (setting one list equal to another list) . # copy of the list is made; the list isn&#39;t sorted in place def Reverse(lst): # defining variable: lst new_lst = lst[::-1] return new_lst lst = [&quot;pink&quot;, &quot;green&quot;, &quot;purple&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;, &quot;black&quot;] print(Reverse(lst)) # reverse 1st . [&#39;black&#39;, &#39;blue&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;purple&#39;, &#39;green&#39;, &#39;pink&#39;] . What is Managing Complexity? . Improving code readability | Reducing the need for new variables as more data is collected | Can easily update data | Can easily convert data to different forms | . How do Lists Help Manage the Complexity of a Program? . Don’t need as many variables | Can easily change the number of variables | Can apply the same mathematical computation (through an algorithm) to all the elements in the list | . Data Abstraction Practice . Manage the complexity of the given code below using a list. Re-write the code segment in a less complex way, but with the same result. . color1=&quot;green&quot; color2=&quot;red&quot; color3=&quot;pink&quot; color4=&quot;purple&quot; color5=&quot;blue&quot; color6=&quot;brown&quot; print(color1) print(color2) print(color3) print(color4) print(color5) print(color6) . green red pink purple blue brown . Answer . colorList=[&quot;green&quot;, &quot;red&quot;, &quot;pink&quot;, &quot;purple&quot;, &quot;blue&quot;, &quot;brown&quot;] print(str(colorList)) . [&#39;green&#39;, &#39;red&#39;, &#39;pink&#39;, &#39;purple&#39;, &#39;blue&#39;, &#39;brown&#39;] . AP Exam Use of Data Abstraction . With the properties of the AP Exam pseudocode, lists work differently from what we&#39;ve learned in python so far, here are the two major differences: . The index does not start at 0 but 1 | There is only one method of interchanging data between lists, and that is completely overwriting previous list data with the other list n&quot;, | . Homework . You will turn in a program that utilizes lists and variables as it&#39;s primary function, options could be a quiz, a sorter, database, or wherever your imagination brings you. You will be graded on how well you understood the concepts and if you used anything other than just the simplest parts . Quiz template, if you do use it, fix the issues, and add more to it than it&#39;s current barebones state. I would recommend using it to create something related to school. . quesCount = 0 # Use a dictionary for the questions quesList = [&quot;Question1&quot;, &quot;Question2&quot;, &quot;Question3&quot;, &quot;Question4&quot;] # Use a dictionary for the correct solutions soluList = [&quot;Solution1&quot;, &quot;Solution2&quot;, &quot;Solution3&quot;, &quot;Solution4&quot;] quesAmount= len(quesList) hrm quesCount &lt;= quesAmount: print(quesList[quescount] + &quot; n&quot;) guess = input() if(guess == soluList[quesamOOuaunt]): score+=1 print(&quot;Correct! Score: &quot;) else: print(&quot;Incorrect! The correct answer was &quot; + soluList(quescount) + &quot; n&quot;) quesCount += 1 print(&quot;Final score: &quot; + str(score)) .",
            "url": "https://dereksol.github.io/Tera/lectures/2022/12/01/Studentlesson1.html",
            "relUrl": "/lectures/2022/12/01/Studentlesson1.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Conditionals",
            "content": "Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . . Can also be seen as if else statements or if else-blocks . . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 0 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is not greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = num2 = sum = num1 + num2 .",
            "url": "https://dereksol.github.io/Tera/2022/11/30/presentation.html",
            "relUrl": "/2022/11/30/presentation.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "3.6 Conditionals",
            "content": "Focusing on Selection . Selection: uses a condition that evaluates if it is true or false . . Conditional Statements . Also known as &quot;If-statements&quot; . . Can be seen as if statements or if blocks . x = 4 y = 10 if y &gt; x: print(&quot;y is greater than x&quot;) . y is greater than x . Can also be seen as if else statements or if else blocks . . x = 4 y = 10 if y &gt; x: print(&quot;y is greater than x&quot;) else: print(&quot;y is less than x&quot;) . y is greater than x .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2014/2022/11/29/conditionspresent.html",
            "relUrl": "/apcsp%20week%2014/2022/11/29/conditionspresent.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "3.6 Conditionals",
            "content": "Focusing on Selection . Selection: uses a condition that evaluates if it is true or false . .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2014/2022/11/29/conditionalspresentation.html",
            "relUrl": "/apcsp%20week%2014/2022/11/29/conditionalspresentation.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Mathematical Expressions and Strings",
            "content": "What is an Algorithm? . An algorithm: a set of instructions that can accomplish a specific task. . An Algorithm Has Three Components . Sequencing: Algorithms do tasks in the order of specification. | . Selection: Helps choose two different outcomes based off a decision. | . Iteration: If a condition is true, then the code can repeat. | . Algorithms Can Be Represented in Two Ways . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | . . Pseudocode: A blend of human language and coding format. | Hacks: Jamboard Flowchart . Click on this link for a group activity . . . Arithmetic Operations . Arithmetic operations exist in most programming languages. . Basic Operations . Subtraction: . Represented by “-&quot; | . num1 = 2 - 1 . Addition: . Represented by &quot;+&quot; | . num1 = 2 + 1 . Multiplication: . Represented by “*” | . num1 = 2 * 1 . Division: . Represented by “/” | . num1 = 2 / 1 . Getting the Remainder: . Represented by “MOD” (% in python) | . num1 = 5 % 2 . Different Uses . Items can be numbers or variables. . Examples: . num1 = 10 num2 = num1 - 25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Example: Evaluate num1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) . 10.0 . . . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable . | Value of another variable stored in a variable . | Result of an operation stored in a variable . | Result of a procedure call stored in a variable . | score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20, 60, 80) # 4 . Sequencing is Important! . Changing the order of the steps changes the overall outcome, since every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables, especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6, which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6, which is 16 # output: num1 = 10, num2 = 16, num3 = 6 . VS . num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14, num2 = 8, num3 = 6 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot, not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var2 = var1 - var3 #var1 = var2 #var3 = (var1 + var2) / 2 #var2 = 6 print(var1) print(var2) print(var3) . 9 7 2 . Hacks/Homework . Evaluate the variable &quot;result&quot;. . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueB) . 13 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) . straightbrownshort . . . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pseudocode starts at 1) . Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Problem 1 . from operator import concat Noun = &quot;Mr.Mortensen&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = substring (Noun, 1, 7) yoda = concat(Adjective2, &quot;4&quot;, Adjective, &quot;6&quot;, Adjective, &quot;4&quot;, Adjective, &quot;a&quot;) display[yoda] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 31 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; Adjective2 = &#34;Very&#34; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; Verb = &#34;is&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; abrev = substring(Noun, 1, 7) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; yoda = concat(Adjective2, &#34;4&#34;, Adjective, &#34;6&#34;, Adjective, &#34;4&#34;, Adjective, &#34;a&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; display[yoda] NameError: name &#39;substring&#39; is not defined . Problem 2 . cookie = len(&quot;choclate&quot;) cookie2 = len(&quot;rasin&quot;) len1 = cookie / 2 len2 = cookie2 * 45 vote1 = (cookie, &quot;vote&quot;, len2) vote2 = (cookie2, &quot;vote&quot;, len1) votes = concat(vote1, &quot; &quot;, vote2) display[votes] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 33 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; vote1 = (cookie, &#34;vote&#34;, len2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; vote2 = (cookie2, &#34;vote&#34;, len1) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; votes = concat(vote1, &#34; &#34;, vote2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; display[votes] NameError: name &#39;concat&#39; is not defined .",
            "url": "https://dereksol.github.io/Tera/jupyter/lesson2",
            "relUrl": "/jupyter/lesson2",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Mathematical Expressions and Strings",
            "content": "What is an Algorithm? . An algorithm: a set of instructions that can accomplish a specific task. . An Algorithm Has Three Components . Sequencing: Algorithms do tasks in the order of specification. | . Selection: Helps choose two different outcomes based off a decision. | . Iteration: If a condition is true, then the code can repeat. | . Algorithms Can Be Represented in Two Ways . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | . . Pseudocode: A blend of human language and coding format. | Hacks: Jamboard Flowchart . Click on this link for a group activity . . . Arithmetic Operations . Arithmetic operations exist in most programming languages. . Basic Operations . Subtraction: . Represented by “-&quot; | . num1 = 2 - 1 . Addition: . Represented by &quot;+&quot; | . num1 = 2 + 1 . Multiplication: . Represented by “*” | . num1 = 2 * 1 . Division: . Represented by “/” | . num1 = 2 / 1 . Getting the Remainder: . Represented by “MOD” (% in python) | . num1 = 5 % 2 . Different Uses . Items can be numbers or variables. . Examples: . num1 = 10 num2 = num1 - 25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Example: Evaluate num1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) . 10.0 . . . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable . | Value of another variable stored in a variable . | Result of an operation stored in a variable . | Result of a procedure call stored in a variable . | score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20, 60, 80) # 4 . Sequencing is Important! . Changing the order of the steps changes the overall outcome, since every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables, especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6, which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6, which is 16 # output: num1 = 10, num2 = 16, num3 = 6 . VS . num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14, num2 = 8, num3 = 6 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot, not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var2 = var1 - var3 #var1 = var2 #var3 = (var1 + var2) / 2 #var2 = 6 print(var1) print(var2) print(var3) . 9 7 2 . Hacks/Homework . Evaluate the variable &quot;result&quot;. . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueB) . 13 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) . straightbrownshort . . . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pseudocode starts at 1) . Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Problem 1 . from operator import concat Noun = &quot;Mr.Mortensen&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = substring (Noun, 1, 7) yoda = concat(Adjective2, &quot;4&quot;, Adjective, &quot;6&quot;, Adjective, &quot;4&quot;, Adjective, &quot;a&quot;) display[yoda] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 31 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; Adjective2 = &#34;Very&#34; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; Verb = &#34;is&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; abrev = substring(Noun, 1, 7) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; yoda = concat(Adjective2, &#34;4&#34;, Adjective, &#34;6&#34;, Adjective, &#34;4&#34;, Adjective, &#34;a&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; display[yoda] NameError: name &#39;substring&#39; is not defined . Problem 2 . cookie = len(&quot;choclate&quot;) cookie2 = len(&quot;rasin&quot;) len1 = cookie / 2 len2 = cookie2 * 45 vote1 = (cookie, &quot;vote&quot;, len2) vote2 = (cookie2, &quot;vote&quot;, len1) votes = concat(vote1, &quot; &quot;, vote2) display[votes] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 33 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; vote1 = (cookie, &#34;vote&#34;, len2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; vote2 = (cookie2, &#34;vote&#34;, len1) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; votes = concat(vote1, &#34; &#34;, vote2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; display[votes] NameError: name &#39;concat&#39; is not defined .",
            "url": "https://dereksol.github.io/Tera/jupyter/lesson2",
            "relUrl": "/jupyter/lesson2",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Mathematical Expressions and Strings",
            "content": "What is an Algorithm? . An algorithm: a set of instructions that can accomplish a specific task. . An Algorithm Has Three Components . Sequencing: Algorithms do tasks in the order of specification. | . Selection: Helps choose two different outcomes based off a decision. | . Iteration: If a condition is true, then the code can repeat. | . Algorithms Can Be Represented in Two Ways . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | . . Pseudocode: A blend of human language and coding format. | Hacks: Jamboard Flowchart . Click on this link for a group activity . . . Arithmetic Operations . Arithmetic operations exist in most programming languages. . Basic Operations . Subtraction: . Represented by “-&quot; | . num1 = 2 - 1 . Addition: . Represented by &quot;+&quot; | . num1 = 2 + 1 . Multiplication: . Represented by “*” | . num1 = 2 * 1 . Division: . Represented by “/” | . num1 = 2 / 1 . Getting the Remainder: . Represented by “MOD” (% in python) | . num1 = 5 % 2 . Different Uses . Items can be numbers or variables. . Examples: . num1 = 10 num2 = num1 - 25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Example: Evaluate num1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) . 10.0 . . . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable . | Value of another variable stored in a variable . | Result of an operation stored in a variable . | Result of a procedure call stored in a variable . | score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20, 60, 80) # 4 . Sequencing is Important! . Changing the order of the steps changes the overall outcome, since every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables, especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6, which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6, which is 16 # output: num1 = 10, num2 = 16, num3 = 6 . VS . num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14, num2 = 8, num3 = 6 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot, not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var2 = var1 - var3 #var1 = var2 #var3 = (var1 + var2) / 2 #var2 = 6 print(var1) print(var2) print(var3) . 9 7 2 . Hacks/Homework . Evaluate the variable &quot;result&quot;. . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueB) . 13 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) . straightbrownshort . . . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pseudocode starts at 1) . Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Problem 1 . from operator import concat Noun = &quot;Mr.Mortensen&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = substring (Noun, 1, 7) yoda = concat(Adjective2, &quot;4&quot;, Adjective, &quot;6&quot;, Adjective, &quot;4&quot;, Adjective, &quot;a&quot;) display[yoda] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 31 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; Adjective2 = &#34;Very&#34; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; Verb = &#34;is&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; abrev = substring(Noun, 1, 7) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; yoda = concat(Adjective2, &#34;4&#34;, Adjective, &#34;6&#34;, Adjective, &#34;4&#34;, Adjective, &#34;a&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; display[yoda] NameError: name &#39;substring&#39; is not defined . Problem 2 . cookie = len(&quot;choclate&quot;) cookie2 = len(&quot;rasin&quot;) len1 = cookie / 2 len2 = cookie2 * 45 vote1 = (cookie, &quot;vote&quot;, len2) vote2 = (cookie2, &quot;vote&quot;, len1) votes = concat(vote1, &quot; &quot;, vote2) display[votes] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 33 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; vote1 = (cookie, &#34;vote&#34;, len2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; vote2 = (cookie2, &#34;vote&#34;, len1) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; votes = concat(vote1, &#34; &#34;, vote2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; display[votes] NameError: name &#39;concat&#39; is not defined .",
            "url": "https://dereksol.github.io/Tera/jupyter/lesson2",
            "relUrl": "/jupyter/lesson2",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Lesson Plan for 3.5-3.7",
            "content": "Notes on my Section of Teaching Hello . 3.6: Daily Video 1 Notes . Learning how to express an algorithm that uses selection without using a programming language, such as flowcharts and pseudo code | Selection determines which part of an algorithm are executed based on a condition being true or false | Algorithm is a finite set of instructions that accomplish a specific task | Consists of combinations of sequencing, selection, and iteration | Selection allows us to choose different outcomes based off of the result of a decision or condition | Can write an algorithm to update a high score for example | 1.Set highScore to 10 | 2.Get currentScore from user | Using selection, 3. If currentScore is greater than highScore, set highScore to currentScore | 4.If not, Display highScore | . 3.6: Daily Video 2 Notes . Learn how to write conditional statements | Conditional statements, also known as “if-statements,” affect the sequential flow of control by executing different statements based on the value of a Boolean expression | Can write them as if blocks or if else blocks | If condition is true, whatever statement is in the block of statements is done | IF ELSE, two outcomes, IF is just one particular outcome | First get input from the user, IF statement will take the Boolean expression and put it in the parentheses or the block associated for the IF | IF it is true, displays the number | Display goodbye outside of if statement so it says goodbye whether or not the outcome of IF is true or else | Represent these algorithms that have selection by writing conditional statements, these allow us to alter the outcome based off of a Boolean expression, can do IF ELSE statements to have two different outcomes | . 3.6: Daily Video 3 Notes . Learn how to determine the result of conditional statements | Conditional statements alter the flow of execution in our program, can do this using IF blocks, or we can do IF ELSE blocks to choose from two different outcomes | ELSE only executes if the IF condition is false | IF statements allow us to perform specific action based off the condition being true or false | . Lesson Plan Idea . PearDeck encapsulating 3.5-3.7 | Each one of us is responsible for teaching a section, since there is only three sections, two of us will work together to teach the same section | Ethan and I will be responsible for teaching 3.6, which is Conditionals | On the PearDeck, there will be visuals on slides to support our teaching, and is a more interactive form of a presentation to keep them engaged | We will put flow charts and images of code relating to conditionals, like IF blocks and IF ELSE blocks, and definitions of what algorithms and selection means | Plan to teach for about 10 minutes on this section | Afterward, have them go through 3 questions relating to this conditionals section, thinking one question could be putting a specific example of an IF statement and having them determine the outcome | Maybe question where you are given a scenario and have to show me how you would build this conditional statement on VSCode | First person to get these questions right can be rewarded with candy | At the end, we could give them independent work time to create an IF statement and and IF ELSE statement in VSCode as homework | .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2013/2022/11/17/Lessonplan.html",
            "relUrl": "/apcsp%20week%2013/2022/11/17/Lessonplan.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | . | | | . 4 2 1 .",
            "url": "https://dereksol.github.io/Tera/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 5, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "N@TM Individual Blog",
            "content": ". Classes I Visited . I visited many classes for the night of the Museum such as 3D Computer Animation, Ceramics, and Photography. The class that this picture is from is Ceramics. This was one of the projects where you had to make a teacup or teapot, and it was up to you to decide what you wanted it to look like. This person decided to incorporate an octopus onto the cup by attaching tentacles all over it. Something I really liked about this project is the texture of the tentacles and how the barnacles look and felt so real. This is another picture from Ceramics. One of the projects was to make whatever you wanted using all the previous projects as inspiration. This person made a plate and a mug that were both M&amp;M themed, and this plate was the orange M&amp;M. I really like the theme that he went with and the execution of the logo. . Ideas for Next Trimester . Our project came out pretty solid, however there was a lot more things that I wanted to add for improvement. I really wanted to add a dropdown menu, but was very hard for me to make and find a tutorial that I found helpful. As the Frontend Developer, I did a decent job at making the website look aesthetically appealing, however I wish I could have done and learned a lot more styles to make everything look better. One big takeaway from this project was to have better time management as a group, because if we split the work up more evenly and throughout more days, our project could have reached a higher potential and outcome. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2012/2022/11/04/N@TMblog.html",
            "relUrl": "/apcsp%20week%2012/2022/11/04/N@TMblog.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Individual Trimester 1 Final Blog",
            "content": "Questions that I missed . 6. Loop terminates when count exceeds max, so only values less than or equal to max are printed. . 8. The procedure does not interchange the values of j and k. Rather, it returns a new list with the values at indices j and k interchanged. . 11. Wasn’t too sure on this question and confused. The inner loop iterates from index j + 1 to the end of the list, so each element is only compared with the elements that follow it. . 14. When numCorrect is 9, the condition numCorrect &gt; 7 evaluates to true and the condition numCorrect ≥ 9 evaluates to true. Therefore “check plus” is displayed as intended. . 16. Thought that it was only broken up into two packets but there are many more. Messages are broken into as many packets as are needed to transmit the data. Each packet contains both data and metadata. . 21. Statement I is true because strings of characters can be represented by sequences of bits. . 22. Confused on binary numbers a bit. Binary 0110 is equivalent to 22+21, or decimal 6. . 29. Switched my answers at the very end from the right one to the wrong one. Input data can be stored as any data type. Programming languages do not typically store input data in a list for record-keeping purposes. . 32. The last assignment statement assigns a copy of myList to yourList, rather than appending one list to the other. . 34. The code segment initializes the three lists, and then swaps the contents of firstList and secondList rather than appending one list to the other. . 35. Didn’t know if the MaxPs 50 goes before or after. . 36. This would be the correct solution if i were initialized to 2 instead of 1. This code segment will generate the list [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]. . 37. Confused on what temp means. A temporary variable is needed to interchange the values of two variables. . 39. List indices are typically nonnegative integers, so a decimal number between two integers would be considered an invalid index. . 41. This is the initial value of p. None of the variables has the value 10 after executing the code segment. . 42. After initially assigning values to the variables, the code segment assigns the value 4 to num3 and assigns the value 8 to num1. The value of sum at the end of the code segment is 8 + 4 + 4, or 16. . 43. This is the value of x after the code segment is executed, not the value of result. . 45. The code segment iterates through each element in the list, incrementing count1 for each positive value and incrementing count2 otherwise. There are only two positive values in the list, not five. . 46. The fourth statement assigns the value of second (which is true) to first. . 48. The value of y is initially 50, but its value is changed to 75 in the fifth statement. . 49. Switched answers last second. This code segment produces the string “onno”. . 50. Overall confused on how to attack this question. Took my best guess on this one. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2012/2022/11/04/IndividualTri1Final.html",
            "relUrl": "/apcsp%20week%2012/2022/11/04/IndividualTri1Final.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "AP Prep Multiple Choice 2",
            "content": "1.4 Identifying and Correcting Errors Quiz . . 1.5 The Internet Quiz . . After looking over the questions that I got wrong, I realized why my answers were wrong and why the right ones fit better. Overall, a little bit of trouble with this week’s quizzes, but learned more than I knew before. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%207/2022/10/09/APPrep2.html",
            "relUrl": "/apcsp%20week%207/2022/10/09/APPrep2.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Application Programming Interface (API)",
            "content": "Covid19 RapidAPI Example . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;561be3d3dcmsh26da5c03e252f9fp1d2d4fjsn25f9e92f38d8&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.json) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . &lt;bound method Response.json of &lt;Response [200]&gt;&gt; World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . API For my Project . import requests url = &quot;https://basketball-data.p.rapidapi.com/tournament/teams&quot; querystring = {&quot;tournamentId&quot;:&quot;89&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;b731fee7a5mshf2b6608334c0b07p13bf5fjsn09fcf5df26f4&quot;, &quot;X-RapidAPI-Host&quot;: &quot;basketball-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json()) . [{&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Adelaide 36ers&#39;, &#39;shortName&#39;: &#39;ADE&#39;, &#39;mediumName&#39;: &#39;Ad. 36ers&#39;, &#39;id&#39;: 1448}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Brisbane Bullets&#39;, &#39;shortName&#39;: &#39;BRI&#39;, &#39;mediumName&#39;: &#39;B.Bullets&#39;, &#39;id&#39;: 2503}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Cairns Taipans&#39;, &#39;shortName&#39;: &#39;CTP&#39;, &#39;mediumName&#39;: &#39;C.Taipans&#39;, &#39;id&#39;: 1446}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Illawarra Hawks&#39;, &#39;shortName&#39;: &#39;ILH&#39;, &#39;mediumName&#39;: &#39;I.Hawks&#39;, &#39;id&#39;: 1443}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Melbourne United&#39;, &#39;shortName&#39;: &#39;MEL&#39;, &#39;mediumName&#39;: &#39;Melb.United&#39;, &#39;id&#39;: 1445}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;New Zealand Breakers&#39;, &#39;shortName&#39;: &#39;NZB&#39;, &#39;mediumName&#39;: &#39;N.Z.Breakers&#39;, &#39;id&#39;: 1441}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Perth Wildcats&#39;, &#39;shortName&#39;: &#39;PWC&#39;, &#39;mediumName&#39;: &#39;P.Wildcats&#39;, &#39;id&#39;: 1442}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;SE Melbourne Phoenix&#39;, &#39;shortName&#39;: &#39;&#39;, &#39;mediumName&#39;: &#39;&#39;, &#39;id&#39;: 3696}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Sydney Kings&#39;, &#39;shortName&#39;: &#39;SDK&#39;, &#39;mediumName&#39;: &#39;S.Kings&#39;, &#39;id&#39;: 1444}] .",
            "url": "https://dereksol.github.io/Tera/2022/10/09/PBL-python_rapidapi.html",
            "relUrl": "/2022/10/09/PBL-python_rapidapi.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Code Corrections",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter z is the 26 letter in the alphabet . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter x is the 24 letter in the alphabet . Evens while loop . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . Odds while loop . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . Evens for loop . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): # % sign is a division sign odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . Before . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . After . numbers = [] newNumbers = [] i = 0 while i &lt; 101: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 10 == 5: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Before . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 0 . After . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} # use of dictionary total = 0 #shows the user the menu and prompts them to select an item print(&quot;Derek&#39;s Restaurant Menu&quot;) for k,v in menu.items(): # &quot;k&quot; is the item name, &quot;v&quot; is the price. &quot;k&quot; stands for key and &quot;v&quot; stands for value. print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times print(&quot;Please select items from the menu. Once you are done selecting items, type &#39;done&#39;&quot;) while True: # Loop continuously inp = input() # Get the input if inp == &quot;burger&quot;: # input for burger print(&quot;1 burger: $3.99&quot;) total = total + 3.99 elif inp == &quot;fries&quot;: # input for fries print(&quot;1 fries: $1.99&quot;) total = total + 1.99 elif inp == &quot;drink&quot;: # input for a drink print(&quot;1 drink: $0.99&quot;) total = total + 0.99 elif inp == &quot;done&quot;: # input for completing the order break # stop asking the user for inputs # print the total order cost print(&quot;Your total is $&quot; + str(total)) . Derek&#39;s Restaurant Menu burger $3.99 fries $1.99 drink $0.99 Please select items from the menu. Once you are done selecting items, type &#39;done&#39; 1 burger: $3.99 1 drink: $0.99 Your total is $4.98 .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%207/2022/10/09/CodeCorrections.html",
            "relUrl": "/apcsp%20week%207/2022/10/09/CodeCorrections.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "AP Prep Multiple Choice",
            "content": "1.1 Collaboration Notes . Daily Video 1 . Innovations are improved through collaboration in CSP | A computing innovation includes a program as an integral part of its function | Effective collaboration skills: Communication, consensus building, conflict resolution, negotiation | Computing innovation: reflects the diversity of talents and unique perspectives of all the programers who worked to create it | Collaboration on projects can reduce bias since there are various perspectives Video Quiz: Daily Video 2 . | How computing innovations are developed by groups of people | Consultation and communication between peers is important | Information contributed from all the group members can help understand the purpose of the program and create one that incorporates all the perspectives | Online tools can help collaboration such as pair programming | Pair programming: work together in pairs- the driver writes the code, the navigator reviews it | Think pair share: students work through a problem alone then pair with a partner then share with class | It is important to give credit 1.1 Collaboration Quiz . . 1.2 Program Function and Purpose Notes . Daily Video 1 . | It is important to know and be able to describe the purpose of a computing innovation | The purpose could be to solve problems, pursue interests through creative expression, etc. | Truly understanding the purpose of a program helps the developer(s) develop the program better Daily Video 2 . | Identify inputs/outputs to a program | Program inputs are data sent to a computer for processing by a program. Some forms can be: tactile, audio, visual, text | An event is associated with an action and supplies input data to a program | Events can be generated when a key is pressed, a mouse clicked, etc. Can be any defined action that affects the flow of execution | Inputs generally affect the output of a program | In a program, the code is made in a way that after an action, the code “jumps” to the code segment according to the event | Program’s output is based off input or prior state Daily Video 3 . | A program (software) is a collection of program statements the performs a specific task when run by a computer. | A code segment is a collection of program statements that is a part of a program | Software needs to work for a variety of inputs | The behavior is how the program functions during execution and if often described by how a user can interact with it. | Can be described broadly by what it does or in detail on how the program accomplishes its function | A program is a collection of statements: A statement is a single command, a group of statements is a code segment, code segments are executed -&gt; a program/software 1.2 Program Function and Purpose Quiz . . 1.3 Program Design and Development Notes . Daily Video 1 . | Use a development process to develop a program | Design a program and its user interface | A development process can be ordered and intentional or exploratory in nature | Common phases when developing a program: investigating and reflecting, designing, prototyping, testing | Requires refinement and revision based on feedback, testing, and reflection: may require revisiting phases | Break the project into smaller pieces and make sure each piece works before adding it to the whole | Investigate to determine requirements, constraints, concerns and interests of customer | Investigate by: collecting data through surveys, user testing, interviews, direct observations | Requirements describe how a program functions and may include a description of user interactions that a program should provide | Design phase that outlines how to accomplish a program’s goal may include: brainstorming, planning/storyboarding, organizing the program into modules and functional components, creation of diagrams, develop testing strategy | Constantly test your program Daily Video 2 . | When developing a program, it is important to cite and acknowledge code segments used from either another source or developed collaboratively | When acknowledging someone else, include the origin of code or authors name in the program documentation | Team of people usually work on a program by each focusing on different functional components | Each member’s work should be credited in program documentation Sometimes credit is given with comments in the code | Many developers use code segments, procedures, algorithms made by others who aren’t part of the project so it is important to credit them Daily Video 3 . | Describe the purpose of a code segment or program by writing documentation | Program documentation: a written description of the function of a code segment, event, procedure, or program and how it was developed EX: comments (don’t effect how the program runs) | Should actively document throughout development to help development as well as maintaining correct programs | Program documentation created to: describe the program, list specifications, describe different parts of the program, list of contributors | Document process: beginning: list specifications, during: keep track of progress, after: explain overall process | Documentation improves: programming process efficiency, ability to test and refine program, responding to bugs 1.3 Program Design and Development Quiz . . | . Questions I still have with problem sets . I found this question to be the most difficult for me throughout all of 1.1-1.3. After looking over the correct answer and explanation, it makes more sense however is still a little confusing to me. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%206/2022/10/02/APPrep.html",
            "relUrl": "/apcsp%20week%206/2022/10/02/APPrep.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Java Script Tutorial",
            "content": "console.log(&quot;Hello, World!&quot;); . Hello, World! . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType(&quot;compscirole&quot;); // String logItType([1, 2, 3, 4]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 string ; compscirole object ; [ 1, 2, 3, 4 ] . // define a function to hold data for a Person function Person(name, ghID, classOf, compscirole) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.compscirole = compscirole; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;Headmaster&quot;); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, compscirole: &#39;Headmaster&#39;, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, compscirole: &#39;Headmaster&#39;, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . // define a student Array of Person(s) var students = [ new Person(&quot;Derek&quot;, &quot;Senior&quot;, 2023, &quot;Front-end Developer&quot;), new Person(&quot;Saavan&quot;, &quot;Senior&quot;, 2023, &quot;DevOps&quot;), new Person(&quot;Rohan&quot;, &quot;Senior&quot;, 2023, &quot;Back-end Developer&quot;), new Person(&quot;Dillon&quot;, &quot;Junior&quot;, 2024, &quot;Scrum Master&quot;), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, compscirole: &#39;Headmaster&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;Derek&#39;, ghID: &#39;Senior&#39;, classOf: 2023, compscirole: &#39;Front-end Developer&#39;, role: &#39;Student&#39; }, Person { name: &#39;Saavan&#39;, ghID: &#39;Senior&#39;, classOf: 2023, compscirole: &#39;DevOps&#39;, role: &#39;Student&#39; }, Person { name: &#39;Rohan&#39;, ghID: &#39;Senior&#39;, classOf: 2023, compscirole: &#39;Back-end Developer&#39;, role: &#39;Student&#39; }, Person { name: &#39;Dillon&#39;, ghID: &#39;Junior&#39;, classOf: 2024, compscirole: &#39;Scrum Master&#39;, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grade&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Comp Sci Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.compscirole + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGradeClass OfRoleComp Sci Role . Mr M | jm1021 | 1977 | Teacher | Headmaster | Derek | Senior | 2023 | Student | Front-end Developer | Saavan | Senior | 2023 | Student | DevOps | Rohan | Senior | 2023 | Student | Back-end Developer | Dillon | Junior | 2024 | Student | Scrum Master | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%205/2022/09/25/Javascript.html",
            "relUrl": "/apcsp%20week%205/2022/09/25/Javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "TEDTalk Discussions and Takeaways",
            "content": "What I Learned . I learned a lot of things from this presentation. Laurie Santos enlightened me on the way to live an overall happier life and improve the way I live on a day to day basis. I learned how important it is to take time out of my day to be thankful and grateful for all the things given to me in life. She taught me to really count all the blessings I have in life. After learning this, I’ve started to try taking a minute or two out of my day to write out all the things I am grateful for. Not only did she say studies prove that this increases a better quality of life, but personally, I’m starting to see positive results. Santos also taught me the importance of helping other people. She expressed that people who help others are more happy in life. I’ve also started to help others before helping myself at times, and can really start to see a happier lifestyle panning out. . What My Partner Learned . My partner Saavan took away a ton of concepts as well. One thing Saavan took from Santos was that helping others help us more than we expect. He can relate to this because he noticed that the more he starts helping and giving to others, the happier his life becomes. Another thing he took away was writing a letter of gratitude to someone. He noticed that people that receive this letter will actually appreciate it more than you will ever know. Giving a letter of gratitude to someone spreads the happiness they bring you to them, which will reciprocate it back. . What My Group Took Away . Derek’s Thoughts: What I found interesting about the video is that everyone deals with stress, and it is not something easy to just deal with. One thing that Laurie Santos was that 40% of the students from her class in Yale said they feel helpless. This really struck me because it puts into perspective how many people deal with some sort of unhappiness and that we are not alone. . Rohan’s Thoughts: It was relatable, she mentioned good strategies to reduce stress. The statistics that she said were also very alarming to me. I also believe that stress hinders the ability to learn. . Dillon’s Thoughts: I found it very surprising how much anxiety and stress the average college student has during their time spent in academic environment. It makes me worry about myself and how college life will be like. I also reflect and think about how much correlation it has with high school stress at Del Norte. . Saavan’s Thoughts: I thought it was good to know the things we need to do to relieve stress. I believe that it is very important in working towards living a happier life, and its not as easy as it sounds. . Note of Gratitude to My Brother . I wanted to write a note of gratitude to my brother. I just wanted to thank him for listening to personal stuff I can only talk to him about, and helping me better myself in ways. I’m thankful that he takes the time out of his busy day to go to the gym with me if I ask. I also am thankful that he understands and tells me what I need to work on so that I can better myself academically and in my personal growth. . Gratitude List . Things Im Grateful for: . my parents | my brother | my friends | house | food | water | clothes | my dog | .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%203/2022/09/20/TEDTalknotes.html",
            "relUrl": "/apcsp%20week%203/2022/09/20/TEDTalknotes.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "AppLab Planning/Blogging",
            "content": "Applab Planning/Blogging . Outline of Quiz . For our outline, Saavan and I wanted to create a quiz revolved around NBA. So we planned out 3 NBA questions that we wanted to use, and started planning out how we want the site to look. We wanted a home screen to introduce the quiz with a start button, 3 separate screens for each question, 2 other screens for if you get the question wrong or right, and a final screen to address that you have won and the results. . Successes . This is me breaking down the success of figuring out how to code a button so that it switches to a new screen. . 1. Program Purpose and Function . The purpose of this program is so that the when the button is clicked, it switches the current screen to a new one. The input of this program is the onEvent, where if the start button is clicked, then it will do the function of the set screen, which is the output of screen2, which will change the current screen to that. . 2. Data Abstraction . The name of the variable is start_button. It is representing what needs to be “clicked”, in order for the input to work. . Discoveries . One discovery that I found was how to code a button so that it switches to a new screen. Another discovery I found was how to work a dropdown so that if it clicks on certain options it sets the screen to that option. . Challenges . There were a ton of problems that we encountered once we started creating our site. Some minor problems was figuring out how to code a button so that it goes to the next screen, how to code an image so that if it is clicked it goes to the next screen, etc. But once we figured out the code to that, if was very satisfying and much easier to create our App. However one idea that we came up with was making it so that if they get the question wrong or right, it takes them to a screen telling them that, and then a button to make them proceed or go back. This was a slight problem because we realized that we can’t just have one screen for wrong or right, but have that for each question, since the buttons would have to take you back or move you forward at different questions. . . This picture displays the 6 different screens we had to make, since we had to make a correct and wrong screen for each question, which would rather bring them back to the same question if they got it wrong, or proceed to the next question if they get it right, or the results if they get the final question right. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%203/2022/09/11/Applabplanning.html",
            "relUrl": "/apcsp%20week%203/2022/09/11/Applabplanning.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Performance Task Planning/Draft",
            "content": "Idea on Project . An idea I had for this project is somehow creating a website with a whole bunch of movies and TV shows that you can choose from, and a way to search for all of them. The technical requirements for this project include: . Final program code (created independently or collaboratively) | A video that displays the running of your program and demonstrates functionality you developed (created independently) | Written responses to all the prompts in the performance task (created independently) | . I feel like the things I can design now are probably the dropdown menu to choose from all these movies, and the code for when they click on the movie, for it to take them to a different screen to watch it. It also says &quot;students need practice implementing programs that first include sequencing, then incorporate selection and iteration, and finally use procedures and lists.&quot; I feel that we&#39;ve touched most if not all of these basics over the first couple of weeks. Somethings I would still need to learn is how to put the actual movie or TV show on the site, so when they hit play, they are watching it on the site. Some resources that I have available is code.org to maybe help we work with building apps more and understanding the code, the people around me in this class, and past students that have already taken this class. . from IPython.display import Image Image(filename=&quot;/Users/dmsol/Tera/images/Screen Shot 2022-09-11 at 12.29.24 PM.png&quot;, width=600, height=400) .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%203/2022/09/10/performancetaskplanning.html",
            "relUrl": "/apcsp%20week%203/2022/09/10/performancetaskplanning.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "AppLab NBA Quiz and NBA Stats App",
            "content": "Partner NBA Quiz . Partner NBA Stats App .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%203/2022/09/09/Applabquiz.html",
            "relUrl": "/apcsp%20week%203/2022/09/09/Applabquiz.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "My Loop Marvel Quiz",
            "content": "InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Derek&quot;, &quot;LastName&quot;: &quot;Sol&quot;, &quot;DOB&quot;: &quot;January 17&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;dmsol218@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;2018 Toyota Camry SE&quot;] }) . For loop/For loop with Index . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Derek Sol Residence: San Diego Birth Day: January 17 Cars: 2018 Toyota Camry SE . While Loop . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Derek Sol Residence: San Diego Birth Day: January 17 Cars: 2018 Toyota Camry SE . Recursion . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Derek Sol Residence: San Diego Birth Day: January 17 Cars: 2018 Toyota Camry SE . Marvel Quiz Version 1 . q1 = &quot;&quot;&quot;What is Captain America&#39;s shield made out of? a. Vibranium b. Steel c. Iron d. Copper&quot;&quot;&quot; q2 = &quot;&quot;&quot;How many Infinity Stone are there? a. 4 b. 6 c. 3 d. 8&quot;&quot;&quot; q3 = &quot;&quot;&quot;Who lifts Thor&#39;s hammer in Endgame? a. Iron Man b. Vision c. Captain America d. Captain Marvel&quot;&quot;&quot; questions = {q1 : &quot;a&quot;,q2 : &quot;b&quot;,q3 : &quot;c&quot;} name = input(&quot;Enter your name: &quot;) print(&quot;Hello&quot;,name, &quot;welcome to the this Marvel quiz, lets get started...&quot;) score=0 for i in questions: print(i) ans = input(&quot;enter the answer(a/b/c/d) : &quot;) if ans==questions[i]: print(&quot;correct answer, you got 1 point&quot;) score = score+1 else: print(&quot;wrong answer, you lost 1 point&quot;) score=score-1 print(&quot;Final score is:&quot;, score) . Hello Derek Sol welcome to the this Marvel quiz, lets get started... What is Captain America&#39;s shield made out of? a. Vibranium b. Steel c. Iron d. Copper correct answer, you got 1 point How many Infinity Stone are there? a. 4 b. 6 c. 3 d. 8 correct answer, you got 1 point Who lifts Thor&#39;s hammer in Endgame? a. Iron Man b. Vision c. Captain America d. Captain Marvel correct answer, you got 1 point Final score is: 3 . Marvel Quiz Version 2 . def new_game(): guesses = [] correct_guesses = 0 question_num = 1 for key in questions: print(&quot;-&quot;) print(key) for i in options[question_num-1]: print(i) guess = input(&quot;Enter (A, B, C, or D): &quot;) guess = guess.upper() guesses.append(guess) correct_guesses += check_answer(questions.get(key),guess) question_num += 1 display_score(correct_guesses, guesses) # - def check_answer(answer, guess): if answer == guess: print(&quot;CORRECT!&quot;) return 1 else: print(&quot;WRONG!&quot;) return 0 # - def display_score(correct_guesses, guesses): print(&quot;-&quot;) print(&quot;RESULTS&quot;) print(&quot;-&quot;) print(&quot;Answers: &quot;, end=&quot;&quot;) for i in questions: print(questions.get(i), end =&quot; &quot;) print() print(&quot;Guesses: &quot;, end=&quot;&quot;) for i in guesses: print(i, end =&quot; &quot;) print() score = int((correct_guesses/len(questions))*100) print(&quot;Your score is: &quot;+str(score)+&quot;%&quot;) # - def play_again(): response = input(&quot;Do you want to play again?: (yes or no): &quot;) response = response.upper() if response == &quot;YES&quot;: return True else: return False # - questions = { &quot;What is Captain America&#39;s shield made out of?: &quot;: &quot;A&quot;, &quot;How many Infinity Stones are there?: &quot;: &quot;B&quot;, &quot;Who lifts Thor&#39;s hammer in Endgame?: &quot;: &quot;C&quot;, &quot;Who holds the Time Stone?: &quot;: &quot;A&quot;, } options = [[&quot;A. Vibranium&quot;, &quot;B. Copper&quot;, &quot;C. Iron&quot;, &quot;D. Steel&quot;], [&quot;A. 4&quot;, &quot;B. 6&quot;, &quot;C. 3&quot;, &quot;D. 2&quot;], [&quot;A. Iron Man&quot;, &quot;B. Vision&quot;, &quot;C. Captain America&quot;, &quot;D. Captain Marvel&quot;], [&quot;A. Doctor Strange&quot;, &quot;B. Ant-Man&quot;, &quot;C. Vision&quot;, &quot;D. Thor&quot;]] new_game() while play_again(): new_game() print(&quot;Bye!&quot;) . - What is Captain America&#39;s shield made out of?: A. Vibranium B. Copper C. Iron D. Steel CORRECT! - How many Infinity Stones are there?: A. 4 B. 6 C. 3 D. 2 CORRECT! - Who lifts Thor&#39;s hammer in Endgame?: A. Iron Man B. Vision C. Captain America D. Captain Marvel CORRECT! - Who holds the Time Stone?: A. Doctor Strange B. Ant-Man C. Vision D. Thor WRONG! - RESULTS - Answers: A B C A Guesses: A B C D Your score is: 75% - What is Captain America&#39;s shield made out of?: A. Vibranium B. Copper C. Iron D. Steel CORRECT! - How many Infinity Stones are there?: A. 4 B. 6 C. 3 D. 2 CORRECT! - Who lifts Thor&#39;s hammer in Endgame?: A. Iron Man B. Vision C. Captain America D. Captain Marvel CORRECT! - Who holds the Time Stone?: A. Doctor Strange B. Ant-Man C. Vision D. Thor CORRECT! - RESULTS - Answers: A B C A Guesses: A B C A Your score is: 100% Bye! .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%202/2022/09/04/loop.html",
            "relUrl": "/apcsp%20week%202/2022/09/04/loop.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Remote Theme Screenshot",
            "content": "from IPython.display import Image Image(filename=&quot;/Users/dmsol/Tera/images/midnight.png&quot;, width=700, height=500) . Problems that I noticed from changing the remote theme is that the pages at the top right are gone, like the &quot;about,&quot; &quot;notes,&quot; &quot;search,&quot; etc. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%202/2022/09/03/remotetheme.html",
            "relUrl": "/apcsp%20week%202/2022/09/03/remotetheme.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Who is Derek Sol?",
            "content": "Things I like To Do . Play Basketball | Play video games | Spend time with friends and family | Watch TV Shows and Movies | .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%201/2022/08/28/Derekpersonal.html",
            "relUrl": "/apcsp%20week%201/2022/08/28/Derekpersonal.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "My Notebook Quiz",
            "content": "print(&quot;Hello World!&quot;) . Hello World! . msg = input(&quot;Enter a greeting: &quot;) print(msg) . this is my quiz . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) question_and_answer(&quot;Name the Python output command mentioned in this lesson?&quot;) question_and_answer(&quot;If you see many lines of code in order, what would College Board call it?&quot;) question_and_answer(&quot;Describe a keyword used in Python to define a function?&quot;) . Question: Name the Python output command mentioned in this lesson? Answer: prompt Question: If you see many lines of code in order, what would College Board call it? Answer: sequence Question: Describe a keyword used in Python to define a function? Answer: def . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, dmsol running /Library/Developer/CommandLineTools/usr/bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: yes Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! dmsol you scored 3/3 . Disney Themed Quiz . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) rsp = question_with_response(&quot;What does Hakuna Matata mean?&quot;) if rsp == &quot;no worries&quot;: print(rsp + &quot; is right!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What was the first Disney Princess to have a movie?&quot;) if rsp == &quot;Snow White&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What was the name of Simba&#39;s father in the Lion King?&quot;) if rsp == &quot;Mufasa&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What was the first animated movie to be nominated for Best Picture at the Oscars?&quot;) if rsp == &quot;Beauty and the Beast&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) Percentage = correct/4 print(&quot;You got &quot; +str(int(Percentage*100))+&quot;%&quot;) . Hello, dmsol running /Library/Developer/CommandLineTools/usr/bin/python3 You will be asked 4 questions. Question: What does Hakuna Matata mean? no worries is right! Question: What was the first Disney Princess to have a movie? Cinderella is incorrect! Question: What was the name of Simba&#39;s father in the Lion King? Mufasa is correct! Question: What was the first animated movie to be nominated for Best Picture at the Oscars? Beauty and the Beast is correct! You got 75% .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%201/2022/08/28/Derek.html",
            "relUrl": "/apcsp%20week%201/2022/08/28/Derek.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Bash Tutorial",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /Users/dmsol/vscode exists. Directory /Users/dmsol/vscode/APCSP exists. . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . Navigate to project, then navigate to area wwhere files were cloned /Users/dmsol/vscode/APCSP list top level or root of files with project pulled from github Gemfile _includes _word LICENSE _layouts assets Makefile _notebooks docker-compose.yml README.md _pages images _action_files _plugins index.html _config.yml _posts python _fastpages_docs _sass list again with hidden files pulled from github . Makefile _posts .. README.md _sass .devcontainer.json _action_files _word .git _config.yml assets .gitattributes _fastpages_docs docker-compose.yml .github _includes images .gitignore _layouts index.html .vscode _notebooks python Gemfile _pages LICENSE _plugins list all files in long format total 96 drwxr-xr-x 28 dmsol staff 896 Aug 21 22:08 . drwxr-xr-x 4 dmsol staff 128 Aug 24 11:54 .. -rw-r--r-- 1 dmsol staff 420 Aug 21 22:08 .devcontainer.json drwxr-xr-x 14 dmsol staff 448 Aug 25 15:18 .git -rw-r--r-- 1 dmsol staff 84 Aug 21 22:08 .gitattributes drwxr-xr-x 4 dmsol staff 128 Aug 21 22:08 .github -rw-r--r-- 1 dmsol staff 917 Aug 21 22:08 .gitignore drwxr-xr-x 3 dmsol staff 96 Aug 21 22:08 .vscode -rwxr-xr-x 1 dmsol staff 1304 Aug 21 22:08 Gemfile -rw-r--r-- 1 dmsol staff 11351 Aug 21 22:08 LICENSE -rwxr-xr-x 1 dmsol staff 1422 Aug 21 22:08 Makefile -rwxr-xr-x 1 dmsol staff 3614 Aug 21 22:08 README.md drwxr-xr-x 18 dmsol staff 576 Aug 21 22:08 _action_files -rw-r--r-- 1 dmsol staff 3716 Aug 21 22:08 _config.yml drwxr-xr-x 24 dmsol staff 768 Aug 21 22:08 _fastpages_docs drwxr-xr-x 29 dmsol staff 928 Aug 21 22:08 _includes drwxr-xr-x 6 dmsol staff 192 Aug 21 22:08 _layouts drwxr-xr-x 12 dmsol staff 384 Aug 25 15:18 _notebooks drwxr-xr-x 9 dmsol staff 288 Aug 25 15:18 _pages drwxr-xr-x 4 dmsol staff 128 Aug 21 22:08 _plugins drwxr-xr-x 29 dmsol staff 928 Aug 25 15:18 _posts drwxr-xr-x 3 dmsol staff 96 Aug 21 22:08 _sass drwxr-xr-x 3 dmsol staff 96 Aug 21 22:08 _word drwxr-xr-x 4 dmsol staff 128 Aug 21 22:08 assets -rwxr-xr-x 1 dmsol staff 1136 Aug 21 22:08 docker-compose.yml drwxr-xr-x 52 dmsol staff 1664 Aug 21 22:08 images -rw-r--r-- 1 dmsol staff 1061 Aug 21 22:08 index.html drwxr-xr-x 3 dmsol staff 96 Aug 21 22:08 python . # You must run cells above to define variable and project echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . Look for posts /Users/dmsol/vscode/APCSP/_posts total 456 -rw-r--r-- 1 dmsol staff 21306 Aug 21 22:08 2022-06-01-TT160-deploy.md -rw-r--r-- 1 dmsol staff 5861 Aug 21 22:08 2022-07-07-PBL-binary.md -rw-r--r-- 1 dmsol staff 3085 Aug 21 22:08 2022-07-08-PBL-grade_calc.md -rw-r--r-- 1 dmsol staff 3698 Aug 21 22:08 2022-07-08-PBL-graph.md -rw-r--r-- 1 dmsol staff 5729 Aug 21 22:08 2022-07-08-PBL-life.md -rw-r--r-- 1 dmsol staff 14387 Aug 21 22:08 2022-07-08-PBL-snake.md -rw-r--r-- 1 dmsol staff 334 Aug 21 22:08 2022-07-10-PBL-database.md -rw-r--r-- 1 dmsol staff 2908 Aug 21 22:08 2022-07-10-PBL-jokes.md -rw-r--r-- 1 dmsol staff 4046 Aug 21 22:08 2022-07-10-PBL-rapidapi.md -rw-r--r-- 1 dmsol staff 6685 Aug 21 22:08 2022-07-19-PBL-calculator.md -rw-r--r-- 1 dmsol staff 23325 Aug 21 22:08 2022-07-25-CSP-workshop.md -rw-r--r-- 1 dmsol staff 2333 Aug 21 22:08 2022-08-15-TP000-student_score_history.md -rw-r--r-- 1 dmsol staff 4363 Aug 21 22:08 2022-08-15-TP100-pseudo_code.md -rw-r--r-- 1 dmsol staff 7968 Aug 21 22:08 2022-08-15-TR100-tool_setup.md -rw-r--r-- 1 dmsol staff 15026 Aug 21 22:08 2022-08-15-TT100-tools.md -rw-r--r-- 1 dmsol staff 5590 Aug 21 22:08 2022-08-15-TT101-vscode-wsl.md -rw-r--r-- 1 dmsol staff 2155 Aug 25 15:18 2022-08-22-TR110-intro_python.md -rw-r--r-- 1 dmsol staff 5173 Aug 21 22:08 2022-08-22-TT110-fastpages.md -rw-r--r-- 1 dmsol staff 2798 Aug 25 15:18 2022-08-22-TT110-focus.md -rw-r--r-- 1 dmsol staff 2737 Aug 21 22:08 2022-08-29-TR120-data_abstract.md -rw-r--r-- 1 dmsol staff 10683 Aug 21 22:08 2022-08-29-TT120-agile.md -rw-r--r-- 1 dmsol staff 4498 Aug 21 22:08 2022-08-29-TT120-html_fragments.md -rw-r--r-- 1 dmsol staff 9037 Aug 21 22:08 2022-09-05-TP130-create_performance_task.md -rw-r--r-- 1 dmsol staff 7753 Aug 21 22:08 2022-09-05-TP131-create-task-bria.md -rw-r--r-- 1 dmsol staff 8066 Aug 21 22:08 2022-09-05-TR130-creative_development.md -rw-r--r-- 1 dmsol staff 3520 Aug 21 22:08 2022-09-05-TT130-applab.md -rw-r--r-- 1 dmsol staff 720 Aug 21 22:08 README.md . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . Look for notebooks /Users/dmsol/vscode/APCSP/_notebooks total 280 -rw-r--r-- 1 dmsol staff 14243 Aug 21 22:08 2022-06-01-TT150-webapi_tutorial.ipynb -rw-r--r-- 1 dmsol staff 8653 Aug 21 22:08 2022-07-21-PBL-neo4j_intro.ipynb -rw-r--r-- 1 dmsol staff 11694 Aug 25 15:18 2022-08-22-TP110-python_hello.ipynb -rw-r--r-- 1 dmsol staff 20003 Aug 25 15:18 2022-08-22-TT110-anthony_and_sahil.ipynb -rw-r--r-- 1 dmsol staff 9797 Aug 25 15:23 2022-08-22-TT110-bash_tutorial.ipynb -rw-r--r-- 1 dmsol staff 35721 Aug 25 15:18 2022-08-25-tool_check.ipynb -rw-r--r-- 1 dmsol staff 10141 Aug 21 22:08 2022-08-29-TP120-python_lists.ipynb -rw-r--r-- 1 dmsol staff 12632 Aug 21 22:08 2022-09-05-TT130-js_tutorial.ipynb -rw-r--r-- 1 dmsol staff 771 Aug 21 22:08 README.md drwxr-xr-x 3 dmsol staff 96 Aug 21 22:08 images . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . Look for images in notebooks, print working directory, list files /Users/dmsol/vscode/APCSP/_notebooks/images total 200 -rw-r--r-- 1 dmsol staff 101617 Aug 21 22:08 kernels.png . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . Navigate to project, then navigate to area wwhere files were cloned show the contents of README.md cat: README.md: No such file or directory end of README.md . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . Show the shell environment variables, key on left of equal value on right SHELL=/bin/bash TMPDIR=/var/folders/m3/xnfxr90d6696g4yv0yfqy1_40000gn/T/ CONDA_SHLVL=1 PYTHONUNBUFFERED=1 CONDA_PROMPT_MODIFIER=(base) OLDPWD=/Users/dmsol/vscode/APCSP/_notebooks ORIGINAL_XDG_CURRENT_DESKTOP=undefined MallocNanoZone=0 PYTHONIOENCODING=utf-8 USER=dmsol CONDA_EXE=/opt/anaconda3/bin/conda SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.Ub6XgHKNQG/Listeners __CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0 PAGER=cat VSCODE_AMD_ENTRYPOINT=vs/workbench/api/node/extensionHostProcess ELECTRON_RUN_AS_NODE=1 _CE_CONDA= PATH=/opt/anaconda3/bin:/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin CONDA_PREFIX=/opt/anaconda3 PWD=/Users/dmsol/vscode/APCSP/_notebooks/images notebooks=/Users/dmsol/vscode/APCSP/_notebooks VSCODE_HANDLES_UNCAUGHT_ERRORS=true project_repo=https://github.com/nighthawkcoders/APCSP.git project=/Users/dmsol/vscode/APCSP project_dir=/Users/dmsol/vscode XPC_FLAGS=0x0 PS1=[PEXP [ ]ECT_PROMPT&gt; _CE_M= XPC_SERVICE_NAME=0 SHLVL=2 HOME=/Users/dmsol APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL=1 VSCODE_NLS_CONFIG={&#34;locale&#34;:&#34;en-us&#34;,&#34;availableLanguages&#34;:{},&#34;_languagePackSupport&#34;:true} CONDA_PYTHON_EXE=/opt/anaconda3/bin/python LOGNAME=dmsol VSCODE_IPC_HOOK=/Users/dmsol/Library/Application Support/Code/1.70.2-main.sock VSCODE_CODE_CACHE_PATH=/Users/dmsol/Library/Application Support/Code/CachedData/e4503b30fc78200f846c62cf8091b76ff5547662 CONDA_DEFAULT_ENV=base VSCODE_PID=27686 posts=/Users/dmsol/vscode/APCSP/_posts VSCODE_CWD=/ _=/usr/bin/env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config . show the secrets of .git total 88 -rw-r--r-- 1 dmsol staff 102 Aug 25 15:18 FETCH_HEAD -rw-r--r-- 1 dmsol staff 23 Aug 21 22:08 HEAD -rw-r--r-- 1 dmsol staff 41 Aug 25 15:18 ORIG_HEAD -rw-r--r-- 1 dmsol staff 314 Aug 21 22:08 config -rw-r--r-- 1 dmsol staff 73 Aug 21 22:08 description drwxr-xr-x 15 dmsol staff 480 Aug 21 22:08 hooks -rw-r--r-- 1 dmsol staff 20021 Aug 25 15:18 index drwxr-xr-x 3 dmsol staff 96 Aug 21 22:08 info drwxr-xr-x 4 dmsol staff 128 Aug 21 22:08 logs drwxr-xr-x 44 dmsol staff 1408 Aug 25 15:18 objects -rw-r--r-- 1 dmsol staff 271 Aug 21 22:08 packed-refs drwxr-xr-x 5 dmsol staff 160 Aug 21 22:08 refs look at config file [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true [remote &#34;origin&#34;] url = https://github.com/nighthawkcoders/APCSP.git fetch = +refs/heads/*:refs/remotes/origin/* [branch &#34;master&#34;] remote = origin merge = refs/heads/master .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%201/2022/08/25/bash.html",
            "relUrl": "/apcsp%20week%201/2022/08/25/bash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Derek Sol is the GOAT. DerekSol 1. . An absolute GOAT. &#8617; . |",
          "url": "https://dereksol.github.io/Tera/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Vocabulary",
          "content": "Term Description . Github | The platform for developing different softwares and websites. | . Jupyter Notebook | A platform that allows you to code in multiple different languages. | . Python | A programming language that is open sourced | . Markdown | A software language that allows you to format text. | . Shell Script | A computer program that is used to change a modify different things. | . Code | The language used to program and intialize computer function. | . Input | The command to initiate a certain action. | . Output | The result that is developed due to the input language. | . Repository | A hub that makes use of different code and websites. | . Commit | To initalize a series of code and output the actions. | . Push | To deliver information from one place to another. | . Pull | To request data back from one place to another | . Bash | Another computer language that is used in powershell | . Bin | A binary file that is used by different computer applications | . Scrum Master | The scrum master helps to facilitate the sprint by ensuring that an agile framework is followed. Responsible on tracking issues and maintaining scrum board. | . DevOps | DevOps is the combination of cultural philosophies, practices, and tools that increases an team’s ability to deliver applications and services at high velocity. | . Front-end Developer | A front-end developer builds the front-end portion of websites, the part that users actually see and interact with. | . Back-end Developer | Back-end developers a build and maintain the mechanisms that process data and perform actions like data storage, security, and other server-side functions that you cannot see. | .",
          "url": "https://dereksol.github.io/Tera/vocabulary/",
          "relUrl": "/vocabulary/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Notes",
          "content": "AP Gov Notes .",
          "url": "https://dereksol.github.io/Tera/Notes/",
          "relUrl": "/Notes/",
          "date": ""
      }
      
  

  

  

  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dereksol.github.io/Tera/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}