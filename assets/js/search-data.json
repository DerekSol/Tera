{
  
    
        "post0": {
            "title": "Javascript Tutorial Final",
            "content": "%%javascript &lt;head&gt; &lt;!-- Load jQuery, DataTables style and scripts --&gt; &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css&quot;&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://code.jquery.com/jquery-3.6.0.min.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot; language=&quot;javascript&quot; src=&quot;https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;!-- the head section contains the jquery library to handle DOM manipulation --&gt; &lt;!-- DOM means Document Object Model, defines logical structure, the way document is accessed/manipulated --&gt; &lt;!-- also has DataTables, gives the functionality to create the interactive table --&gt; &lt;input type=&quot;text&quot; id=&quot;searchBar&quot; placeholder=&quot;Search&quot;&gt; &lt;table id=&quot;overwatchTable&quot; class=&quot;table&quot; style=&quot;width:100%&quot;&gt; &lt;thead id=&quot;overwatchHead&quot;&gt; &lt;tr&gt; &lt;th&gt;ID&lt;/th&gt; &lt;th&gt;Name&lt;/th&gt; &lt;th&gt;Role&lt;/th&gt; &lt;th&gt;Ultimate Ability&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody id=&quot;overwatchBody&quot;&gt;&lt;/tbody&gt; &lt;/table&gt; &lt;!-- This defines all the parts of the table with the table, thead, and tbody tags. --&gt; &lt;!-- The &lt;th&gt; tag is responsible for making the four columns --&gt; &lt;script&gt; $(document).ready(function() { // Define Overwatch character data var characters = [ { id: 1, name: &quot;Tracer&quot;, role: &quot;Damage&quot;, ultimate: &quot;Pulse Bomb&quot; }, { id: 2, name: &quot;Reinhardt&quot;, role: &quot;Tank&quot;, ultimate: &quot;Earthshatter&quot; }, { id: 3, name: &quot;Mercy&quot;, role: &quot;Support&quot;, ultimate: &quot;Valkyrie&quot; }, { id: 4, name: &quot;Genji&quot;, role: &quot;Damage&quot;, ultimate: &quot;Dragonblade&quot; }, { id: 5, name: &quot;Hanzo&quot;, role: &quot;Damage&quot;, ultimate: &quot;Dragonstrike&quot; }, { id: 6, name: &quot;Ashe&quot;, role: &quot;Damage&quot;, ultimate: &quot;B.O.B.&quot; }, { id: 7, name: &quot;Doomfist&quot;, role: &quot;Tank&quot;, ultimate: &quot;Meteor Strike&quot; }, { id: 8, name: &quot;Orisa&quot;, role: &quot;Tank&quot;, ultimate: &quot;Terra Surge&quot; }, { id: 9, name: &quot;Moira&quot;, role: &quot;Tank&quot;, ultimate: &quot;Coalescence&quot; }, // Add more character objects as needed ]; &lt;!-- responsible for defining the array of character objects --&gt; &lt;!-- Each character makes up a row in the data table --&gt; &lt;!-- They have properties that correspond to the column --&gt; &lt;!-- array is a container object that holds a fixed number of values of a single type --&gt; // Populate the table with character data for (const character of characters) { $(&#39;#overwatchBody&#39;).append(&#39;&lt;tr&gt;&lt;td&gt;&#39; + character.id + &#39;&lt;/td&gt;&lt;td&gt;&#39; + character.name + &#39;&lt;/td&gt;&lt;td&gt;&#39; + character.role + &#39;&lt;/td&gt;&lt;td&gt;&#39; + character.ultimate + &#39;&lt;/td&gt;&lt;/tr&gt;&#39;); } &lt;!-- uses a for loop that iterates through the character data array and generates the row of the tables through the .append() function --&gt; &lt;!-- retrieves the values from each character object and inserts them into the respective &lt;td&gt; elements within the table. --&gt; // Initialize DataTables with custom options var table = $(&#39;#overwatchTable&#39;).DataTable({ paging: true, // Enable pagination ordering: true, // Enable sorting searching: true, // Enable searching lengthChange: false, // Disable showing entries responsive: true, // Enable responsive design // Add additional options or callbacks as needed }); &lt;!-- the $(&#39;#overwatchTable&#39;).DataTable({ initializes the table --&gt; &lt;!-- options to customize the behavior and appearance of the table --&gt; // Add event listener for search bar input $(&#39;#searchBar&#39;).on(&#39;keyup&#39;, function() { table.search(this.value).draw(); }); &lt;!-- when using a search bar, triggers a callback function that performs the search operation --&gt; &lt;!-- search() function to filter the table data based on the users input and redraws the table to reflect the filtered results. --&gt; // Override default DataTables search behavior $.fn.dataTable.ext.search.push(function(settings, searchData, index, rowData, counter) { var searchValue = $(&#39;#searchBar&#39;).val().toLowerCase(); var rowDataLowerCase = searchData.join(&#39; &#39;).toLowerCase(); return rowDataLowerCase.includes(searchValue); }); }); &lt;!-- this changes the default search behavior to a custom one --&gt; &lt;!-- custom search function compares the search value entered by the user with the combined data of each row (converted to lowercase) and returns true if the search value is found within the row data. --&gt; &lt;/script&gt; . &lt;/head&gt; ID Name Role Ultimate Ability . &lt;/script&gt;",
            "url": "https://dereksol.github.io/Tera/2023/06/01/javascriptfinal.html",
            "relUrl": "/2023/06/01/javascriptfinal.html",
            "date": " • Jun 1, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Python 2D Iteration and Animation",
            "content": "2D Programming and Resources . There are lots of applications for 2D data. Common terms in 2D are tabular data, row/columns, matrix, etc. Nested iterative loops are often used to find or discover each cell in a 2D array. . 2D samples and challenges in Jupyter. wget link:https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-05-16-DS-arrays_lab.ipynb- Mario animations in JS, these are markdown code examples. Assets metadata yml, wget and place in _data directory; sprite, download and place in images directory | Code to interact with Sprite Animations runtime, wget code | Game starters runtime, wget imperative code, wget oop code | . | . Python 2D array . Example of pre-populating 2D array and printing using 3 different styles . Candy Challenge:print a christmas tree and trunk | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society 2D arrays &quot;&quot;&quot; # Classic nested loops using ij indexes, this shows 2 dimensions def print_matrix1(matrix): print(&quot;Classic nested loops using ij indexes&quot;) for i in range(len(matrix)): # outer loop (i), built on length of matrix (rows) for j in range(len(matrix[i])): # inner loop (j), built on length of items (columns) print(matrix[i][j], end=&quot; &quot;) # [i][j] is 2D representation, end changes newline to space print() # Enhanced nested for loops, row and col variables def print_matrix2(matrix): print(&quot;Enhanced nested for loops&quot;) for row in matrix: # short hand row iterator, index is not required for col in row: # short hand column iterator print(col, end=&quot; &quot;) print() # For loop with shortcut (*) row expansion def print_matrix3(matrix): print(&quot;For loop with shortcut (*) row expansion&quot;) for row in matrix: print(*row) # pythons has (*) that is one line expansion of row into columns def test_matrices(): # setup some text matrices keypad = [[&quot; &quot;, &quot; &quot;, 2, &quot; &quot;], [&quot; &quot;, 4, 5, 6, &quot; &quot;], [2, 7, 8, 9, 1], [&quot; &quot;, &quot; &quot;, 0, &quot; &quot;, &quot; &quot;]] keyboard = [[&quot;`&quot;, 1, &quot; &quot;, 2, &quot; &quot;,3, &quot; &quot;, 4, &quot; &quot;, 5, &quot; &quot;, 6, &quot; &quot;, 7, &quot; &quot;, 8, &quot; &quot;, 9, &quot; &quot;, 0, &quot; &quot;, &quot;-&quot;,&quot; &quot;, &quot;=&quot;], [&quot; &quot;, &quot; &quot;, &quot;Q&quot;, &quot; &quot;, &quot;W&quot;, &quot; &quot;, &quot;E&quot;, &quot; &quot;, &quot;R&quot;, &quot; &quot;, &quot;T&quot;, &quot; &quot;, &quot;Y&quot;, &quot; &quot;, &quot;U&quot;, &quot; &quot;, &quot;I&quot;, &quot; &quot;, &quot; &quot;, &quot;O&quot;, &quot; &quot;, &quot;P&quot;, &quot; &quot;, &quot;[&quot;, &quot; &quot;, &quot;]&quot;, &quot; &quot;, &quot; &quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;A&quot;, &quot; &quot;, &quot;S&quot;, &quot; &quot;, &quot;D&quot;, &quot; &quot;, &quot;F&quot;, &quot; &quot;, &quot;G&quot;, &quot; &quot;, &quot;H&quot;, &quot; &quot;, &quot;J&quot;, &quot; &quot;, &quot;K&quot;, &quot; &quot;, &quot;L&quot;, &quot; &quot;, &quot;;&quot;, &quot; &quot;, &quot;&#39;&quot;], [&quot; &quot;, &quot; &quot;, &quot; &quot;, &quot; &quot;, &quot;Z&quot;, &quot; &quot;, &quot;X&quot;, &quot; &quot;, &quot;C&quot;, &quot; &quot;, &quot;V&quot;, &quot; &quot;, &quot;B&quot;, &quot; &quot;, &quot;N&quot;, &quot; &quot;, &quot;M&quot;, &quot; &quot;, &quot;,&quot;, &quot; &quot;, &quot;.&quot;, &quot; &quot;, &quot;/&quot;]] numbers = [ [0, 1], # binary [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], # decimal [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;] # hexadecimal ] # pack into a list of matrices with titles matrices = [ [&quot;Keypad&quot;, keypad], [&quot;Keyboard&quot;, keyboard], [&quot;Number Systems&quot;, numbers] ] # loop 2D matrix with returning list in [key, value] arrangement for title, matrix in matrices: # unpack title and matrix as variables # formatted message with concatenation print(title, len(matrix), &quot;x&quot;, &quot;~&quot; + str(len(matrix[0]))) # use three different methods print_matrix1(matrix) print_matrix2(matrix) print_matrix3(matrix) # blank link in between print() # tester section if __name__ == &quot;__main__&quot;: test_matrices() . Keypad 4 x ~4 Classic nested loops using ij indexes 2 4 5 6 2 7 8 9 1 0 Enhanced nested for loops 2 4 5 6 2 7 8 9 1 0 For loop with shortcut (*) row expansion 2 4 5 6 2 7 8 9 1 0 Keyboard 4 x ~24 Classic nested loops using ij indexes ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Enhanced nested for loops ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / For loop with shortcut (*) row expansion ` 1 2 3 4 5 6 7 8 9 0 - = Q W E R T Y U I O P [ ] A S D F G H J K L ; &#39; Z X C V B N M , . / Number Systems 3 x ~2 Classic nested loops using ij indexes 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F Enhanced nested for loops 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F For loop with shortcut (*) row expansion 0 1 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 A B C D E F . JavaScript 2D array . Example below populate a 2D array. Key concepts are ij loop and assignments. Observe the object that is created in console. Learn the basics of iteration through 2D array in JavaScript. . Candy challenge:Work of pairs. Create one of the Python examples (christmas tree, keyboard, ...). Use the element.append to output within the notebook. As you work on JavaScript make sure your development enviornment is setup like JavaScript programmer. | . %%js /* * Creator: Nighthawk Coding Society Construct a two-dimensional array in JS */ var arr2D = []; var rows = 7; var cols = 13; // Loop to initialize 2D array elements for (var i = 0; i &lt; rows; i++) { arr2D[i] = []; for (var j = 0; j &lt; cols; j++) { // Check if the current position should contain a tree character if (i &gt;= rows / 2 - j / 2 &amp;&amp; i &lt;= rows / 2 + j / 2) { arr2D[i][j] = &quot;o&quot;; } else { arr2D[i][j] = &quot; &quot;; } } } // Loop to print the 2D array for (var i = 0; i &lt; rows; i++) { console.log(arr2D[i].join(&quot;&quot;)); } console.log(arr2D); element.append(arr2D); . Monkey Jumpers Poem . Here are some of the key parts of these arrays . Build ASCII monkeys, 5 different monkeys using ASCII Art for the &quot;Monkey Jumpers&quot; countdown poem | ANSII Color codes are added to each Monkey | Candy Challenge:Print monkeys horizontally versus vertically. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society * Mini Lab Name: Hello Series, featuring Monkey Jumpers Poem &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear def main(): # ANSI Color Codes Red = &quot; u001b[31m&quot; Green = &quot; u001b[32m&quot; Yellow = &quot; u001b[33m&quot; Blue = &quot; u001b[34m&quot; Magenta = &quot; u001b[35m&quot; &quot;&quot;&quot; 2D array data assignment &quot;&quot;&quot; monkeys = [ [ Red, &quot;ʕง ͠° ͟ل͜ ͡°)ʔ &quot;, # [0][0] eyes &quot; _⏄_/ &quot;, # [0][1] chin &quot; --0-- &quot;, # [0][2] body &quot; ⎛ ⎞ &quot; # [0][3] legs ], [ Green, &quot; ʕ༼ ◕_◕ ༽ʔ &quot;, # [1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; ], [ Yellow, &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, # [2][0] &quot; _⎐_/ &quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; ], [ Blue, &quot;ʕ ͡° ͜ʖ ° ͡ʔ&quot;, # [3][0] &quot; _⍾_/ &quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; ], [ Magenta, &quot; (◕‿◕✿) &quot;, # [4][0] &quot; _⍾_/ &quot;, # [4][1] &quot; ==4== &quot;, # [4][2] &quot; _/ _ &quot; # [4][3] ] ] &quot;&quot;&quot; 2D array program logic &quot;&quot;&quot; # cycles through 2D array backwards for i in range(len(monkeys), -1, -1): clear_output(wait=True) print(&quot;Nursery Rhyme&quot;) # identification message # this print statement shows current count of Monkeys # concatenation (+) of the loop variable and string to form a countdown message print(str(i) + &quot; little monkeys jumping on the bed...&quot;) # cycle through monkeys that are left in poem countdown for row in range(i - 1, -1, -1): # cycles through remaining monkeys in countdown # cycles through monkey part by part for col in range(len(monkeys[row])): # prints specific part of the monkey from the 2D cell print(monkeys[row][col] + &quot; &quot;) # this new line gives separation between stanza of poem print(&quot; u001b[0m&quot;) # reset color time.sleep(2) # out of all the loops, prints finishing messages clear_output(wait=True) print(&quot;No more monkeys jumping on the bed&quot;) print(&quot;0000000000000000000000000000000000&quot;) print(&quot; THE END &quot;) if __name__ == &quot;__main__&quot;: main() . No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Animation, the Energetic versus Lazy Programmer methods . Animation is done like the old Disney films, lots of little images put togehter. In these examples we eliminate using a 2D array, but simulate int with a sequence of print statements. . This 1st sequence is a lot of lines of code. | The 2nd takes the lazy programmer method to do the same. | Candy challenge:Make you own ASCII art animation. | . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (long method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes Color34 = &quot; u001b[34m&quot; Color37 = &quot; u001b[37m&quot; # As you can see, its not very optimal def ship1(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship2(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship3(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship4(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship5(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship6(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship7(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship8(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship9(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship10(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship11(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship12(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship13(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship14(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship15(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship16(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship17(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship18(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ u001b[37m&quot;) def ship19(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) def ship20(): print(&quot; | &quot;) print(&quot; |/ &quot;) print(&quot; __ |__/ &quot;) print(&quot; ____/ &quot;) print(&quot; u001b[34m -- u001b[37m&quot;) clear_output(wait=True) time.sleep(.1) ship1() time.sleep(.5) clear_output(wait=True) ship2() time.sleep(.5) clear_output(wait=True) ship3() time.sleep(.5) clear_output(wait=True) ship4() time.sleep(.5) clear_output(wait=True) ship5() time.sleep(.5) clear_output(wait=True) ship6() time.sleep(.5) clear_output(wait=True) ship7() time.sleep(.5) clear_output(wait=True) ship8() time.sleep(.5) clear_output(wait=True) ship9() time.sleep(.5) clear_output(wait=True) ship10() time.sleep(.5) clear_output(wait=True) ship11() time.sleep(.5) clear_output(wait=True) ship12() time.sleep(.5) clear_output(wait=True) ship13() time.sleep(.5) clear_output(wait=True) ship14() time.sleep(.5) clear_output(wait=True) ship15() time.sleep(.5) clear_output(wait=True) ship16() time.sleep(.5) clear_output(wait=True) ship17() time.sleep(.5) clear_output(wait=True) ship18() time.sleep(.5) clear_output(wait=True) ship19() time.sleep(.5) clear_output(wait=True) ship20() time.sleep(.5) . | |/ __ |__/ ____/ -- . Own Animation . &quot;&quot;&quot; * Creator: Nighthawk Coding Society Sailing Ship Animation (programatic method) &quot;&quot;&quot; import time # used for delay from IPython.display import clear_output # jupyter specific clear # ANSI Color Codes OCEAN_COLOR = u&quot; u001B[34m u001B[2D&quot; SHIP_COLOR = u&quot; u001B[35m u001B[2D&quot; RESET_COLOR = u&quot; u001B[0m u001B[2D&quot; def ship_print(position): # print ship with colors and leading spaces according to position clear_output(wait=True) print(RESET_COLOR) sp = &quot; &quot; * position print(sp + &quot; | &quot;) print(sp + &quot; |/ &quot;) print(SHIP_COLOR, end=&quot;&quot;) print(sp + &quot; __ |__/ &quot;) print(sp + &quot; ____/ &quot;) print(OCEAN_COLOR + &quot;--&quot;*32 + RESET_COLOR) def ship(): # ship function, loop/controller for animation speed and times # loop control variables start = 0 # start at zero distance = 60 # how many times to repeat step = 10 # count by 10 # loop purpose is to animate ship sailing for position in range(start, distance, step): ship_print(position) # call to function with parameter time.sleep(.2) ship() # activate/call ship functions . | |/ __ |__/ ____/ - .",
            "url": "https://dereksol.github.io/Tera/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "relUrl": "/1.d/2.b/3.b/c3.1/2023/05/16/DS-arrays_lab.html",
            "date": " • May 16, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "5/11 Lecture",
            "content": "",
            "url": "https://dereksol.github.io/Tera/2023/05/11/Lecture.html",
            "relUrl": "/2023/05/11/Lecture.html",
            "date": " • May 11, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: 1.4 GHz Quad-Core Intel Core i5 | Memory in GB: 8 GB 2133 MHz LPDDR3 | Storage in GB: 121.02 GB | OS: macOS Catalina | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices: lets a user interact with the computer- mouse, microphone, keyboard Output devices: computer communicate with the user- speaker, headphones, monitor Program File: file that the computer can execute to run a program- games, media player, website Program Code: instructions for the computer when a program file is run- stuff behind the game, website, and stuff Processes: program is executed in multiple threads- searching, debugging, sorting, etc Ports: endpoint that lets a server handle requests from devices over the internet Data File: has information in the file, or data in a specific format, can be CRUDed, and tells program what to do Inspect Running Code: the inspect element on browser, shows what is happening behind what we see normally, cherry tomatoes when we debug in VS code Inspect Variables: see the values on the variables to debug and see what is happening | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path –&gt; A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. Route –&gt; Routing is the process of finding a path from sender to receiver. Computer System –&gt; A computing system is a group of computing devices and programs working together for a common purpose. Computer Device –&gt; A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. Bandwidth –&gt; Bandwidth is usually measured in bits per second. Computer Network –&gt; A computer network is a group of interconnected computing devices capable of sending or receiving data. | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions | T | F | F | T | F | F | T . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. Fault tolerance is a process that lets an OS respond to failure in the hardware or software. So the system won’t break down completely due to an error or failure. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://dereksol.github.io/Tera/2023/04/30/AP_computers_networks.html",
            "relUrl": "/2023/04/30/AP_computers_networks.html",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "2020 MCQ Practice Test Corrections",
            "content": "Total Score . . Test Corrections . Question 56 . The answer that I put was A, however the correct answer is actually D, which is Version II requires approximately 5 more minutes to execute than version I. This is the correct answer because Version I calls the GetPrediction procedure once for each element of idList, or four times total. Since each call requires 1 minute of execution time, version I requires approximately 4 minutes to execute. Version II calls the GetPrediction procedure twice for each element of idList, and then again in the final display statement. This results in the procedure being called nine times, requiring approximately 9 minutes of execution time. Therefore, this would be the most accurate comparison between the two. . Question 59 . The answer that I put was B, however the correct answer is actually C, which is The original developer of open-source software provides free or low-cost support for users installing and running the software. This is the correct answer because Open-source software has source code that is released under a license that allows users the rights to use and distribute it. However, there is no guarantee that the original developer of open-source software will provide support for its users. Therefore, this is the why this answer is NOT an advantage of using-open source software. . Question 62 . The answer that I put was A and C, however the correct answer is A and B. The reason it is B instead of A is because Since x OR y evaluates to true, the body of the IF statement is executed. Since x is true, true is displayed. However for option C, Since x OR y evaluates to true, the body of the IF statement is executed. Since x AND y evaluates to false, false is displayed. . Question 63 . The answer that I put was B and D, however the correct answer is B and A. The reason that it is option A over D is because In order to perform the desired calculation, the selling price, the genre, and the quantity available are needed. The author is not needed. However for option D, the quantity available is needed to perform the desired calculation. The quantity available for each book is multiplied by its selling price to determine the total amount of money received for selling all copies of the book. . Reflection . Overall, I really think I am progressing in getting better at taking these CollegeBoard Practice MCQ’s. I am pretty proud of getting my score and think that the errors I made were pretty silly, and by looking back at the explanations, I was able to realize what I got wrong and why the answer is what it is. One thing I really see that I struggle on is finding both answers to a select more than one answer question. I will usually get one of them right but the other selected option more. I feel like while studying for these questions, I should try to answer more questions that have multiple answers so that I can get better at them. .",
            "url": "https://dereksol.github.io/Tera/week%2030/2023/04/30/2020MCQ.html",
            "relUrl": "/week%2030/2023/04/30/2020MCQ.html",
            "date": " • Apr 30, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "2018 MCQ Practice Test Corrections",
            "content": "Total Score . . Test Corrections . Question 1 . The answer that I put was C, however the correct answer was actually B. B is the correct answer because the code segment assigns the initial value of first to temp, then assigns the initial value of second to first. The initial value of first, which has been stored in temp, is then assigned to second. Therefore, the initial values of first and second have been interchanged. . Question 35 . The answer I put was C, but the correct answer was D. D is the correct option because Creative Commons licenses can be used by creators of digital music to specify how the samples can be used by others. A no-rights-reserved license allows others to freely make use of the samples. . Question 41 . The answer that I put was A but the correct answer is B. This is the correct option because this expression uses theMax procedure to replace the midterm score with the higher of the two scores. The selected value is then added to the final exam score and assigned to One word, adjusted Total. . Question 43 . The answer that I put was B but the correct answer is A. A is the correct answer because the pattern in the table appears to indicate that there are n squared steps for a list containing n items. This number of steps is a polynomial and therefore the algorithm runs in reasonable time. . Question 48 . The answer that I put was B but the correct answer was actually D. D is the correct answer because this option causes the experiment to be successful when RANDOM, open parenthesis 1 comma 100, close parenthesis produces a result from 1 to 7 5, or 75% of the time. . Question 56 . The answer I put was B, however the correct answer is D. D is the correct answer because the value of count starts at 1 and increases by twos, so it counts odd integers. The loop iterates 10 times, adding each intermediate value of count each time. Therefore, the program displays the sum of the odd integers starting at 1 and ending at 19. . Reflection . Overall, I believe that I am improving throughout the MCQs. Things that I think I need to work on is seeing like a code block or code segments and be able to figure out what is executed because of the program. The reason I think I struggle with this a lot is because I don’t really understand the terms that is being used in the code segment and how that affects the program entirely. I believe that if I work on this a little more I will be able to earn higher scores on future MCQ’s overall. .",
            "url": "https://dereksol.github.io/Tera/week%2030/2023/04/29/MCQet.html",
            "relUrl": "/week%2030/2023/04/29/MCQet.html",
            "date": " • Apr 29, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "P3-M 4/28 Introduction to SASS",
            "content": "What is SASS? . Sass is a preprocessor language that&#39;s interpreted into CSS. A preprocessor language takes input data and converts it to an output that&#39;s used as input by another program. This means when you run Sass code, you&#39;re actually converting your code to CSS. That CSS code output is then used directly by a browser. Fun fact CSS stands for Cascading Style Sheets and SASS stands for Syntactically Awesome Style Sheets. . SCSS vs. CSS . Understanding the differences between SCSS and CSS . What is CSS . CSS is the default technology that most programmers use when styling webpage. It is one of the 3 fundamental web technologies along with HTML and JavaScript. HTML manages the structure, JavaScript makes pages interactive, and CSS changes the style by taking a markup language like HTML and describes how it should be presented to the user. . | However, CSS is not very easy to work with lacking a lot features often making using CSS very confusing and difficult or hard to work with on lengthy projects. This is why there are tools like Bootstrap, Sass, and Tailwind that make styling a lot easier and more efficient. We will be using Sass in this course. . | . CSS Example . This is an example of CSS that can be used to change body text of an HTML document | Hack Question:Can you guess what its changing style of the text to? The style of text is being changed to the color blue. | . body{ color: #0000FF; font-family: Ariel, sans-serif; font-size: 16px; } . What is SCSS . SCSS is short for Sassy Cascading Style Sheets. | SCSS very similar to CSS but the difference comes with the fact that SCSS extends the functionality of CSS while also making it simpler. What this allows us to do is it enables us to things like nested styling, functions, mixins, variables, inheritance (more on these later) and so on. | . Sass Code Example . $blue: #0000FF; body{ color: $blue; font-family: Ariel, sans-serif; font-size: 16px; } . This example is doing the same thing as the other code segment above but the difference being that here we defined the color as $blue which makes it much easier for us to recall later on. In fact, we have done this before, if you have been using the dark mode/midnight theme then go ahead and navigate your your _sass folder and check out the dark-mode.scss and you&#39;ll see something similar to the example above | . So which one is better to use? . CSS tends to be better for really simple styling where not many complex or nested styles are required and small projects that doesn&#39;t require a lot of customization. | SCSS on the other hand is very good for more complex styling and working with a project with more than one page where maybe lots of customization is needed. Such as the projects we made last and first trimester. | . Modular SCSS . Understanding how to use modular SCSS . Modular SCSS allows you to break multiple different files and then be able to compile them into a single CSS file | How do you do this? Well all you need to do is have _filenames.scss so that is compiled into its own file | Now after adding the to the file name you can import it into you file without the and all the styles will be carried over. | The benefits of a partial is that it allows you to big websites and allows you to break up the code in multiple components and easily make changes instead of having to go through a huge file. | All styles in the partial will be added and can be used into the main file as if they were defined in the main file. | . File 1 _variable.scss . $primary-button-color: #009494; $hover-color: black; $menu-color: #f2f2f2; . File 2 style.scss . We can see the importing of the .scss file&#39;s content into the other main .scss file style.scss | . {@import &#39;variables&#39;; @import &quot;{{ site.theme }}&quot;;} /* &quot;row style&quot; is flexible size and aligns pictures in center */ .row { align-items: center; display: flex; } /* &quot;column style&quot; is one-third of the width with padding */ .column { flex: 33.33%; padding: 5px; } .menu a { // float: left; display: block; color: $menu-color; text-align: center; // padding: 14px 16px; text-decoration: none; } .menu a:hover { background: $primary-button-color; color: $hover-color; } . Nesting . What is nesting? Where did the birds come from? . Nesting is a way to organize your code and make it easier to read. It also helps keep your code DRY (Don&#39;t Repeat Yourself). | Nesting is when you put one selector inside another selector. This is a great way to keep your code organized and make it easier to read. | When we make HTML we often nest different elements within each other and have a clear structure when we look at it. | The problem is that in regular CSS we don&#39;t have that so we need to use SASS to help us organize our code. | . Warning:Don&#39;t nest too much as when the CSS is processed it can make overqualified selectors which can be hard to read and maintain. Which means that it would only target that specific element type and not any other elements that have the same class name. ## Sass Nesting | Through nesting the ul, li, and a selectors within the nav selector makes your CSS better and increases its readability overall. | . nav { ul { margin: 0; padding: 0; list-style: none; } li { display: inline-block; } a { display: block; padding: 6px 12px; text-decoration: none; } } . CSS - Lack of Nesting . We can see that through the lack of nesting the CSS is not as organized and needs extra information to be able to make it more clear exactly what is being targeted. | . nav ul { margin: 0; padding: 0; list-style: none; } nav li { display: inline-block; } nav a { display: block; padding: 6px 12px; text-decoration: none; } . Variables . What is a variable? . A variable is a container that stores information so for instance when you multiple places that refer to one value you can just use the variable name instead of the value. | This is valuable in SASS because it allows you to reuse that value in multiple places throughout you stylesheet. | Variables in CSS preprocessors such as Sass allow you to store information that you can reuse in your stylesheet, such as font stacks, colors, or any other CSS value you anticipate needing. The $ symbol is used in Sass to designate a variable. | . Pro Tip:The reason SASS variables are better than variables in regular CSS is that they are more consider and easier to read with a much simpler syntax. Fun Fact: Variables in SASS came before CSS and often SASS has features long before they are actually added to CSS as a whole. . Variable Example Syntax . $variable-name: value; | Once the sass is processed the variable name is replaced with the value throughout the program. | . $main-font: Calibri, sans-serif; $main-color: #000; $main-color-hover: #000; . Operators . Operators are used to perform operations on variables and other aspects of the language like in python we can use operators to see if values are equal, add, divide, subtract, multiply, etc. | SASS has a lot of operators that can be used to perform operations on variables and other aspects of the language as well. They can include == to check if two values are equal and != to check if two values are not equal | + to add two values together | - to subtract two values | * to multiply two values | / to divide two values | % to find the remainder of two values | &lt; to check if one value is less than another | &gt; to check if one value is greater than another | &lt;= to check if one value is less than or equal to another | &gt;= to check if one value is greater than or equal to another | Also there is and, or, &amp; not to be able to use boolean operations | . | . Operator Example Syntax . Operators are used in this example to perform string concatenation | . // Html &lt;p id=&quot;testing&quot;&gt;original text and&lt;/p&gt; // SASS #testing:after{ content: &quot; some&quot; + &quot; more&quot; + &quot; text&quot;; } // Output original text and some more text . Conditional Statements . There are conditional statements in SASS just like in Python and JavaScript they work the same way as well. | Conditional statements are used to perform different actions based on different conditions. Such as if a certain condition is true then do this, if it is false then do that and so on. | SASS has @if which allows for different styles based on if a boolean expression was true or false. | SASS has @else which allows for different set of styles if the if condition was not met or false. | SASS has @else if which allows for an alternative conditions to be run if the first is not met. | . $color: red; button { @if $color == red { background-color: $color; } } // @else: allows you to provide an alternative set of styles to apply if the condition in the @if statement isn&#39;t met $color: blue; button { @if $color == red { background-color: red; } @else { background-color: $color; } } // @else if: allows you to provide multiple alternative conditions to test $color: green; button { @if $color == red { background-color: red; } @else if $color == blue { background-color: blue; } @else { background-color: $color; } } . Loops In Sass . Loops are present in SASS through the @for and @while decorators, along with @each. | Loops are used to repeat a block of code a certain number of times or until a certain condition is met just like in any other programming language. . For Loops: Are used to iterate through a value like a list or a range of numbers | While Loops: Are used to iterate through a block of code until a certain condition is met such as a value is being equal to a certain value through an incrementing or decrementing a variable or any other condition that is met. | . | When using while loops they can be necessary but it is better to use @each and @for as it will make it clear and be able to compile faster. . | Side Note: In SASS lists care a any group of values that are separated by a comma or a space there is no special brackets used like in python or javascript. Lists can be searched for values however they are immutable meaning that they cannot be changed once they are created. . | . Some Code Examples of Loops and Lists . // A for each loop is used to interact with a group of sizes changing // the size of the element for each item in the list $sizes: 40px, 50px, 80px; @each $size in $sizes { .icon-#{$size} { font-size: $size; height: $size; width: $size; } } // @each: allows you to loop over a list of values and generate styles $colors: red, green, blue; @each $color in $colors { .color-#{$color} { background-color: $color; } } . @debug list.index(1px solid red, 1px); // 1 @debug list.index(1px solid red, solid); // 2 @debug list.index(1px solid red, dashed); // null . @use &quot;sass:math&quot;; /// Divides `$value` by `$ratio` until it&#39;s below `$base`. @function scale-below($value, $base, $ratio: 1.618) { @while $value &gt; $base { $value: math.div($value, $ratio); } @return $value; } $normal-font-size: 16px; sup { font-size: scale-below(20px, 16px); } . $base-color: #036; @for $i from 1 through 3 { ul:nth-child(3n + #{$i}) { background-color: lighten($base-color, $i * 5%); } } // @for: allows you to loop over a range of values and generate styles @for $i from 1 through 3 { .item-#{$i} { width: 100px * $i; } } . Functions in SASS . What is a function? . A function is a block of code that performs a specific task. This is a great method to be able to reuse code and processes in a manner that is more efficient and allows for the reuse of code. We do this all the time in programming languages such as JavaScript and Python. | . SASS functions . Sass Functions allow you to define complex calculations and transformations that can be used throughout your stylesheet and allow you to perform complex operations on values, manipulate data, plus you can generate content dynamically. . | There a are built in functions and ones you can make on your own like languages such as JavaScript and Python. . | SASS functions can be used to perform arithmetic operations, manipulate colors, work with strings, and more. . | Functions in SASS are similar to functions in programming languages, but they can be used within SASS stylesheets to generate CSS code dynamically. . | . Using Built-in Functions . Like Python and Javascript SASS provides a variety of built-in functions for math, color manipulation, string manipulation, and more. | . Math Functions . SASS has many functions that allow you to be able to perform wide range of math operations similar to the ones present in python including more complex operations. | . .round(1.2); // returns 1 .ceil(1.2); // returns 2 .floor(1.2); // returns 1 .abs(-1.2); // returns 1.2 .min(1, 2, 3); // returns 1 .max(1, 2, 3); // returns 3 .random(1, 100); // returns a random number between 1 and 100 . Color Functions . Color is an important component of any website and SASS provides a wide range of functions that allow you to manipulate colors in a variety of ways. | . .lighten(#007fff, 20%); // returns a lighter shade of blue .darken(#007fff, 20%); // returns a darker shade of blue .opacify(#007fff, 0.2); // makes the color more opaque .transparentize(#007fff, 0.2); // makes the color more transparent .mix(#007fff, #ff0000, 50%); // returns a mix of two colors . String Functions . SASS provides a variety of string functions that allow you to manipulate strings. Here are some examples: | . .to-upper-case(&quot;hello world&quot;); // returns &quot;HELLO WORLD&quot; .to-lower-case(&quot;HELLO WORLD&quot;); // returns &quot;hello world&quot; .str-index(&quot;hello world&quot;, &quot;world&quot;); // returns the index of the first occurrence of &quot;world&quot; .str-insert(&quot;hello&quot;, &quot; world&quot;, 5); // inserts &quot; world&quot; into &quot;hello&quot; at position 5 . Creating Custom Functions . In addition to using built-in functions, you can also create your own functions in SASS using the @function name(arguments){} | @return is similar to the return statement in JavaScript and Python. It returns a value from a function. | Functions take input values, perform calculations, and return a result. Here&#39;s an example of a simple function that calculates the area of a rectangle: | . @function rectangle-area($width, $height) { @return $width * $height; } // Usage: $area: rectangle-area(10px, 20px); // Returns 200px . Or you can also make a different kind of function that increases the font size to the factorial of a inputted number. | . @function factorial($number){ $calculated: 1; @for $_ from 1 through $number { $calculated: $calculated*$number; } @return $calculated; } #testing { font-size: factorial(3); } . //Combining functions and loops to achieve different sass effects @function sum($numList){ $sum: 0; @each $num in $numList { $sum: $sum+$num; } @return $num; } @function tri($num){ $sum: 0; @for $i from 1 through $num { $sum: $sum+$num; } @return $sum; } @function max($nums){ $i:0; $value:0px; @while $i&lt;length($nums){ @if $value&lt;list.nth($nums,$i){ $value:list.nth($nums,$i); } } } . Custom functions are very powerful, and can be used to create reusable pieces of code that can be used throughout your stylesheets. . | SASS functions are a powerful feature that allow you to perform complex operations on values, manipulate data, and generate content dynamically. By using built-in functions and creating your own custom functions, you can greatly extend the capabilities of your SASS stylesheets. . | . Mixins . Mixin what is a mix in what are we mixing in? . Mixins are a way to make groups of CSS that you want to reuse throughout your site anywhere you please. | Mixins are a form of template and that you can use to build on top of to make different features later on this prevents you from having to write the same code over and over again. | This is a form of encapsulation in your CSS and is a great way to make your code more organized and easier to read. | Mixins can also take in arguments and be able to be used to apply effects on certain elements if that is a feature you want to add to your site. However unlike functions which also take arguments mixins cannot return values. | To use a mixin declare it with @mixin and then incorporate with @include. | . Inheritance . What is inheritance? . In general programming concept where the child class can inherit properties from the parent class. These properties can be changed and modified in the child class. This prevents code from being repeated and makes the code more usable and flexible. | In SASS we have a similar concept that can be used as well we can create base styles and then have other styles inherit from them and then we can change them as we please. | We can do that by through using @extend .name-of-class and then we can add more styles to it as we please. Simple as that | . Mixin &amp; Inheritance Code Example . // example of @mixin @mixin button { width: auto; height: auto; border-radius: 10px; background-color: #21807c; border: 3px solid black; font-size: 1.5em; display: flex; justify-content: center; align-items: center; grid-column: span 1; grid-row: span 1; // creates smooth animation effect transition: all 0.5s; } // default button theme for calculator and stopwatch buttons. Both will follow the same button format .button { // uses the scss from the @mixin @include button; } /* styling for the calculator clear button */ .calculator-button-clear { // @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e68b1c; } /* styling for the calculator equals button */ .calculator-button-equals { // another @extend inherits .button and then changes the background color from .button @extend .button; background-color: #e70f0f; } . Hacks &amp; Hack Helper - Calculator &amp; Hack Helper - Stopwatch . All hacks are pair/trio hacks, individual hacks are not recommended and will not be accepted unless a valid reason is given. We will respond in the appropriate slack channel if we have any questions. Hacks are due by 11:59pm on Wednesday 4/26/2023 at 11:59 p.m. PST. Any late submission will have a deduction of 0.1 points from their total grade. | . Part 1: Reflections 0.4 Points . Write a short description of each key feature of Sass and compare it to how it to CSS and how using Sass makes your life easier when using all the features. Include examples of how it would have made prior features from past projects simpler to implement. Also answer the questions indicated as hack questions. | . SASS Functions . SASS functions enable us to define complex calculations and transformations that could be done in the stylesheet. It responsible for operating on values, manipulate data, etc. There are built in functions you make yourself, these are things like JavaScript and Python. SASS functions able to do arithmetic operations, manipulate colors, work with strings, etc. Functions are definitely similar to programming languages, but they use SASS stylesheets to generate CSS code. . Math Functions: . SASS has many functions that allow you to do mathematic operations like ones in Python. A math function in Sass can make your code much easier to read and maintain, as well as reducing the risk of errors that can occur when performing complex calculations manually in CSS. . Color Functions: . Color is important part of web design, and making a web page look well put together. Sass gives several built-in color functions that make it easier to manipulate colors in stylesheets. These functions can be used to adjust the brightness, saturation, hue, and other properties of colors. Some examples of color functions in Sass include darken(), lighten(), saturate(), desaturate(), and mix(), and many more. . String Functions: . Strings are almost always used in data type in programming, and Sass provides several built-in string functions that make it easier to manipulate strings in stylesheets. These functions can be used to extract substrings, concatenate strings, convert strings to uppercase or lowercase, and perform other operations on strings. Some examples of string functions in Sass include str-slice(), str-insert(), str-length(), and to-upper-case(), etc. . Custom Functions: . You can create your own functions in SASS by using @function name(arguments){}. @return is very similar to return in Javascript/Python, both are responsible for returning a value from the function. Functions are given values, take it in, perform the calculations, and then output the result. . An example of how prior features in my project would have been easier if I used SASS was definitely designing the frontend to look clean and colorful. I could of implemented the functions darken(), lighten(), saturate(), desaturate(), and mix() to save more time than HTMLing a bunch of code to switch colors and what not. . Part 2: Sass Demo 0.5+ Points . Using at least 3 or more sass features create a UI demo that may be used for future or current projects and reflect on how this was more effective than doing the same task using only regular features of CSS. Extra points will be awarded based on creativity and extra addition of features from SASS. | . Credits: Team Mortalicously Sassy 💖 .",
            "url": "https://dereksol.github.io/Tera/student/2023/04/28/P3M-SASSFundamentals.html",
            "relUrl": "/student/2023/04/28/P3M-SASSFundamentals.html",
            "date": " • Apr 28, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "P3 4/27 Big Idea 3 Data Structures",
            "content": "Leaderboard Database . How do you set up a database model? . What is a database model . A database model shows the of a database | It fundamentally determines in which manner data can be , , and __ | Some popular database models are relational models, object oriented models, hierarchial models, flat file models, and network models | The one below is an Object-Relational Model which is a combination of a model and an __ model | . Creating SQLAlchemy App . from flask import Flask from flask_sqlalchemy import SQLAlchemy # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = &#39;sqlite:///sqlite.db&#39; app.config[&quot;SQLALCHEMY_TRACK_MODIFICATIONS&quot;] = False app.config[&quot;SECRET_KEY&quot;] = &quot;SECRET_KEY&quot; db = SQLAlchemy(app) # Images storage app.config[&quot;MAX_CONTENT_LENGTH&quot;] = 5 * 1024 * 1024 # maximum size of uploaded content app.config[&quot;UPLOAD_EXTENSIONS&quot;] = [&quot;.jpg&quot;, &quot;.png&quot;, &quot;.gif&quot;] # supported file types app.config[&quot;UPLOAD_FOLDER&quot;] = &quot;volumes/uploads/&quot; # location of user uploaded content . Creating Database Template . from sqlalchemy import Column, Integer, String, Text from sqlalchemy.exc import IntegrityError import json from werkzeug.security import generate_password_hash, check_password_hash # # Leaderboard DB class that maps leaderboard SQL table # class Leaderboard(db.Model): __tablename__ = &quot;leaderboard&quot; # # Leaderboard DB columns for easy, medium and hard points with user info # id = Column(Integer, primary_key=True) _username = Column(String(255), unique=True, nullable=False) _password = Column(String(255), nullable=False) _pointsEasy = Column(Integer, nullable=False) _pointsMedium = Column(Integer, nullable=False) _pointsHard = Column(Integer, nullable=False) # # Leaderboard DB class constructor # def __init__(self, username, password, pointsEasy, pointsMedium, pointsHard): self._username = username self.set_password(password) self._pointsEasy = pointsEasy self._pointsMedium = pointsMedium self._pointsHard = pointsHard # # Leaderboard DB class string representation of an object # def __repr__(self): return &quot;&lt;Leaderboard(id=&#39;%s&#39;, username=&#39;%s&#39;, pointsEasy=&#39;%s&#39;, pointsMedium=&#39;%s&#39;, pointsHard=&#39;%s&#39;)&gt;&quot; % ( self.id, self.username, self.pointsEasy, self.pointsMedium, self.pointsHard, ) # # Returns Leaderboard username # @property def username(self): return self._username # # Sets Leaderboard username # @username.setter def username(self, value): self._username = value # # checks Leaderboard username valid # def is_username(self, username): return self._username == username # # Returns Leaderboard easy points # @property def pointsEasy(self): return self._pointsEasy # # Sets Leaderboard easy points # @pointsEasy.setter def pointsEasy(self, value): self._pointsEasy = value # # Sets Leaderboard medium points # @property def pointsMedium(self): return self._pointsMedium # # Sets Leaderboard medium points # @pointsMedium.setter def pointsMedium(self, value): self._pointsMedium = value # # Returns Leaderboard hard points # @property def pointsHard(self): return self._pointsHard # # Sets Leaderboard hard points # @pointsHard.setter def pointsHard(self, value): self._pointsHard = value # # Returns Leaderboard password # @property def password(self): return self._password[0:10] + &quot;...&quot; # # Sets Leaderboard password # def set_password(self, password): self._password = generate_password_hash(password, method=&#39;sha512&#39;) # # Checks Leaderboard password validity # def is_password(self, password): result = check_password_hash(self._password, password) if result: return True else: return False # # Converts Leaderboard to dictionary # def to_dict(self): return {&quot;id&quot;: self.id, &quot;username&quot;: self.username, &quot;password&quot;: self.password, &quot;pointsEasy&quot;: self._pointsEasy, &quot;pointsMedium&quot;: self._pointsMedium, &quot;pointsHard&quot;: self._pointsHard} # # Converts Leaderboard to string values # def __str__(self): return json.dumps(self.read()) # # Creates Leaderboard database # def create(self): try: db.session.add(self) db.session.commit() return self except IntegrityError: db.session.remove() return None # # Returns Leaderboard name value pairs # def read(self): return { &quot;id&quot;: self.id, &quot;username&quot;: self.name, &quot;password&quot;: self.uid, &quot;pointsEasy&quot;: self.pointsEasy, &quot;pointsMedium&quot;: self.pointsMedium, &quot;pointsHard&quot;: self.pointsHard } # # Updates Leaderboard DB rows for points and user data # def update(self, username=&quot;&quot;, password=&quot;&quot;, pointsEasy=&quot;&quot;, pointsMedium=&quot;&quot;, pointsHard=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(username) &gt; 0: self.username = username if len(pointsEasy) &gt; 0: self.pointsEasy = pointsEasy if len(pointsMedium) &gt; 0: self.pointsMedium = pointsMedium if len(pointsHard) &gt; 0: self.pointsHard = pointsHard if len(password) &gt; 0: self.set_password(password) db.session.add(self) db.session.commit() return self # # Delets Leaderboard row from teh DB # def delete(self): db.session.delete(self) db.session.commit() return None . Initialization of Data . # Initializes Leaderboard DB with test data # def init_leaderboards(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; l1 = Leaderboard(username=&quot;bob&quot;, password=&quot;apple&quot;, pointsEasy=2, pointsMedium=5, pointsHard=3) l2 = Leaderboard(username=&quot;bobby&quot;, password=&quot;appley&quot;, pointsEasy=20, pointsMedium=50, pointsHard=30) l3 = Leaderboard(username=&quot;bobbert&quot;, password=&quot;appled&quot;, pointsEasy=200, pointsMedium=500, pointsHard=300) l4 = Leaderboard(username=&quot;bobruth&quot;, password=&quot;appler&quot;, pointsEasy=100, pointsMedium=300, pointsHard=500) leaderboards = [l1, l2, l3, l4] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for l in leaderboards: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = l.create() print(f&quot;Created new uid {object.username}&quot;) db.session.add(l) db.session.commit() except: &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {l.username}, or error.&quot;) init_leaderboards() . DO THESE FOR THIS SECTION . fill in the blanks | add a new leaderboard, and edit the bobbert leaderboard; add proof with a screenshot of the sqlite.db | add a new set of keys and values to the leaderboard; add proof with a screenshot of the sqlite.db | . Picture Database . | Used CRUD methods which have create, read, update, and delete rows in the table. There is a function called initEasyImages which populates the &#39;Images&#39; table with data. | The init method is used to create a new row in the table with a given imagePath, xCoord, yCoord, and difficulty. The repr method returns a string representation of the object when it is printed. | The table has five columns: id, _imagePath, _xCoord, _yCoord, and _difficulty. | | This part of the code defines getter and setter methods for the columns in the Images model. It sets and retrieves the metadata of the image. | | The initEasyImages function initializes the database with image metadata for easy difficulty images. | . from sqlalchemy import Column, Integer, String, Text, LargeBinary from sqlalchemy.exc import IntegrityError from pathlib import Path class Images(db.Model): __tablename__ = &#39;images&#39; id = Column(Integer, primary_key=True) _imagePath = Column(Text, unique=True, nullable=False) _xCoord = Column(Integer, nullable=False) _yCoord = Column(Integer, nullable=False) _difficulty = Column(Integer, nullable=False) def __init__(self, imagePath, xCoord, yCoord, difficulty): self._imagePath = imagePath self.xCoord = xCoord self.yCoord = yCoord self.difficulty = difficulty def __repr__(self): return &quot;&lt;image(id=&#39;%s&#39;, imagePath=&#39;%s&#39;, xCoord=&#39;%s&#39;, yCoord=&#39;%s&#39;, difficulty=&#39;%s&#39;)&gt;&quot; % ( self.id, self.imagePath, self.xCoord, self.yCoord, self.difficulty ) @property def imagePath(self): return self._imagePath @imagePath.setter def imagePath(self, value): self._imagePath = value @property def xCoord(self): return self._xCoord @xCoord.setter def xCoord(self, value): self._xCoord = value @property def yCoord(self): return self._yCoord @yCoord.setter def yCoord(self, value): self._yCoord = value @property def difficulty(self): return self._difficulty @difficulty.setter def difficulty(self, value): self._difficulty = value def to_dict(self): return {&quot;id&quot;: self.id, &quot;imagePath&quot;: self._imagePath, &quot;xCoord&quot;: self._xCoord, &quot;yCoord&quot;: self._yCoord, &quot;difficulty&quot;: self._difficulty} def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;path&quot;: self.imagePath, &quot;xCoord&quot;: self.xCoord, &quot;yCoord&quot;: self.yCoord, &quot;difficulty&quot;: self.difficulty } # CRUD update: updates user name, password, phone # returns self def update(self, path=&quot;&quot;, xCoord=&quot;&quot;, yCoord=&quot;&quot;, difficulty=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; xCoord = int(xCoord) yCoord = int(yCoord) if path: self.imagePath = path if xCoord &gt;= 0: self.xCoord = xCoord if yCoord &gt;= 0: self.yCoord = yCoord if difficulty in range(3): self.difficulty = difficulty db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None . def initEasyImages(): with app.app_context(): db.create_all() image_dir = Path.cwd()/&quot;images/easy&quot; images_paths = [i.name for i in image_dir.iterdir()] images = [Images(&quot;images/easy/&quot; + image, 250, 250, 0) for image in images_paths] for image in images: try: image.create() print(&quot;Successfully added entry&quot;) except: db.session.remove() print(&quot;Error adding image: &quot;, image.imagePath) initEasyImages() . Popcorn Hacks . The init method initializes a new Images object with the following parameters: imagePath, xCoord, yCoord, and __. | In the Images class, the tablename attribute specifies the name of the __. | The update method updates the values of the object&#39;s attributes imagePath, xCoord, yCoord, and difficulty based on the input parameters, and then uses the db.session.commit method to __ the changes to the database. | The db module used in this code is part of a larger library called __, which provides a set of tools for working with databases in Python. | . Picture Encoding . Essential Question: What are some methods that we could store and access images in the backend, and how can we send them to a frontend application? . The image encoding process for this project is done within the endpoints created on our backend application. The overarching process is split into three seperate sub-processes, each handling a different level of game-difficulty. For this lesson, we will look at the easy images sub-process as our example. . def get_random_easy_image(): images = Images.query.filter_by(_difficulty=0).all() image = random.choice(images) return image . This procedure is a void function that takes in no arguments directly, but does access the database via the Images object imported from the models that we created . The first line filters all database entries and searches for all image entries with the difficulty column set to 0, which we established as the identifying factor for easy images. The .all() method attached to the end of the query serves to return all matching image objects in a list called image. . The procedure finally returns a random image using the random.choice method. . class ImagesAPI: class _EasyImages(Resource): def get(self): image = get_random_easy_image() json_data = {} if image: image_path = project_path + &quot;/&quot; + image.imagePath with open(image_path, &quot;rb&quot;) as image_file: json_data[&quot;bytes&quot;] = str(base64.b64encode(image_file.read()))[2:][:-1] json_data[&quot;xCoord&quot;] = image.xCoord json_data[&quot;yCoord&quot;] = image.yCoord return jsonify(json_data) . If the first procedure locates and selects the image, the second procedure then encodes, formats, and returns the JSON data containing the image and its metadata. . The procedure first calls the get_random_easy_image() procedure created earlier to store our image object and also initializes an empty dictionary to store our json data. . If a valid image object is found, the procedure will attempt to create an absolute path to the image file on the computer running flask application. This is achieved by concatenating the absolute path of the working project directory to the relative image path stored in the database. The aboslute path of the directory is generated in our namespace package (__init__.py) in our _nighthawkguessr_api_ package. The line calculating the project path is shown below, and uses the Path object from the pathlib library. . project_path = Path.cwd().as_posix() . After creating the image path, the procedure attempts to open the image file, and procedes to use the base64.b64encode method to encode the image file bytes into base64 data. This is convinient for us as HTML on the frontend pages allows us to render images with base64 bytes (Not sure about normal image bytes). The base64 bytes are then encoded into a python literal string in order to be jsonified and displayed on the api endpoint. The [2:][:-1] appended to the end is a type of string slicing which removes the b&#39; generated at the start of the data and the &#39; generated at the end of the data. These extraneous characters are used to indicate a base64 string, and are not part of the original data. . The procedure finally appends the metadata (position of the right coordinates on the map) to the json_data dictionary, completing the process. . Finally, the procedure returns the JSONified data, which is accessible from our API. As you can see, the images we process are extremely large and possess high resolution (typically a few megabytes!) . Popcorn Hack: . Please write a few sentences answering the essential question, &quot;What are some methods that we could store and access images in the backend, and how can we send them to a frontend application?&quot; . - . Endpoints . What are endpoints and how do we use them to transfer data from one part of the internet to another? . Backend: . The backend creates endpoints that are used to edit the properties of the database constructed by the model. | GET, POST, PUT, and DELETE methods are used in order to define HTTP endpoints in the API. These endpoints are based on requests that can be made to manipulate the database. | Variables defined in the __ file are used to call data from the database in order to be manipulated. | . | . Methods in Backend Example . Modules are being imported with specified classes which are used later in the program. Blueprint: used to organize routes and functions | request: used to access data sent to the Flask app. through the HTTP request | Api: creates a Flask instance that handles requests | Resource: this allows for the definition of custom HTTP requests | reqparse: used to parse (sort and search) and validate data that is requested | . | The blueprint and api are then defined as variables and are used to store any future data that is requested. | Some preliminary functions, such as find_by_username, are created to be used later in the API code, allowing for simpler code. In this case, these functions are used to search through the database to find specific usernames. | . | . from flask import Blueprint, request from flask_restful import Api, Resource, reqparse # setting variables used to store future data leaderboard_bp = Blueprint(&quot;leaderboards&quot;, __name__) leaderboard_api = Api(leaderboard_bp) # pre-made function created to search for usernames, allows for simplified program def find_by_username(username): users = Leaderboard.query.filter_by(_username=username).all() return users[0] . GET Method . This method is used to __ specific data points from the database by searching through the usernames. | This will be different for each type of database being made, however the general format stays the same. Since this is a text database, to pull specific information from the database, the API will __ through the data using the username, which is unique. | The function defined previously, find_by_username(), is used to search through the database and pull the specific data point that is being searched. | If the user exists, the data of that user will be returned, being sent to the __ of the program. | If a user isn&#39;t found, an error will be returned that the user does not exist. | . | In general, the program will always be searching for a piece of information that is unique and that will be used to pull data to wherever it is being requested. | . def get(self): # requested username turned into variable for later use username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) # username used to search for data and the found data is made into a variable user = find_by_username(username) if user: # data is sent to the frontend return user.to_dict() # error checking return {&quot;message&quot;: user}, 404 . POST Method . This method is used to __ a specific piece of information in the database based on searching by usernames. | This is again different for each database that is made, however the general structure stays the same. In this example, a parser is being used to extract data from an incoming __. In this case, the RequestParser class is used from the Flask module. All required arguments are added to the parser, specifying what type of data it is. | The ____ variable is added in order to parse and store all incoming data. | . | The variable leaderboard is created to make a new object that will contain the values from the incoming data. | The function will attempt to add a new entry in the leaderboard database and return a status of a successful addition of the data. | If there is an error in the data being inputted, a status code of __ will be returned. | . | . def post(self): # using parsers to gather and data that is to be posted and validate it&#39;s true parser = reqparse.RequestParser() parser.add_argument(&quot;username&quot;, required=True, type=str) parser.add_argument(&quot;password&quot;, required=True, type=str) parser.add_argument(&quot;pointsEasy&quot;, required=True, type=int) parser.add_argument(&quot;pointsMedium&quot;, required=True, type=int) parser.add_argument(&quot;pointsHard&quot;, required=True, type=int) # variable made to store data args = parser.parse_args() # variable created to format all data into one place and send to database for logging leaderboard = Leaderboard(args[&quot;username&quot;], args[&quot;password&quot;], args[&quot;pointsEasy&quot;], args[&quot;pointsMedium&quot;], args[&quot;pointsHard&quot;]) try: # data is sent to the database for storage db.session.add(leaderboard) db.session.commit() return leaderboard.to_dict(), 201 except Exception as e: # error checking db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . PUT Method . This method is used to __ a specific piece of information in the database based on searching by usernames. | For each data base that is made, there will be different specific but the overall structure stays the same. First, the username variable is defined, which __ the requested username and sets it as a variable that will be used later to edit a specific dataset. | The function find_by_username() is again used to search through the data to look for the username requested. This is set to a variable to be used later. | If the username is found in the database, the rest of the dataset is updated with the new __ requested. This is updated into the database. | If there is an error found with the data requested of it the user isn&#39;t found, an error is returned. | . | . def put(self): # variable created to make requested username into something that can be used to search for data in future username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # attempts to find the data in the database user = find_by_username(username) if user: # if the data is found, the data points are updates user.pointsEasy = int(request.get_json().get(&quot;pointsEasy&quot;)) user.pointsMedium = int(request.get_json().get(&quot;pointsMedium&quot;)) user.pointsHard = int(request.get_json().get(&quot;pointsHard&quot;)) db.session.commit() return user.to_dict(), 201 else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . DELETE Method . This method is used to __ a specific information from the database, again searching by username. | The overall structure stays the same between different databases, but the specific __ will need to be changed to personalize the database. A variable for the username is created in order to search for for the user name requested later in the code with the function find_by_username(). | If the user is found, the user is deleted, along with that user&#39;s data and the change is saved to the database. | If the user isn&#39;t found or if an error is found with the data requested, an __ is returned. | . | . def delete(self): # username variable defined to store requested value username = request.get_json().get(&quot;username&quot;) print(username, &quot;uid&quot;) try: # finds the username and stores data in variable user = find_by_username(username) if user: # if the user is found, the user and their data is deleted db.session.delete(user) db.session.commit() return user.to_dict() else: # if user not found, error is returned return {&quot;message&quot;: &quot;leaderboard not found&quot;}, 404 except Exception as e: # error checking for request error db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Displaying the Full Database . Another class is created in order to __ the entire database at once and also to delete the entire database if necessary. | This uses the same functions as before to GET and DELETE the data, however it is modified slightly to look through the entire database abd display or delete all data points. | An example of where this would be useful is to create a table of data in the __. | . class LeaderboardListAPI(Resource): # GET method def get(self): try: # attempts to find the entire database requested and is stored in variable leaderboards = db.session.query(Leaderboard).all() # sends back the entire database return [leaderboard.to_dict() for leaderboard in leaderboards] except Exception as e: # error checking for request errors db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 # DELETE method def delete(self): try: # deletes entire database db.session.query(Leaderboard).delete() db.session.commit() return [] except Exception as e: # checks for errors in request db.session.rollback() return {&quot;message&quot;: f&quot;server error: {e}&quot;}, 500 . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . What are the four HTTP request methods that are used with Flask? | What is a parser and how would it be aid with data validation? | What is the role endpoints in Flask? | Frontend and How it Communicates to Backend . This first part of the frontend logic simply finds out of the site is running locally or not, off of which is figures out whether or not to pull data from the local backend link or the global backend link. In this example, a global backend link hasn&#39;t been sent, however it would go in the second set of quotations after the local address. This isn&#39;t something you need to know, but it is nice to use when developing full stack applications. . // checks if site is run locally const isLocalhost = Boolean( window.location.hostname === &quot;localhost&quot; || window.location.hostname === &quot;[::1]&quot; || window.location.hostname.match(/^127(?: .(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/) ) // defines database url const api = isLocalhost ? &quot;http://localhost:8200&quot; : &quot;&quot;; . GET Method . This method is more complicated in terms of requesting, simply because in order to, for example, print all data points into a __, the function needs to iterate through the entire database. | In this example, the function getList() is used to asynchronously fetch the entire database and set it to a variable called list. The list is returned for later use outside of this __ in order to print the data. | . | . Printing the Data . In order to print the data, the function getList() is run and once it is run, it __ through the data to pull out each individual data point and enter it into the function used to make the table. For each class in the database, which is each row in the database, the variables corresponding to that specific class are pulled and inserted into the addTask() function as __ to create the table of users. | . | The function addTask() is used to create the visual table that the user sees. A row is created and for each table cell in that row, the data is added by iterating through the __ of variables that are parameters pulled directly from the database. | A new row is added into table for each new class of information pulled from the database. | . | . // fetches entire database const getList = async () =&gt; { // stores it in variable list const list = await fetch(api + &quot;/leaderboardList&quot;).then((r) =&gt; r.json()); return list }; // goes through entire database and pulls each individual class getList().then(list =&gt; { // for each class (row), data is pulled and added into addTask() function to be put in visual table list.forEach(cls =&gt; { addTask(cls.username, cls.pointsEasy, cls.pointsMedium, cls.pointsHard) }) }) // adds visual representation of data in table function addTask(username, pointsEasy, pointsMedium, pointsHard) { // array of variables defining data points var tableCells = [username, pointsEasy, pointsMedium, pointsHard] // creates new row in variable var row = document.createElement(&#39;tr&#39;) // goes through entire data set and places data into cells for (var i = 0; i &lt; tableCells.length; i++) { var tableCell = document.createElement(&#39;th&#39;) tableCell.textContent = tableCells[i] tableCell.className = &#39;cell&#39; row.appendChild(tableCell) } // creates new row as child of schedule element schedule.appendChild(row) } . POST Method . This method is used to push data to the backend using the __ POST method. The function addData is defined with the parameters that are going to be pushed into the backend. | An object is created to define the variables that are going to be pushed into the backend. This is basically the JSON string that will be sent to the backend to get decoded and inserted into the database. | The fetch() function is called with the api variable, which is a variable representing the url for the backend API, and the extension specific to where the data will be posted, in this case being /leaderboard. The method, __, and body of the data are defined in order to complete a successful HTTP request to the backend. The object data which was created earlier, is converted to a JSON string here and sent to the backend. | . | If an error is detected, it is returned and the request will fail. | . | . // calls addData function function addData(username, password, pointsEasy, pointsMedium, pointsHard){ // creates object defining the variables that will be added to the backend, corresponding with the backend variables let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // POST method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;POST&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . PUT and DELETE Methods . These two methods are almost identical to the POST method above in the way they work, the only difference being that the __ requested is different. The name of the function defined is also changes, in this case being editData() and deleteData(). | . // editing function defined function editData(username, password, pointsEasy, pointsMedium, pointsHard){ // has object with variables that are required in backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // PUT method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;PUT&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . // deleting function defined function deleteData(username, password, pointsEasy, pointsMedium, pointsHard){ // object defined with variables that are same as backend let data = { &quot;username&quot;: username, &quot;password&quot;: password, &quot;pointsEasy&quot;: pointsEasy, &quot;pointsMedium&quot;: pointsMedium, &quot;pointsHard&quot;: pointsHard } // DELETE method called fetch(api + &#39;/leaderboard&#39;, { method: &#39;DELETE&#39;, headers: { &#39;Content-Type&#39;: &#39;application/json&#39;, }, body: JSON.stringify(data), }) // error checking .then((response) =&gt; response.json()) .catch((error) =&gt; { console.error(&#39;Error:&#39;, error); }); } . Calling Images (GET Method) . The process for calling images is basically the same as anything else, except you need to be able to reconstruct the images based on the __ that is requested from the backend. | In this case, the image in the api is being called to the frontend and is returned as the variable list. This is then inserted directly into the html by getting the element that needs to be edited and styling with __ by using the built-in function data:image/png;base64, which translated from bytes to pixel. | . | . // GET method calling info from backend url const getList = async () =&gt; { const list = await fetch(api + &quot;/api/images/GetEasyImage&quot;).then((r) =&gt; r.json()); return list }; // inserting image into frontend getList().then(list =&gt; { document.getElementsByTagName(&quot;body&quot;)[0].style = &quot;background-image: url(&#39;data:image/png;base64, &quot; + list.bytes +&quot;&#39;);&quot; }) . Popcorn Hacks . Please answer these questions to earn points for the popcorn hacks. . How is data for images stored in a Flask API and how is it displayed on the frontend when requested? | What is the fetch() function and how is it used in frontend logic? | How is data formatted and sent to the backend? (mention JSON in your answer) | Time and Space Complexity of Algorithms . The lesson for time and space complexity of algorithms will consist of demonstrations of sorting algorithms and the different time complexities that they come with on a small scale. This can be acomplished using things such as a deck of cards or even with actual people. An example of how this will work is laying out the cards in a random order on the table, and demonstrating different ways of sorting it. From methods such as bubble sort to methods such as bogo sort, it will be really easy to see exactly how much time it would take for these different sorting algoritms to complete. Then after that, it is easy to understand the concept of time complexity when given a real world example. . Space complexity can be demonstrated by using the same method, however, adding in the extra step of having the cards in a pile. This will show how much space is needed to complete the sorting algorithm. This will easily reveal the concept of space complexity because it allows people to witness a real world, physical example of the concept, turning a really hard to grasp concept into something that is easy to understand. . Additionally, we are also going to analyze certain algorithms within our project to show how such analysis is applicable to real world projects. . Essential Question: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . QuickSort Algorithm . The main algorithm we&#39;ve employed is an recursive implementation of quickSort in the backend to sort the database entries to obtain the user with the highest overall score. Typically this algorithm is implemented to sort in ascending order, but to make it easier to extract the top 10 users, we sill be modifying the algorithm to sort in descending order (so the top players show up first in the list). . class LeaderboardTop10(Resource): def partition(self, arr, lo, hi): pivot = arr[hi][1] # Pivot value set to the 2nd index of the last element pivot_pos = lo - 1 # Set our base pivot position, ensure that lower picoit index == lo for idx in range(lo, hi): # Iterate over all elements in the partition array if arr[idx][1] &gt;= pivot: # Found an element creater than pivot pivot_pos+=1 # Increment correct position for pivot arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] # Swap the larger element with the element at the current pivot position arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] # Swap element at pivot position with the pivot element return pivot_pos+1 # Return index of pivot element def qSortUserList(self, arr, lo, hi): if lo &lt; hi: last_pivot = self.partition(arr, lo, hi) self.qSortUserList(arr, lo, last_pivot-1) self.qSortUserList(arr, last_pivot+1, hi) def get(self): users_list = get_user_list() top10 = {} self.qSortUserList(users_list, 0, len(users_list)-1) for user in users_list: top10[user[0]] = user[1] print(top10) if len(top10) &lt;= 10: return top10 return top10[:10] . To understand how the algorithm first, we must first familiarize ourselves with the process. . Our backend grabs all users from our leaderboard | Returns all users and their scores in a 2-D array, each element is a list of length two that contains the username and cumulative score of the player | The sorting algorithm will use the second element representing the user score to sort the array of users. ┌─────────────────────┐ ┌──────────────────┐ ┌─────────────────┐ │ │ │ │ │ │ │ │ │ Split │ │ display │ │ Database │ │ the ├──────────────► sorted list │ │ │ │ List into │ │ on endpoint │ │ │ │ top 10 users │ │ │ └──────────┬──────────┘ └─────────▲────────┘ └─────────────────┘ │ │ │ │ │ │ │ │ ┌──────────▼──────────┐ ┌─────────┴────────┐ │ │ │ │ │ 2-D User Array │ │ QuickSort │ │ ├───────────────► │ │ [(username, score)] │ │ Algorithm │ │ │ │ │ └─────────────────────┘ └──────────────────┘ . Our quickSort algorithm consists of 2 procedures, a partition() procedure that pivots and sorts individual elements, and a qSortUserList() that performs recursion which finishes the sorting. | The Logic . The partition procedure will serve to &quot;partition&quot; our list into 2 parts, a smaller portion and a larger portion around a certain pivot value (Note: These portions don&#39;t have to sorted yet!). . Partition procedure . First, partition selects a certain element in a list to be a pivot. This pivot value will be used to make comparisons to every other value in the array. For simplicity, we have selected our pivot element as the last element in the unsorted list. The procedure defines a pivot_pos variable to denote the correct position of the pivot index after each iteration. Although it may seem weird that the variable intially starts with a value of 0-1 = -1, this negative index is resolved by the return statement, which always returns an index that&#39;s one higher than pivot_pos. This serves to ensure that the lowest pivot index would be 0, which is the smallest element in any given partition. . pivot = arr[hi][1] pivot_pos = lo - 1 . The partition will then iterate over each element in the list from the starting and ending indexes indicated by the parameters. if a particular value is found to be larger than the pivot, the algorithm well then increment the recorded pivot position and swap the pivot with the found element. . for idx in range(lo, hi): if arr[idx][1] &gt;= pivot: pivot_pos+=1 arr[pivot_pos], arr[idx] = arr[idx], arr[pivot_pos] . Finally, the partition procedure swaps the element at the pivot_pos+1 index with our pivot element at the hi index to place the pivot at it&#39;s rightful place. We know that pivot_pos+1 must be smaller than hi because it did not trigger the conditional to increment the `pivot_pos+1`` index. At last, the pivot_pos is incremented and returned to serve as an indicator of where our two partitions split. . arr[pivot_pos + 1], arr[hi] = arr[hi], arr[pivot_pos + 1] return pivot_pos+1 . qSort procedure . If the parition procedure splits our list into smaller and larger regions, then our qSort procedure ensures that these regions are in order. It&#39;s hard to explain, but the procedure iterates over each paritition, repeating the paritition process, setting new pivot values, and correctly places the pivot values at their correct sorted order. . The procedure first checks if the lower index is smaller than the higher index, to ensure that our parition has a length greater than 1. If this check passes, the procedure then calls the partition procedure to both split our list into the two distinct regions and also the index of our correctly placed pivot value. The procedure then invokes itself again on the larger interval (replacing hi to be the partition index-1 since the previous pivot is already sorted), and also on the smaller interval (replacing lo to be partition index+1). . Eventually, the qSort procedure will iterate through all elements in the list while parition places each element at the correct position, giving us the final sorted list. . Complexity analysis . To analyze time complexity, we must analyze the partition and qSort procedures. . For the qSort procedure, because we divide the array into 2 halves during each function call, our number of function calls scales proportionally to ___, where ___ is the length of the input array. However, within each function call, we also call the partition procedure, which contains an for-loop that iterates over each element in the partioned array, comparing it to a pivot value. We are well familiar with since loops, and can safely say that runtime scales proportionally to the length of the partition array. Due to this, we can conclude that our iteration time complexity scales ___. Thus for each iterative process, our timerun scales proportionally to ___. . Finally, we could multiply our two complexities together to get a representation of our overall complexity. Thus, the asymptotic notation for a time complexity could be represented as _, where n is the length of the input array. Keep in mind, Big-Oh notation is not a function that returns the accurate runtime for any given input, but rather only gives us a model to see how runtime scales with increasing input sizes. . Space complexity for this program is much easier to analyze. Because the array is sorted in-place (meaning we don&#39;t create other placeholders or copies), we require no additional space to sort this array. However, recursive function calls may require extra storage on the call stack. Since we found the number of recursive calls to be asymptotic to _, we can conclude that quickSort has an O(1) space complexity for an iterative method, and an O(logn) space complexity for a recursive method. . Popcorn Hack . Please answer our EQ for this section: What is the quicksort algorithm, and how does it work? How does it&#39;s time and space complexities scale with input sizes? . - . Hacks - Frontend and Backend . Please clone these two repositories: . Frontend | Backend | . Directions: . You will be creating a full stack of a text and image database which you will code in the Flask Backend and pull information to sort in the Frontend. . You need to have coded a fully working CRUD in the Flask, which you can show working with Postman, however you only need to show the Frontend reading and displaying data from the backend. . You may use the code we showed to you today in class in order to code the both the Frontend and Backend. . Follow the directions in the comments in the Flask Backend and the ReadMe in the frontend before starting. . Hacks - QuickSort . On this notebook, try recreating the original quicksort algorithm from our modified version. For an additional challenge, try abstracting the partitioning process through list comprehension! . After creating a successful algorithm, either create a diagram showing how the algorithm works, or a diagram that illustrates the time and/or space complexity of a recursive approach. . Hacks Helpers . If you need help with your hacks, you can check out our project repos to see how we did it. . Frontend Table | Frontend Image | Backend | . You can also message us on the coding Slack channel for additional help. . Points . Popcorn Hacks - 0.1 pts | Full Stack - 0.4+ 0.5 extra for styling html page | . | QuickSort Hacks - 0.3+ 0.5 extra for implementing quicksort | . | . HACKS ARE DUE SATURDAY (4/29) 11:59 PM .",
            "url": "https://dereksol.github.io/Tera/student/2023/04/27/lesson-student.html",
            "relUrl": "/student/2023/04/27/lesson-student.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "P3-M 4/25 Simulations",
            "content": "Objectives . Understand how computers can be used to represent real-world phenomena or outcomes | Compare simulations with real-world contexts. | Implement code to mimic real world situations, problems, or phenomena. | What are simulations by College Board definition? . Simulations are abstractions that mimic more complex objects or phenomena from the real world Purposes include drawing inferences without the changing of the real world | . | Simulations use varying sets of values to reflect the hypothetical state state of a real phenomenon | Often, when developing a simulation, it is necessary to remove specific problems or simplify aspects Simulations can often contain bias based on which details or real-world elements were included/excluded | . | Simulations allow the formulation of predictions under consideration | Variability and randomness of the world is considered using random number generators | Examples: rolling dice, spinners, molecular models, analyze chemicals/reactions... | . . Analyzing an Example: Air-Traffic Simulator . Say we want to find out what the optimal number of aircrafts that can be in the air in one area is. | A simulation allows us to explore this question without real world contraints of money, time, safety Unfortunately we can&#39;t just fly 67 planes all at once and see what happens | . | Since the simulation won&#39;t be able to take all variables into control, it may have a bias towards one answer | Will not always have the same result | . Functions we often need (python) . import random # a module that defines a series of functions for generating or manipulating random integers random.choice() #returns a randomly selected element from the specified sequence random.choice(mylist) # returns random value from list random.randint(0,10) #randomly selects an integer from given range; range in this case is from 0 to 10 random.random() #will generate a random float between 0.0 to 1. . Functions we often need (js) . // Math.random(); returns a random number // Math.floor(Math.random() * 10); // Returns a random integer from 0 to 9: . College Board Question 1 . Question: The following code simulates the feeding of 4 fish in an aquarium while the owner is on a 5-day trip: . numFish ← 4 foodPerDay ← 20 foodLeft ← 160 daysStarving ← 0 REPEAT 5 TIMES { foodConsumed ← numFish * foodPerDay foodLeft ← foodLeft - foodConsumed IF (foodLeft &lt; 0) { daysStarving ← daysStarving + 1 } . } . This simulation simplifies a real-world scenario into something that can be modeled in code and executed on a computer. | Summarize how the code works: | . Examples . Card Flip . import random cards = [&quot;Ace&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;Jack&quot;, &quot;Queen&quot;, &quot;King&quot;] suits = [&quot;Diamonds&quot;, &quot;Hearts&quot;, &quot;Spades&quot;, &quot;Clubs&quot;] print(random.choice(cards) + &quot; of &quot; + random.choice(suits)) . Coin Flip . import random def coinflip(): #def function randomflip = random.randint(1, 1) #picks either 0 or 1 randomly if randomflip == 0: #assigning 0 to be heads--&gt; if 0 is chosen then it will print, &quot;Heads&quot; print(&quot;Heads&quot;) else: if randomflip == 1: #assigning 1 to be tails--&gt; if 1 is chosen then it will print, &quot;Tails&quot; print(&quot;Tails&quot;) #Tossing the coin 5 times: t1 = coinflip() t2 = coinflip() t3 = coinflip() t4 = coinflip() t5 = coinflip() . Tails Tails Tails Tails Tails . Your turn: Change the code to make it simulate the flipping of a weighted coin. . Adding images (in Python) . Add a heads and tails images into your images directory with the correct names and run the code below | . import random # importing Image class from PIL package from PIL import Image # creating a object im = Image.open(r&quot;images/HeadsOn.png&quot;) image = Image.open(r&quot;images/TailsOn.png&quot;) i=random.randint(0,1) if i == 1: print(&quot;heads&quot;) display(im) else: print(&quot;tails&quot;) display(image) . heads . In order to display an image in python, we can use the PIL package we previously learned about. . Spin the Wheel . import random print(&quot;Spin the wheel!&quot;) print(&quot;-&quot;) img = Image.open(r&quot;images/SpinTheWheel.png&quot;) n = 300 blue = 0 red = 0 for i in range(n): spin = random.randint(1,2) if spin == 1: # head blue = blue + 1 else: # tail red = red + 1 print(&#39;Number of blue:&#39;, blue) print(&#39;Number of red:&#39;, red) display(img) . Spin the wheel! - Number of blue: 148 Number of red: 152 . Your turn: Add a visual to the simulation! . Population Growth and Plots . import random totalPopulation = 50 growthFactor = 1.00005 dayCount = 0 #Every 2 months the population is reported while totalPopulation &lt; 1000000: totalPopulation *= growthFactor #Every 56th day, population is reported dayCount += 1 if dayCount == 56: dayCount = 0 print(totalPopulation) . 50.14019267336515 50.28077842644361 50.421758361373264 50.5631335833823 50.704905200797775 50.847074325054315 50.98964207070282 51.13260955541927 51.27597790001347 51.41974822843774 51.563921667795874 51.70849934835185 51.85348240353876 51.99887196996765 52.14466918743647 52.290875198939005 52.43749115067384 52.5845181920533 52.731957475712534 52.87981015751845 53.028077396578915 53.17676035525173 53.325860199153716 53.47537809717 53.62531522146305 53.775672747481956 53.92645185397153 54.0776537229816 54.22927953987637 54.38133049334356 54.533807775403844 54.68671258142016 54.840046110106975 54.993809563539834 55.14800414716474 55.302631069807575 55.45769154368362 55.613186784406984 55.769118011000224 55.92548644590379 56.082293314985726 56.239539847551235 56.39722727635229 56.55535683759732 56.71392977096098 56.87294731959368 57.032410730131446 57.19232125270578 57.35268014095325 57.51348865202554 57.67474804659919 57.83645958888546 57.998624546640265 58.161244191174156 58.324319797362236 58.48785264365415 58.651844012084126 58.81629518828111 58.98120746147867 59.14658212452524 59.312420473894186 59.47872380969402 59.645493435678574 59.81273065925718 59.98043679150499 60.14861314717315 60.31726104469929 60.486381806217665 60.65597675756963 60.82604722831395 60.99659455173736 61.16762006486491 61.33912510847044 61.51111102708713 61.68357916901805 61.85653088634677 62.029967534947765 62.2038904744973 62.3783010684839 62.5532006842192 62.72859069284855 62.9044724693617 63.08084739260377 63.25771684528589 63.43508221399618 63.61294488921051 63.791306265303454 63.9701677405592 64.14953071718247 64.32939660130967 64.50976680301973 64.69064273634523 64.87202581928359 65.05391747380793 65.23631912587847 65.41923220545367 65.6026581465012 65.78659838700955 65.97105436899903 66.1560275385331 66.34151934572994 66.52753124477363 66.71406469392542 66.90112115553534 67.08870209605372 67.27680898604255 67.46544330018713 67.65460651730747 67.84430012037001 68.0345255964992 68.22528443698917 68.41657813731555 68.60840819714687 68.80077612035657 68.99368341503474 69.1871315935 69.38112217231115 69.57565667227935 69.77073661847982 69.96636354026379 70.16253897127073 70.35926444944013 70.55654151702359 70.75437172059699 70.95275661107263 71.15169774371125 71.35119667813444 71.55125497833659 71.75187421269743 71.95305595399414 72.15480177941373 72.35711327056549 72.55999201349321 72.76343959868774 72.96745762109934 73.17204768015053 73.37721137974819 73.58295032829629 73.7892661387086 73.99616042842136 74.20363481940569 74.41169093818056 74.62033041582539 74.82955488799308 75.03936599492248 75.24976538145154 75.46075469703 75.67233559573249 75.88450973627147 76.0972787820101 76.31064440097533 76.52460826587115 76.73917205409133 76.95433744773317 77.17010613360995 77.3864798032648 77.60346015298347 77.82104888380806 78.03924770155005 78.25805831680371 78.47748244495963 78.69752180621806 78.91817812560257 79.13945313297332 79.36134856304064 79.58386615537891 79.80700765444 80.0307748095669 80.2551693750076 80.4801931099287 80.70584777842916 80.93213514955427 81.15905699730956 81.38661510067445 81.6148112436165 81.84364721510522 82.07312480912596 82.30324582469439 82.53401206587023 82.76542534177153 82.99748746658884 83.23020025959946 83.46356554518161 83.69758515282888 83.93226091716447 84.16759467795565 84.40358828012793 84.64024357377998 84.87756241419767 85.11554666186892 85.35419818249822 85.59351884702103 85.83351053161893 86.07417511773376 86.31551449208287 86.55753054667352 86.80022517881795 87.0436002911482 87.28765779163105 87.53239959358282 87.77782761568463 88.02394378199715 88.27075002197599 88.51824827048654 88.7664404678193 89.01532855970511 89.26491449733037 89.51520023735218 89.76618774191397 90.01787897866066 90.27027592075423 90.523380546889 90.77719484130736 91.0317207938151 91.28696039979738 91.54291566023389 91.79958858171481 92.05698117645656 92.31509546231764 92.57393346281405 92.83349720713561 93.0937887301617 93.3548100724771 93.61656328038823 93.8790504059389 94.1422735069267 94.40623464691882 94.67093589526853 94.93637932713133 95.20256702348084 95.46950107112576 95.73718356272572 96.00561659680784 96.2748022777833 96.54474271596374 96.81544002757771 97.08689633478744 97.35911376570533 97.63209445441078 97.90584054096682 98.18035417143682 98.45563749790136 98.73169267847535 99.00852187732455 99.28612726468283 99.56451101686899 99.84367531630399 100.12362235152784 100.4043543172171 100.6858734142017 100.9681818494825 101.25128183624842 101.53517559389384 101.81986534803593 102.1053533305323 102.39164177949827 102.6787329393245 102.96662906069467 103.2553324006029 103.54484522237183 103.83516979566991 104.12630839652952 104.41826330736457 104.7110368169886 105.00463122063279 105.29904881996362 105.59429192310112 105.89036284463707 106.18726390565291 106.48499743373814 106.78356576300845 107.082971234124 107.38321619430786 107.68430299736441 107.9862340036976 108.28901158032987 108.59263810092013 108.89711594578293 109.20244750190679 109.50863516297301 109.81568132937433 110.12358840823391 110.43235881342416 110.74199496558553 111.05249929214574 111.36387422733867 111.67612221222326 111.98924569470296 112.30324712954469 112.61812897839816 112.93389370981537 113.25054379926964 113.56808172917515 113.8865099889064 114.20583107481775 114.52604749026302 114.84716174561511 115.16917635828544 115.49209385274403 115.81591676053907 116.14064762031693 116.46628897784198 116.79284338601637 117.12031340490034 117.4487016017323 117.77801055094855 118.1082428342038 118.43940104039156 118.77148776566392 119.10450561345237 119.43845719448807 119.77334512682211 120.10917203584634 120.44594055431388 120.78365332235961 121.12231298752103 121.46192220475878 121.80248363647786 122.14399995254809 122.48647383032527 122.82990795467218 123.17430501797935 123.51966772018655 123.86599876880385 124.2133008789327 124.56157677328723 124.9108291822157 125.26106084372192 125.61227450348659 125.96447291488887 126.31765883902827 126.67183504474562 127.02700430864537 127.38316941511724 127.74033315635786 128.09849833239275 128.45766775109823 128.81784422822375 129.17903058741356 129.54122966022885 129.9044442861703 130.26867731270008 130.63393159526427 131.00020999731495 131.36751539033335 131.73585065385146 132.1052186754753 132.4756223509073 132.84706458396897 133.21954828662376 133.5930763789997 133.9676517894126 134.3432774543887 134.71995631868808 135.0976913353271 135.47648546560228 135.85634167911294 136.2372629537851 136.61925227589387 137.0023126400879 137.38644704941228 137.77165851533223 138.1579500577565 138.5453247050614 138.93378549411435 139.32333547029742 139.71397768753192 140.10571520830172 140.49855110367753 140.89248845334066 141.2875303456074 141.68367987745353 142.08094015453818 142.47931429122812 142.87880541062242 143.27941664457708 143.6811511337291 144.08401202752148 144.4880024842277 144.89312567097676 145.29938476377774 145.7067829475447 146.11532341612175 146.52500937230818 146.93584402788318 147.34783060363168 147.76097232936925 148.17527244396697 148.59073419537748 149.00736084066034 149.425155646007 149.84412188676714 150.26426284747424 150.6855818218708 151.10808211293462 151.53176703290453 151.9566399033063 152.3827040549788 152.80996282810023 153.23841957221413 153.66807764625565 154.0989404185779 154.5310112669781 154.96429357872486 155.39879075058366 155.83450618884436 156.27144330934723 156.70960553751047 157.14899630835643 157.58961906653877 158.0314772663694 158.47457437184565 158.9189138566775 159.3644992043146 159.81133390797362 160.2594214706658 160.70876540522437 161.1593692343318 161.61123649054784 162.06437071633695 162.51877546409628 162.974454296183 163.43141078494295 163.8896485127385 164.34917107197592 164.8099820651345 165.27208510479406 165.7354838136635 166.20018182460961 166.66618278068484 167.13349033515655 167.60210815153516 168.07203990360307 168.54328927544339 169.01585996146883 169.48975566645098 169.96498010554862 170.44153700433756 170.91943009883965 171.39866313555166 171.87923987147536 172.36116407414633 172.84443952166393 173.3290700027207 173.81505931663224 174.30241127336657 174.7911296935745 175.2812184086196 175.77268126060764 176.26552210241738 176.75974479773012 177.2553532210609 177.75235125778775 178.25074280418306 178.75053176744373 179.2517220657221 179.75431762815606 180.25832239490038 180.7637403171574 181.2705753572083 181.7788314884435 182.2885126953946 182.79962297376505 183.31216633046162 183.8261467836261 184.34156836266627 184.85843510828798 185.3767510725265 185.89652031877856 186.41774692183384 186.94043496790735 187.4645885546712 187.99021179128667 188.51730879843657 189.04588370835765 189.57594066487266 190.107483823423 190.64051735110152 191.1750454266848 191.7110722406662 192.24860199528842 192.78763890457714 193.32818719437287 193.87025110236505 194.41383487812527 194.95894278313986 195.50557909084395 196.05374808665488 196.60345406800522 197.15470134437754 197.707494237337 198.26183708056612 198.8177342198983 199.37519001335195 199.93420883116485 200.49479505582852 201.05695308212188 201.62068731714655 202.18600218036067 202.75290210361413 203.32139153118305 203.8914749198046 204.463156738712 205.03644146966957 205.6113336070078 206.1878376576584 206.76595814119057 207.34569958984486 207.92706654857014 208.51006357505847 209.0946952397809 209.68096612602358 210.26888082992338 210.85844396050425 211.44966013971296 212.0425340024556 212.63707019663403 213.233273383182 213.83114823610165 214.43069944250087 215.03193170262884 215.63484972991407 216.23945825100063 216.84576200578545 217.45376574745524 218.0634742425242 218.6748922708712 219.28802462577698 219.90287611396192 220.5194515556238 221.1377557844757 221.75779364778353 222.37957000640415 223.0030897348239 223.62835772119607 224.25537886737985 224.88415808897844 225.5147003153777 226.14701048978466 226.78109356926657 227.41695452478945 228.0545983412572 228.69403001755072 229.33525456656687 229.97827701525802 230.62310240467164 231.26973578998908 231.91818224056598 232.56844683997173 233.22053468602925 233.87445089085486 234.53020058089874 235.18778889698473 235.84722099435083 236.5085020426895 237.1716372261884 237.83663174357085 238.50349080813663 239.17221964780276 239.84282350514476 240.51530763743727 241.18967731669585 241.8659378297178 242.54409447812415 243.2241525784004 243.90611746193915 244.58999447508114 245.27578897915754 245.96350635053204 246.65315198064286 247.34473127604497 248.0382496584523 248.73371256478077 249.4311254471907 250.13049377312905 250.831823025373 251.53511870207248 252.2403863167937 252.94763139856178 253.6568594919047 254.36807615689625 255.0812869691998 255.79649752011247 256.51371341660814 257.2329402813819 257.95418375289455 258.6774494854154 259.4027431490684 260.1300704298747 260.8594370297992 261.59084866679365 262.32431107484285 263.05983000400795 263.79741122047267 264.53706050658855 265.27878366091994 266.02258649828946 266.76847484982346 267.51645456299826 268.2665315016851 269.01871154619727 269.7730005933353 270.5294045564336 271.2879293654064 272.048580966795 272.81136532381356 273.5762884163963 274.34335624124435 275.112574811873 275.8839501586579 276.65748832888363 277.43319538679 278.2110774136202 278.9911405076685 279.77339078432755 280.55783437613707 281.34447743283164 282.1333261213881 282.92438662607515 283.7176651485011 284.5131679076628 285.310901139994 286.11087109941457 286.91308405737965 287.71754630292827 288.52426414273344 289.3332439011511 290.1444919202694 290.9580145599587 291.7738181979222 292.59190922974483 293.4122940689435 294.234979147018 295.0599709135012 295.8872758360093 296.7169004002931 297.5488511102877 298.3831344881652 299.2197570743844 300.05872542774284 300.9000461254279 301.7437257630681 302.589770954786 303.43818833324764 304.2889845497177 305.14216627410957 305.9977401950374 306.85571301987005 307.71609147478233 308.57888230480876 309.44409227389536 310.3117281649539 311.1817967799137 312.0543049397762 312.9292594846684 313.8066672738949 314.68653518599365 315.5688701187883 316.4536789894435 317.3409687345188 318.23074631002237 319.12301869146626 320.0177928739205 320.9150758720686 321.81487472026214 322.7171964725761 323.62204820286394 324.52943700481296 325.4393699920007 326.3518542979497 327.26689707618374 328.1845055002843 329.1046867639462 330.02744808103495 330.95279668564194 331.88073983214247 332.81128479525165 333.74443887008215 334.6802093722009 335.6186036376864 336.55962902318737 337.5032929059783 338.4496026840188 339.39856577601165 340.3501896214602 341.3044816807274 342.261449435094 343.22110038681643 344.18344205918754 345.1484819965934 346.11622776457364 347.08668694988114 348.05986716054014 349.035776025907 350.01442119673004 350.99581034520844 351.97995116505376 352.9668513715488 353.95651870160964 354.9489609138453 355.94418578861934 356.9422011281091 357.9430147563688 358.94663451939033 359.9530682851643 360.96232394374175 361.97440940729695 362.9893326101884 364.0071015090213 365.0277240827101 366.0512083325411 367.07756228223457 368.1067939780088 369.13891148864167 370.1739229055354 371.21183634277907 372.2526599372127 373.29640184849023 374.34307025914455 375.39267337465117 376.4452194234927 377.50071665722265 378.55917335053124 379.6205978013096 380.6849983307144 381.75238328323405 382.82276102675394 383.8961399526212 384.97252847571133 386.0519350344942 387.1343680910996 388.21983613138366 389.30834766499646 390.39991122544694 391.494535370171 392.59222868059885 393.69299976222095 394.796857244657 395.9038097817225 397.01386605149725 398.1270347563929 399.2433246232216 400.36274440326383 401.4853028723379 402.6110088308677 403.7398711039524 404.87189854143577 406.0071000179748 407.1454844331095 408.287060711334 409.43183780216435 410.5798246802101 411.73103034524416 412.88546382227366 414.0431341616106 415.2040504389423 416.3682217554037 417.5356572376472 418.7063660379155 419.8803573341126 421.0576403298762 422.23822425464937 423.4221183637535 424.60933193846023 425.799874286065 426.9937547399591 428.1909826597033 429.39156743110146 430.5955184662737 431.80284520373044 433.01355710844604 434.22766367193367 435.4451744123189 436.6660988744152 437.89044662979774 439.11822727687934 440.34945044098566 441.5841257744296 442.8222629565879 444.0638716939778 445.308961720331 446.5575427966714 447.8096247113921 449.06521728033084 450.3243303468473 451.58697378190135 452.8531574841283 454.1228913799193 455.3961854234965 456.6730495969924 457.95349391052855 459.2375284022931 460.5251631386193 461.8164082140656 463.11127375149374 464.40976990214904 465.7119068457384 467.01769479051194 468.3271439733419 469.64026465980334 470.95706714425455 472.2775617499174 473.60175882895885 474.92966876257213 476.26130196105726 477.5966688639028 478.93577993986906 480.2786456870687 481.62527663304957 482.9756833348777 484.329876379219 485.6878663824232 487.0496639906063 488.41527987973484 489.78472475570936 491.1580093544477 492.5351444419697 493.9161408144817 495.30100929846105 496.689760750741 498.0824060585959 499.47895613982575 500.8794219428431 502.28381444675813 503.69214466146485 505.1044236277269 506.52066241726544 507.9408721328446 509.36506390835916 510.7932489089215 512.2254383309495 513.6616434022543 515.1018753821286 516.5461455614329 517.9944652626872 519.4468458401576 520.9032986799461 522.363835200079 523.8284668505978 525.2972051136486 526.770061503571 528.2470475669891 529.7281748829021 531.2134550627753 532.7028997506313 534.1965206231389 535.6943293897091 537.1963377925831 538.7025576069253 540.2130006409161 541.7276787358455 543.2466037662027 544.7697876397733 546.2972422977293 547.828979714724 549.3650118989859 550.9053508924134 552.4500087706683 553.9989976432714 555.5523296536958 557.1100169794631 558.67207183224 560.2385064579324 561.8093331367805 563.3845641834594 564.9642119471699 566.54828881174 568.1368071957193 569.7297795524775 571.3272183703012 572.929136172493 574.5355455174692 576.1464589988572 577.7618892455956 579.3818489220322 581.0063507280242 582.6354073990381 584.2690317062466 585.9072364566338 587.5500344930905 589.1974386945177 590.8494619759274 592.5061172885423 594.1674176199 595.8333759939517 597.5040054711668 599.1793191486345 600.8593301601647 602.5440516763953 604.2334969048909 605.927679090248 607.6266115142 609.3303074957197 611.0387803911243 612.7520435941806 614.4701105362091 616.1929946861893 617.9207095508675 619.6532686748599 621.3906856407593 623.132974069243 624.8801476191777 626.6322199877284 628.3892049104649 630.1511161614686 631.9179675534425 633.6897729378182 635.4665462048637 637.248301283795 639.035052142882 640.8268127895609 642.6235972705416 644.425419671919 646.2322941192846 648.0442347778338 649.8612558524812 651.683371587969 653.510596268979 655.3429442202466 657.1804298066711 659.0230674334283 660.8708715460835 662.7238566307075 664.5820372139859 666.4454278633357 668.3140431870181 670.1878978342551 672.067006495342 673.9513839017637 675.8410448263103 677.7360040831921 679.6362765281566 681.5418770586045 683.4528206137071 685.3691221745227 687.2907967641139 689.2178594476659 691.150325332605 693.0882095687164 695.0315273482627 696.9802939061026 698.9345245198126 700.8942345098052 702.8594392394482 704.8301541151864 706.8063945866619 708.7881761468354 710.7755143321076 712.7684247224413 714.7669229414836 716.7710246566857 718.7807455794315 720.7961014651545 722.8171081134661 724.843781368276 726.8761371179183 728.9141912952758 730.9579598779051 733.0074588881613 735.0627043933235 737.1237125057212 739.1904993828613 741.2630812275531 743.3414742880366 745.4256948581091 747.5157592772539 749.6116839307671 751.7134852498872 753.8211797119232 755.9347838403846 758.0543142051102 760.1797874223978 762.3112201551356 764.4486291129311 766.5920310522441 768.7414427765165 770.8968811363039 773.0583630294111 775.2259054010183 777.3995252438195 779.5792395981537 781.765065552138 783.9570202418024 786.1551208512234 788.3593846126597 790.5698288066865 792.7864707623309 795.0093278572086 797.2384175176593 799.4737572188831 801.7153644850787 803.9632568895797 806.2174520549937 808.4779676533383 810.7448214061807 813.0180310847782 815.2976145102144 817.5835895535421 819.8759741359219 822.1747862287616 824.480043853858 826.7917650835394 829.109968040806 831.4346708994727 833.7658918843098 836.1036492711884 838.447961387222 840.7988466109101 843.1563233722843 845.5204101530497 847.8911254867327 850.268487958824 852.6525162069256 855.043228920897 857.4406448430004 859.8447827680498 862.2556615435561 864.6733000698766 867.0977173003621 869.5289322415053 871.9669639530903 874.4118315483431 876.8635541940805 879.322151110859 881.7876415731274 884.2600449093766 886.7393805022928 889.2256677889077 891.7189262607517 894.2191754640077 896.7264349996603 899.2407245236565 901.7620637470516 904.2904724361706 906.8259704127589 909.3685775541408 911.9183137933724 914.4751991193983 917.0392535772118 919.6104972680068 922.18895034934 924.7746330352851 927.3675655965947 929.9677683608575 932.5752617126558 935.1900660937296 937.8122020031334 940.4416899973988 943.0785506906938 945.7228047549867 948.3744729202062 951.0335759744047 953.7001347639222 956.3741701935471 959.0557032266831 961.7447548855114 964.4413462511574 967.1454984638538 969.8572327231082 972.5765702878673 975.3035324766865 978.038140667894 980.78041629976 983.5303808706647 986.2880559392662 989.0534631246705 991.8266241066004 994.6075606255647 997.3962944830304 1000.1928475415913 1002.997241725142 1005.8094990190481 1008.6296414703187 1011.4576911877793 1014.2936703422463 1017.1376011666987 1019.9895059564535 1022.8494070693422 1025.7173269258824 1028.593288009456 1031.4773128664845 1034.3694241066091 1037.2696444028618 1040.1779964918474 1043.0945031739234 1046.0191873133717 1048.9520718385857 1051.8931797422445 1054.8425340814974 1057.8001579781408 1060.766074618801 1063.7403072551176 1066.7228792039236 1069.7138138474302 1072.713134633408 1075.7208650753705 1078.7370287527624 1081.7616493111384 1084.7947504623544 1087.8363559847496 1090.8864897233352 1093.9451755899797 1097.012437563597 1100.0882996903342 1103.1727860837598 1106.265920925055 1109.3677284632 1112.4782330151652 1115.5974589661037 1118.72543076954 1121.8621729475624 1125.007710091017 1128.162066859697 1131.3252679825403 1134.4973382578196 1137.67830255334 1140.8681858066293 1144.0670130251392 1147.274809286437 1150.4915997384037 1153.7174095994335 1156.9522641586254 1160.19618877599 1163.4492088826412 1166.711349980997 1169.9826376449819 1173.2630975202271 1176.5527553242666 1179.851636846747 1183.159767949622 1186.477174567361 1189.803882707147 1193.1399184490854 1196.4853079464058 1199.8400774256686 1203.204253186967 1206.5778616041396 1209.9609291249694 1213.3534822713975 1216.7555476397283 1220.1671519008369 1223.5883218003826 1227.0190841590133 1230.4594658725784 1233.9094939123402 1237.3691953251844 1240.8385972338292 1244.3177268370462 1247.806611409865 1251.3052783037892 1254.8137549470152 1258.332068844643 1261.860247578891 1265.3983188093162 1268.9463102730283 1272.5042497849086 1276.0721652378256 1279.6500846028562 1283.2380359295046 1286.8360473459204 1290.4441470591216 1294.062363355214 1297.6907245996133 1301.3292592372682 1304.9779957928836 1308.6369628711413 1312.3061891569278 1315.985703415559 1319.675534493001 1323.3757113161043 1327.0862628928226 1330.8072183124439 1334.5386067458198 1338.2804574455934 1342.0327997464256 1345.795663065229 1349.5690769013959 1353.3530708370308 1357.1476745371817 1360.9529177500744 1364.7688303073437 1368.5954421242673 1372.4327832000029 1376.2808836178187 1380.1397735453336 1384.009483234751 1387.8900430230988 1391.7814833324644 1395.6838346702334 1399.597127629332 1403.5213928884618 1407.4566612123456 1411.402963451964 1415.3603305448 1419.3287935150804 1423.30838347402 1427.2991316200666 1431.3010692391372 1435.314227704878 1439.3386384788973 1443.3743331110186 1447.421343239528 1451.4797005914186 1455.5494369826426 1459.630584318357 1463.7231745931795 1467.827239891434 1471.9428123874047 1476.0699243455883 1480.2086081209457 1484.358896159157 1488.5208209968748 1492.6944152619792 1496.8797116738351 1501.0767430435467 1505.2855422742173 1509.5061423612026 1513.7385763923764 1517.9828775483838 1522.239079102904 1526.5072144229102 1530.7873169689335 1535.0794202953196 1539.3835580505 1543.6997639772487 1548.0280719129503 1552.3685157898653 1556.721129635394 1561.0859475723455 1565.4630038192042 1569.852332690397 1574.2539685965653 1578.6679460448295 1583.0942996390663 1587.5330640801772 1591.9842741663558 1596.4479647933679 1600.9241709548232 1605.4129277424438 1609.914270346347 1614.4282340553175 1618.954854257085 1623.4941664386008 1628.046206186315 1632.6110091864593 1637.1886112253233 1641.7790481895356 1646.3823560663461 1650.998570943908 1655.627729011561 1660.269866560112 1664.9250199821258 1669.5932257722009 1674.2745205272677 1678.9689409468642 1683.6765238334306 1688.397306092596 1693.1313247334679 1697.87861686892 1702.6392197158866 1707.4131705956536 1712.2005069341462 1717.0012662622305 1721.8154862160025 1726.6432045370846 1731.4844590729206 1736.3392877770732 1741.2077287095196 1746.0898200369559 1750.9856000330892 1755.8951070789394 1760.8183796631415 1765.7554563822503 1770.7063759410364 1775.6711771527937 1780.6498989396432 1785.6425803328375 1790.649260473067 1795.669978610768 1800.7047741064275 1805.7536864308945 1810.8167551656884 1815.8940200033098 1820.98552074755 1826.091297313806 1831.2113897293902 1836.3458381338476 1841.494682779266 1846.6579640305958 1851.8357223659652 1857.027998376996 1862.234832769123 1867.4562663619147 1872.6923400893893 1877.9430950003407 1883.2085722586542 1888.488813143636 1893.7838590503316 1899.0937514898524 1904.4185320897002 1909.7582425940957 1915.1129248643033 1920.48262087896 1925.8673727344062 1931.2672226450122 1936.6822129435136 1942.1123860813389 1947.557784628944 1953.018451276148 1958.4944288324652 1963.9857602274396 1969.4924885109876 1975.0146568537257 1980.5523085473183 1986.1054870048138 1991.6742357609814 1997.2585984726568 2002.8586189190848 2008.474341002258 2014.1058087472647 2019.7530663026355 2025.4161579406841 2031.0951280578568 2036.790021175084 2042.5008819381235 2048.2277551179145 2053.9706856109283 2059.7297184395165 2065.5048987522687 2071.2962718243652 2077.10388305793 2082.927777982389 2088.768002254826 2094.62460166034 2100.497622112403 2106.387109653224 2112.2931104541053 2118.2156708158113 2124.1548371689237 2130.110656074209 2136.08317422298 2142.072438437472 2148.0784956711996 2154.101393009326 2160.141177669036 2166.197896999907 2172.2715984842735 2178.3623297376075 2184.4701385088824 2190.595072680959 2196.7371802709526 2202.8965094306072 2209.0731084466843 2215.267025741327 2221.478309872454 2227.707009534127 2233.9531735569444 2240.216850908413 2246.498090693343 2252.7969421542234 2259.113454671611 2265.4476777645227 2271.799661090817 2278.1694544475836 2284.5571077715394 2290.9626711394167 2297.386194768352 2303.8277290162882 2310.2873243823597 2316.765031507295 2323.260901173812 2329.7749843070155 2336.307331974802 2342.8579953882436 2349.4270259020104 2356.0144750147606 2362.620394369546 2369.2448357542207 2375.8878511018397 2382.5494924910736 2389.229812146615 2395.928862439586 2402.6466958879478 2409.3833651569153 2416.138923059372 2422.913422556278 2429.7069167570858 2436.519458920164 2443.3511024532077 2450.2019009136575 2457.071908009127 2463.9611775978096 2470.8697636889137 2477.7977204430854 2484.745102172822 2491.7119633429115 2498.6983585708495 2505.7043426272726 2512.729970436385 2519.7752970763886 2526.840377779921 2533.9252679344804 2541.0300230828643 2548.154698923603 2555.2993513114034 2562.464036257574 2569.6488099304725 2576.8537286559476 2584.0788489177717 2591.3242273580936 2598.5899207778775 2605.875986137348 2613.18248055644 2620.509461315242 2627.856985854449 2635.225111775813 2642.613896842587 2650.023398979991 2657.4536762756543 2664.9047869800756 2672.3767895070823 2679.869742434282 2687.3837045035248 2694.9187346213707 2702.4748918595383 2710.052235455376 2717.6508248123273 2725.270719500395 2732.911979256605 2740.5746639854788 2748.2588337594957 2755.9645488195774 2763.691869575548 2771.440856606614 2779.2115706618342 2787.004072660602 2794.818423693118 2802.6546850208742 2810.5129180771223 2818.3931844673725 2826.295545969864 2834.220064536054 2842.1668022911017 2850.135821534359 2858.1271847398516 2866.1409545567767 2874.177193809989 2882.235965500495 2890.3173328059465 2898.421359081141 2906.5481078585035 2914.6976428486055 2922.870027940646 2931.065327202962 2939.2836048835306 2947.5249254104688 2955.7893533925417 2964.0769536196685 2972.387791063426 2980.721930877568 2989.0794383985253 2997.4603791459226 3005.864818823096 3014.292823317596 3022.7444587017208 3031.219791233022 3039.7188873548275 3048.2418136967613 3056.788637075271 3065.359424494145 3073.954243145041 3082.5731604080124 3091.2162438520363 3099.883561235543 3108.5751805069476 3117.291169805183 3126.031597460233 3134.7965319936707 3143.58604211919 3152.4001967431504 3161.239064965114 3170.1027160783874 3178.9912195705706 3187.904645124089 3196.8430626167533 3205.806542122294 3214.7951539109254 3223.808968449886 3232.848056403997 3241.912488636209 3251.0023362081643 3260.117670380751 3269.258562614663 3278.4250845709594 3287.6173081116276 3296.8353053001415 3306.079148402034 3315.348909885458 3324.64466242176 3333.9664788860414 3343.314432357736 3352.6885961211856 3362.089043666206 3371.5158486886708 3380.969085091084 3390.44882698316 3399.9551486824093 3409.4881247147155 3419.0478298149255 3428.6343389274266 3438.2477272067417 3447.8880700181153 3457.555442938107 3467.24992175518 3476.971582470297 3486.72050129752 3496.496754664598 3506.3004192135777 3516.1315718013943 3525.9902895004807 3535.876649599374 3545.7907296033077 3555.732607234836 3565.702360434434 3575.700067361107 3585.72580639301 3595.779656128063 3605.8616953845535 3615.9720032017713 3626.1106588406183 3636.2777417842303 3646.473331738607 3656.6975086332295 3666.950352621687 3677.2319440823126 3687.542363618804 3697.881692060861 3708.2500104648216 3718.647400114288 3729.073942520775 3739.5297194243394 3750.0148127942307 3760.5293048295225 3771.0732779597624 3781.646814845622 3792.2499983795406 3802.882911686374 3813.545638124051 3824.2382612842225 3834.960864992917 3845.7135333111987 3856.496350535827 3867.309401199917 3878.152770073603 3889.026542164703 3899.930802719383 3910.8656372228284 3921.8311313999093 3932.827371215862 3943.854442876949 3954.9124328311464 3966.001427768817 3977.121514623394 3988.2727805720547 3999.4553130364106 4010.66919968319 4021.9145284249266 4033.1913874206466 4044.4998650765597 4055.8400500467615 4067.2120312339102 4078.615897789941 4090.0517391167546 4101.519644866924 4113.019704944393 4124.552009505185 4136.1166489581055 4147.713713965455 4159.343295443735 4171.0054845643635 4182.700372754399 4194.428051697235 4206.1886133333355 4217.98214986096 4229.808753736866 4241.668517677058 4253.561534657497 4265.487897914835 4277.447700947141 4289.44103751465 4301.468001640473 4313.528687611365 4325.623189978435 4337.751603557903 4349.914023431835 4362.110544948903 4374.341263725114 4386.606275644572 4398.9056768602295 4411.239563794634 4423.608033140682 4436.011181862393 4448.449107195653 4460.921906648981 4473.429678004307 4485.972519317711 4498.550528920226 4511.163805418573 4523.812447695967 4536.496554912866 4549.216226507765 4561.971562197969 4574.762661980377 4587.5896261322605 4600.452555212054 4613.35155006015 4626.286711799668 4639.258141837285 4652.2659418639905 4665.310213855898 4678.3910600750605 4691.508583070249 4704.662885677772 4717.854071022268 4731.082242517532 4744.347503867308 4757.649959066115 4770.989712400055 4784.366868447634 4797.781532080579 4811.233808464663 4824.723803060533 4838.2516216245185 4851.817370209497 4865.421155165681 4879.063083141484 4892.743261084339 4906.461796241551 4920.218796161127 4934.014368692631 4947.848621988012 4961.721664502462 4975.633604995265 4989.584552530659 5003.574616478672 5017.603906515994 5031.672532626831 5045.780605103768 5059.928234548637 5074.115531873383 5088.342608300921 5102.6095753660275 5116.916544916215 5131.263629112576 5145.650940430707 5160.078591661562 5174.546695912347 5189.055366607397 5203.604717489087 5218.194862618691 5232.8259163773055 5247.497993466735 5262.21120891038 5276.96567805416 5291.761516567408 5306.598840443774 5321.477766002141 5336.398409887517 5351.360889071992 5366.365320855602 5381.411822867294 5396.500513065824 5411.631509740684 5426.804931513036 5442.020897336635 5457.279526498765 5472.580938621181 5487.92525366103 5503.312591911805 5518.743074004288 5534.216820907487 5549.733953929595 5565.294594718928 5580.898865264893 5596.546887898931 5612.238785295491 5627.974680472969 5643.754696794706 5659.5789579699185 5675.447588054695 5691.360711452955 5707.318452917434 5723.320937550645 5739.368290805884 5755.460638488189 5771.598106755335 5787.780822118838 5804.008911444924 5820.282501955534 5836.6017212293245 5852.96669720266 5869.377558170623 5885.8344327880095 5902.3374500703485 5918.88673939492 5935.482430501744 5952.1246534946185 5968.813538842137 5985.549217378703 6002.331820305559 6019.161479191824 6036.038325975507 6052.962492964565 6069.93411283792 6086.9533186465005 6104.020243814296 6121.1350221394005 6138.297787795051 6155.508675330697 6172.767819673035 6190.075356127078 6207.431420377218 6224.836148488286 6242.289676906619 6259.792142461123 6277.343682364355 6294.944434213602 6312.5945359919515 6330.294126069369 6348.043343203796 6365.842326542226 6383.691215621802 6401.590150370915 6419.539271110285 6437.538718554073 6455.588633810987 6473.689158385381 6491.840434178356 6510.0426034889015 6528.295809014979 6546.6001938546615 6564.9559015072455 6583.363075874375 6601.8218612611745 6620.33240237739 6638.894844338494 6657.509332666849 6676.176013292847 6694.895032556041 6713.6665372063 6732.490674404961 6751.367591725978 6770.2974371570745 6789.280359100919 6808.316506376276 6827.406028219176 6846.549074284085 6865.745794645072 6884.996339797004 6904.30086065671 6923.659508564162 6943.072435283672 6962.5397930050785 6982.061734344933 7001.6384123476955 7021.2699804869535 7040.956592666612 7060.69840322209 7080.495566921541 7100.3482389670735 7120.256574995957 7140.220731081844 7160.240863735994 7180.317129908501 7200.449686989531 7220.638692810538 7240.884305645517 7261.186684212238 7281.545987673499 7301.962375638361 7322.436008163409 7342.967045754 7363.555649365525 7384.201980404679 7404.9062007306975 7425.668472656669 7446.48895895077 7467.367822837556 7488.305227999243 7509.30133857699 7530.3563191721805 7551.470334847718 7572.643551129314 7593.876134006792 7615.168249935395 7636.520065837067 7657.931749101792 7679.403467588876 7700.935389628291 7722.527684021976 7744.180520045161 7765.894067447705 7787.668496455423 7809.503977771416 7831.400682577403 7853.358782535088 7875.378449787473 7897.45985696023 7919.603177163052 7941.8085839910045 7964.076251525881 7986.406354337586 8008.799067485481 8031.2545665197795 8053.773027482905 8076.35462691088 8098.999541834712 8121.7079497817695 8144.480028777185 8167.315957345251 8190.215914510809 8213.180079800673 8236.208633245005 8259.301755378752 8282.459627243066 8305.682430386705 8328.97034686746 8352.32355925358 8375.742250625224 8399.226604575875 8422.776805213774 8446.39303716339 8470.075485566833 8493.824336085363 8517.639774900756 8541.521988716842 8565.471164760947 8589.487490785343 8613.571155068736 8637.722346417731 8661.941254168336 8686.228068187407 8710.582978874178 8735.006177161724 8759.497854518471 8784.058202949695 8808.687414999027 8833.385683749955 8858.153202827356 8882.990166399006 8907.89676917708 8932.873206419712 8957.919673932507 8983.036368070083 9008.223485737602 9033.48122439233 9058.809782045157 9084.209357262174 9109.68014916624 9135.222357438493 9160.83618231998 9186.521824613172 9212.279485683572 9238.109367461268 9264.011672442542 9289.98660369146 9316.034364841416 9342.155160096785 9368.3491942345 9394.616672605656 9420.957801137121 9447.37278633315 9473.861835277012 9500.4251556326 9527.062955646074 9553.775444147474 9580.562830552373 9607.425324863525 9634.36313767249 9661.376480161309 9688.465564104126 9715.630601868876 9742.871806418956 9770.18939131487 9797.58357071591 9825.054559381846 9852.602572674603 9880.227826559947 9907.930537609192 9935.710923000863 9963.56920052244 9991.505588572038 10019.520306160137 10047.61357291127 10075.785609065802 10104.036635481578 10132.366873635718 10160.77654562635 10189.265874174285 10217.835082624859 10246.484394949606 10275.214035748051 10304.02423024947 10332.915204314626 10361.887184437588 10390.940397747478 10420.075072010231 10449.29143563044 10478.589717653093 10507.97014776538 10537.43295629851 10566.97837422949 10596.606633182986 10626.317965433082 10656.112603905123 10685.990782177549 10715.952734483722 10745.998695713759 10776.128901416365 10806.3435878007 10836.642991738217 10867.027350764529 10897.496903081234 10928.051887557856 10958.692543733647 10989.419111819494 11020.23183269981 11051.130947934409 11082.116699760392 11113.189331094074 11144.34908553285 11175.59620735715 11206.93094153232 11238.353533710557 11269.86423023283 11301.463278130794 11333.150925128773 11364.927419645666 11396.793010796877 11428.747948396333 11460.792482958372 11492.926865699748 11525.151348541596 11557.46618411139 11589.87162574494 11622.367927488373 11654.955344100124 11687.634131052937 11720.404544535857 11753.266841456236 11786.221279441796 11819.268116842544 11852.40761273293 11885.640026913768 11918.96561991434 11952.384652994398 11985.897388146232 12019.504088096717 12053.205016309383 12087.000436986476 12120.890615071014 12154.875816248874 12188.956306950895 12223.132354354939 12257.404226387998 12291.772191728285 12326.236519807353 12360.797480812207 12395.455345687413 12430.210386137214 12465.062874627687 12500.013084388856 12535.06128941685 12570.207764476028 12605.452785101168 12640.796627599599 12676.239569053365 12711.781887321411 12747.423861041776 12783.165769633737 12819.007893300022 12854.950513029034 12890.993910596992 12927.1383685702 12963.384170307221 12999.731599961113 13036.180942481667 13072.732483617634 13109.386509918946 13146.143308738998 13183.003168236863 13219.966377379586 13257.033225944426 13294.204004521134 13331.47900451424 13368.858518145322 13406.342838455306 13443.932259306757 13481.627075386199 13519.427582206408 13557.334076108727 13595.346854265405 13633.466214681926 13671.692456199313 13710.025878496523 13748.466782092759 13787.015468349828 13825.672239474517 13864.43739852095 13903.31124939299 13942.294096846595 13981.38624649219 14020.58800479711 14059.899679087981 14099.32157755312 14138.854009244955 14178.497284082458 14218.251712853578 14258.117607217644 14298.095279707852 14338.185043733687 14378.387213583392 14418.702104426424 14459.130032315934 14499.671314191228 14540.326267880266 14581.095212102171 14621.978466469702 14662.976351491736 14704.089188575843 14745.31730003076 14786.661009068928 14828.120639809036 14869.69651727855 14911.388967416255 14953.198317074834 14995.124894023433 15037.169026950174 15079.331045464807 15121.61128010124 15164.010062320154 15206.527724511605 15249.16459999761 15291.921023034782 15334.797328816943 15377.793853477724 15420.910934093265 15464.148908684783 15507.50811622128 15550.98889662217 15594.59159075995 15638.316540462863 15682.164088517615 15726.134578672025 15770.228355637704 15814.445765092809 15858.787153684734 15903.252869032805 15947.84325973103 15992.558675350827 16037.399466443749 16082.36598454425 16127.458582172447 16172.677612836847 16218.023431037162 16263.496392267074 16309.096853017 16354.8251707769 16400.681704039107 16446.666812301115 16492.780856068344 16539.024196857114 16585.397197197275 16631.90022063524 16678.533631736693 16725.297796089555 16772.1930803068 16819.219852029277 16866.378479928706 16913.669333710503 16961.092784116623 17008.64920292861 17056.338962970367 17104.162438111183 17152.12000326859 17200.21203441135 17248.43890856237 17296.801003801695 17345.298699269442 17393.93237516878 17442.70241276891 17491.609194408087 17540.653103496534 17589.834524519538 17639.15384304039 17688.611445703493 17738.2077202373 17787.943055457417 17837.817841269636 17887.832468672987 17937.987329762804 17988.28281773379 18038.71932688313 18089.297252613527 18140.01699143633 18190.87894097468 18241.883499966614 18293.031068268134 18344.322046856374 18395.75683783277 18447.335844426172 18499.059470996053 18550.928123035646 18602.942207175103 18655.102131184736 18707.40830397814 18759.86113561549 18812.461037306708 18865.208421414656 18918.10370145843 18971.14729211657 19024.339609230276 19077.681069806746 19131.17209202242 19184.813095226207 19238.604499942798 19292.546727876022 19346.64020191207 19400.885346122865 19455.282585769335 19509.832347304797 19564.535058378282 19619.3911478379 19674.401045734136 19729.565183323324 19784.883993070966 19840.357908655118 19895.98736496984 19951.7727981285 20007.71464546736 20063.813345548846 20120.069338165074 20176.48306434126 20233.05496633917 20289.785487660654 20346.675073051065 20403.724168502722 20460.93322125846 20518.30267981514 20575.832993927113 20633.52461460977 20691.37799414313 20749.393586075294 20807.571845226033 20865.91322769042 20924.418190842327 20983.087193338 21041.92069511976 21100.919157419474 21160.083042762275 21219.41281497014 21278.90893916553 21338.571881775024 21398.40211053303 21458.400094485387 21518.566303993073 21578.90121073591 21639.4052877162 21700.07900926254 21760.922851033403 21821.937290020993 21883.122804554878 21944.479874305835 22006.00898028956 22067.710604870445 22129.58523176535 22191.63334604741 22253.85543414983 22316.25198386972 22378.82348437189 22441.570426192702 22504.49330124391 22567.592602816487 22630.86882558457 22694.322465609268 22757.95402034256 22821.76398863121 22885.7528707207 22949.921168259094 23014.269384301042 23078.798023311654 23143.5075911705 23208.398595175524 23273.47154404715 23338.726947932104 23404.16531840751 23469.78716848485 23535.59301261406 23601.583366687497 23667.758748044023 23734.11967547302 23800.666669218463 23867.40025098306 23934.320943932275 24001.429272698453 24068.725763384937 24136.210943570157 24203.885342311834 24271.749490151058 24339.80391911651 24408.0491627286 24476.485756003618 24545.114235457975 24613.935139112404 24682.949006496165 24752.15637865128 24821.557798136786 24891.15380903293 24960.944956945557 25030.931789010236 25101.114853896677 25171.494701812946 25242.071884509805 25312.8469552851 25383.820468987986 25454.992982023334 25526.36505235615 25597.937239515843 25669.71010460067 25741.6842102821 25813.86012080931 25886.238402013518 25958.819621312425 26031.604347714732 26104.593151824527 26177.78660584579 26251.185283586892 26324.789760465083 26398.600613510982 26472.618421373103 26546.843764322453 26621.277224256988 26695.919384706245 26770.770830835885 26845.832149452275 26921.103929007153 26996.586759602116 27072.281232993377 27148.1879425963 27224.307483490138 27300.64045242265 27377.187447814747 27453.94906976529 27530.925920055706 27608.118602154707 27685.527721223065 27763.153884118317 27840.99769939956 27919.059777332175 27997.340729892676 28075.84117077343 28154.56171538754 28233.50298087361 28312.665586100633 28392.0501516728 28471.657299934395 28551.487654974666 28631.54184263272 28711.820490502414 28792.324227937286 28873.053686055493 28954.009497744766 29035.192297667323 29116.602722264943 29198.241409763847 29280.109000179757 29362.206135322907 29444.53345880309 29527.09161603466 29609.88125424164 29692.903022462768 29776.15757155657 29859.645554206538 29943.367624926133 30027.324440064 30111.516657809098 30195.944938195822 30280.609943109266 30365.51233629029 30450.65278334083 30536.03195172904 30621.650510794578 30707.509131753803 30793.6084877051 30879.949253634113 30966.532106419036 31053.357724835954 31140.42678956413 31227.73998319134 31315.29799021924 31403.101497068747 31491.15119208535 31579.44776554463 31667.991909657576 31756.784318575985 31845.825688398 31935.116717173525 32024.65810490969 32114.450553576324 32204.494767111486 32294.791451426972 32385.34131441387 32476.14506594807 32567.20341789585 32658.517084119474 32750.086780482747 32841.913224856646 32933.99713712501 33026.33923919005 33118.940254978166 33211.80091044549 33304.92193358361 33398.30405442534 33491.94800505036 33585.85451959108 33680.02433423814 33774.458187246535 33869.156818941105 33964.120971722485 34059.351390072945 34154.848820562096 34250.61401185283 34346.64771470722 34442.95068199233 34539.52366868615 34636.367431883606 34733.48273080225 34830.870326788514 34928.53098332341 35026.4654660288 35124.674542673085 35223.15898317745 35321.91955962177 35420.95704625078 35520.27221948007 35619.86585790221 35719.73874229275 35819.89165561646 35920.32538303349 36021.040711905356 36122.038431801295 36223.31933450437 36324.88421401764 36426.73386657051 36528.869090624816 36631.290686881206 36733.99945828543 36836.996210034464 36940.281749582944 37043.85688664964 37147.72243322354 37251.87920357034 37356.32801423879 37461.069684067195 37566.10503418976 37671.434888042924 37777.06007137204 37882.98141223767 37989.19974102213 38095.71589043604 38202.53069552484 38309.64499367523 38417.05962462189 38524.775430453985 38632.79325562173 38741.113946943085 38849.73835361041 38958.667327197014 39067.901721663875 39177.44239336639 39287.29020106109 39397.44600591226 39507.91067149881 39618.68506382099 39729.77005130717 39841.16650482067 39952.87529766659 40064.89730559867 40177.233406826104 40289.88448202046 40402.85141432258 40516.13508934957 40629.73639520154 40743.6562224688 40857.89546423877 40972.45501610288 41087.335776163716 41202.53864504192 41318.0645258835 41433.914324366604 41550.088948708915 41666.589309674484 41783.41632058108 41900.570897307254 42018.05395829962 42135.86642457995 42254.00921975231 42372.483270010554 42491.28950414538 42610.428853551755 42729.90225223603 42849.71063682347 42969.85494656547 43090.33612334691 43211.15511169357 43332.312858779645 43453.810314434966 43575.64843115258 43697.82816409623 43820.35047110771 43943.216312714554 44066.426652137416 44189.982455297664 44313.88469082499 44438.134330065004 44562.73234708684 44687.67971869069 44812.977424415665 44938.62644654729 45064.627770125255 45190.982382951224 45317.691275596495 45444.75544140974 45572.17587652487 45699.95357986879 45828.08955316927 45956.58480096279 46085.44033060237 46214.65715226551 46344.23627896206 46474.17872654232 46604.485513704785 46735.157662004254 46866.19619585981 46997.60214256288 47129.376532285234 47261.520398087094 47394.03477592526 47526.92070466121 47660.17922606921 47793.81138484449 47927.81822861151 48062.20080793206 48196.96017631356 48332.097390217365 48467.613509066956 48603.50959525622 48739.786714157985 48876.445934132076 49013.488326533945 49150.914965722906 49288.72692907066 49426.92529696967 49565.5111528417 49704.485583146205 49843.84967738901 49983.604528130665 50123.75123099515 50264.29088467839 50405.22459095692 50546.55345469647 50688.27858386062 50830.401089519575 50972.9220858588 51115.84269018777 51259.16402294875 51402.887207725544 51547.01337125228 51691.543643422374 51836.47915729722 51981.82104911514 52127.5704583004 52273.72852747194 52420.29640245249 52567.27523227755 52714.66616920421 52862.470368720424 53010.68898955391 53159.32319368136 53308.374146337446 53457.84301602392 53607.73097451892 53758.03919688605 53908.768861483644 54059.92114997397 54211.497247332445 54363.49834185706 54515.92562517759 54668.780292264935 54822.0635414406 54975.77657438594 55129.92059615169 55284.49681516734 55439.50644325063 55594.95069561709 55750.83079088956 55907.14795110762 56063.90340173735 56221.09837168084 56378.73409328582 56536.811802355405 56695.33273815768 56854.29814343542 57013.70926441596 57173.567350820755 57333.87365587542 57494.62943631935 57655.835952415626 57817.49446796105 57979.606250295816 58142.172570313545 58305.194702471344 58468.67392479962 58632.61151891224 58797.008770016546 58961.8669669234 59127.187402057236 59292.97137146637 59459.22017483293 59625.93511548326 59793.11750039797 59960.768640222326 60128.88984927636 60297.4824455653 60466.54775078992 60636.08709035676 60806.10179338875 60976.5931927353 61147.56262498307 61319.011430466206 61490.940953277095 61663.35254127665 61836.24754610499 62009.62732319214 62183.49323176843 62357.84663487531 62532.68889937601 62708.02139596631 62883.84549918509 63060.16258742529 63236.97404294473 63414.281251876775 63592.08560424134 63770.388493955776 63949.19131884581 64128.49548065637 64308.30238506271 64488.61344168142 64669.43006408142 64850.75366979509 65032.58568032931 65214.92752117673 65397.78062182687 65581.14641577729 65765.02634054486 65949.42183767704 66134.3343527632 66319.76533544596 66505.71623943246 66692.18852250582 66879.18364653668 67066.70307749443 67254.74828545879 67443.32074463158 67632.42193334784 67822.05333408773 68012.21643348811 68202.91272235407 68394.14369567076 68585.91085261504 68778.21569656726 68971.05973512295 69164.44448010481 69358.37144757445 69552.8421578442 69747.85813548922 69943.42090935932 70139.53201259107 70336.19298261956 70533.40536119077 70731.17069437337 70929.49053257116 71128.36643053495 71327.7999473748 71527.7926465723 71728.3460959929 71929.461867898 72131.14153895751 72333.38669026208 72536.19890733525 72739.57978014654 72943.53090312329 73148.05387516333 73353.15029964762 73558.82178445293 73765.06994196394 73971.89638908656 74179.30274726005 74387.29064247 74595.86170526122 74805.01757074994 75014.75987863734 75225.0902732219 75436.01040341258 75647.5219227417 75859.6264893776 76072.3257661381 76285.62142050327 76499.51512462845 76714.00855535766 76929.10339423628 77144.80132752476 77361.10404621135 77578.01324602569 77795.53062745203 78013.65789574246 78232.3967609304 78451.74893784393 78671.7161461193 78892.30011021426 79113.50255942171 79335.32522788335 79557.76985460313 79780.83818346084 80004.53196322588 80228.8529475709 80453.80289508562 80679.38356929069 80905.59673865128 81132.44417659112 81359.9276615064 81588.04897677964 81816.80991079361 82046.21225694561 82276.25781366132 82506.94838440885 82738.28577771306 82970.27180716967 83202.90829145923 83436.19705436191 83670.1399247713 83904.73873670911 84139.99532933916 84375.91154698217 84612.48923913 84849.73026046024 85087.63647085073 85326.20973539412 85565.4519244125 85805.36491347212 86045.95058339792 86287.21082028851 86529.14751553092 86771.76256581512 87015.05787314929 87259.03534487441 87503.69689367966 87749.04443761679 87995.07990011566 88241.80520999919 88489.22230149829 88737.3331142673 88986.13959339891 89235.64368943973 89485.84735840534 89736.75256179574 89988.3612666106 90240.6754453648 90493.69707610404 90747.42814241986 91001.87063346578 91257.02654397246 91512.89787426352 91769.48663027119 92026.79482355205 92284.82447130287 92543.57759637611 92803.05622729627 93063.26239827539 93324.19814922924 93585.86552579324 93848.26657933826 94111.4033669871 94375.27795163034 94639.89240194269 94905.248792399 95171.34920329074 95438.19572074222 95705.79043672698 95974.13544908396 96243.23286153424 96513.08478369749 96783.69333110838 97055.06062523316 97327.18879348654 97600.07996924798 97873.73629187877 98148.1599067386 98423.35296520244 98699.31762467753 98976.05604861987 99253.57040655176 99531.86287407833 99810.9356329049 100090.79087085396 100371.43078188227 100652.85756609819 100935.07342977884 101218.08058538743 101501.8812515905 101786.4776532755 102071.8720215682 102358.06659384993 102645.0636137755 102932.86533129042 103221.47400264896 103510.89189043136 103801.12126356194 104092.16439732663 104384.02357339115 104676.70107981839 104970.19921108687 105264.52026810833 105559.66655824604 105855.64039533272 106152.4440996887 106450.07999814027 106748.55042403772 107047.85771727365 107348.00422430155 107648.99229815385 107950.82429846068 108253.50259146804 108557.02955005674 108861.4075537607 109166.63898878575 109472.72624802818 109779.67173109378 110087.47784431635 110396.14700077675 110705.68162032175 111016.08412958296 111327.35696199606 111639.50255781961 111952.52336415427 112266.42183496214 112581.20043108574 112896.86162026762 113213.40787716916 113530.84168339071 113849.16552749046 114168.38190500425 114488.4933184649 114809.50227742217 115131.411298462 115454.22290522663 115777.93962843418 116102.56400589852 116428.09858254925 116754.54591045139 117081.90854882578 117410.18906406884 117739.39002977281 118069.5140267459 118400.56364303252 118732.54147393364 119065.450122027 119399.29219718762 119734.0703166082 120069.78710481965 120406.44519371184 120744.04722255381 121082.59583801497 121422.09369418539 121762.54345259696 122103.94778224411 122446.30935960475 122789.6308686611 123133.91500092109 123479.16445543893 123825.38193883697 124172.57016532627 124520.73185672823 124869.8697424958 125219.98655973494 125571.08505322602 125923.16797544544 126276.23808658714 126630.29815458413 126985.35095513039 127341.39927170258 127698.44589558171 128056.49362587517 128415.54526953863 128775.6036413982 129136.67156417214 129498.75186849327 129861.84739293114 130225.96098401415 130591.09549625199 130957.25379215802 131324.43874227165 131692.6532251808 132061.90012754453 132432.18234411578 132803.50277776376 133175.86433949714 133549.26994848647 133923.72253208718 134299.2250258628 134675.78037360765 135053.39152736985 135432.06144747484 135811.79310254828 136192.58946953947 136574.45353374459 136957.38828883017 137341.39673685643 137726.48188830126 138112.6467620833 138499.89438558565 138888.22779467967 139277.65003374932 139668.16415571424 140059.77322205406 140452.4803028323 140846.28847672066 141241.2008310229 141637.220461699 142034.35047338967 142432.5939794407 142831.95410192688 143232.43397167712 143634.0367282988 144036.76552020223 144440.6235046251 144845.61384765792 145251.7397242682 145659.00431832593 146067.41082262772 146476.96243892272 146887.66237793706 147299.5138593994 147712.520112066 148126.68437374625 148542.00989132762 148958.49992080152 149376.15772728866 149794.98658506467 150214.98977758578 150636.17059751446 151058.5323467455 151482.07833643167 151906.81188700948 152332.73632822573 152759.85499916328 153188.17124826726 153617.68843337154 154048.40992172444 154480.33909001583 154913.47932440342 155347.8340205391 155783.40658359556 156220.20042829323 156658.21897892674 157097.4656693923 157537.94394321393 157979.65725357085 158422.60906332458 158866.80284504592 159312.2420810424 159758.9302633852 160206.87089393684 160656.06748437858 161106.52355623784 161558.24264091617 162011.22827971628 162465.48402387032 162921.0134345676 163377.82008298254 163835.90755030265 164295.27942775632 164755.93931664122 165217.89082835295 165681.13758441253 166145.6832164952 166611.5313664591 167078.6856863735 167547.1498385476 168016.9274955592 168488.02234028306 168960.4380659208 169434.17837602898 169909.24698454814 170385.64761583257 170863.38400467875 171342.45989635537 171822.879046632 172304.6452218088 172787.7621987463 173272.23376489474 173758.06371832374 174245.25586775213 174733.81403257782 175223.74204290812 175715.043739589 176207.7229742354 176701.7836092622 177197.2295179136 177694.06458429378 178192.29270339772 178691.9177811408 179192.9437343904 179695.37449099624 180199.213989821 180704.4661807716 181211.13502482968 181719.2244940829 182228.73857175623 182739.68125224288 183252.05654113583 183765.8684552591 184281.12102269928 184797.8182828373 185315.96428637957 185835.56309539053 186356.61878332365 186879.13543505414 187403.11714691023 187928.5680267059 188455.49219377284 188983.89377899247 189513.776924829 190045.14578536127 190578.00452631555 191112.35732509833 191648.2083708287 192185.56186437162 192724.42201837056 193264.79305728065 193806.6792174018 194350.08474691192 194895.0139059002 195441.47096640032 195989.46021242422 196538.98593999568 197090.05245718377 197642.66408413678 198196.82515311602 198752.54000853 199309.81300696815 199868.64851723515 200429.05092038526 200991.02460975663 201554.57399100545 202119.70348214087 202686.41751355943 203254.7205280799 203824.6169809782 204396.11134002195 204969.2080855058 205543.91171028663 206120.2267198184 206698.1576321879 207277.70897814995 207858.88530116293 208441.6911574243 209026.13111590644 209612.20975839268 210199.9316795128 210789.30148677924 211380.32380062324 211973.00325443124 212567.34449458082 213163.3521804772 213761.03098459032 214360.38559249064 214961.4207028865 215564.14102766057 216168.55129190718 216774.65623396882 217382.46060547378 217991.9691713733 218603.1867099785 219216.11801299866 219830.76788557807 220447.14114633386 221065.24262739392 221685.07717443485 222306.64964671966 222929.96491713615 223555.02787223482 224181.8434122674 224810.4164512252 225440.75191687772 226072.8547508111 226706.72990846727 227342.3823591819 227979.81708622444 228619.03908683662 229260.05337227156 229902.86496783333 230547.47891291627 231193.90026104412 231842.1340799103 232492.185451417 233144.05947171568 233797.76125124647 234453.29591477846 235110.6686014495 235769.8844648076 236430.9486728498 237093.8664080638 237758.64286746824 238425.2832626534 239093.79281982206 239764.17677983042 240436.44039822946 241110.58894530602 241786.6277061237 242464.5619805649 243144.39708337217 243826.13834418962 244509.79110760492 245195.36073319145 245882.85259554983 246572.27208435003 247263.62460437455 247956.91557555928 248652.15043303746 249349.33462718135 250048.47362364532 250749.57290340879 251452.6379628186 252157.67431363315 252864.68748306442 253573.6830138223 254284.66646415726 254997.6434079046 255712.61943452794 256429.6001491624 257148.5911726597 257869.59814163114 258592.62670849235 259317.68254150785 260044.77132483467 260773.89875856772 261505.07055878403 262238.29245758755 262973.5702031542 263710.90955977706 264450.31630791194 265191.7962442208 265935.3551816207 266680.99894932494 267428.7333928928 268178.5643742728 268930.49777184986 269684.53948049084 270440.695411591 271198.9714931208 271959.3736696707 272721.9079024999 273486.58016958175 274253.39646565093 275022.3628022506 275793.48520777933 276566.76972753875 277342.22242378024 278119.84937575244 278899.6566797499 279681.6504491608 280465.8368145136 281252.2219235256 282040.81194115244 282831.6130496344 283624.63144854666 284419.87335484603 285217.3450029218 286017.052644643 286819.00254940847 287623.2010041947 288429.6543136069 289238.36879992706 290049.3508031638 290862.60668110196 291678.1428093534 292495.96558140573 293316.08140867326 294138.4967205465 294963.2179644435 295790.2516058597 296619.60412841913 297451.2820339244 298285.29184240894 299121.6400921868 299960.33333990467 300801.37816059287 301644.781147718 302490.548913233 303338.6880876294 304189.20531999075 305042.1072780432 305897.4006482082 306755.09213565453 307615.1884643518 308477.69637712254 309342.6226356951 310209.9740207566 311079.7573320067 311951.9793882099 312826.64702724956 313703.7671061816 314583.3465012881 315465.3921081314 316349.9108416076 317236.9096360016 318126.39544504083 319018.3752419499 319912.8560195053 320809.84479009005 321709.34858574974 322611.37445824547 323515.9294791115 324423.0207397094 325332.6553512832 326244.8404450166 327159.5831720879 328076.89070372627 328996.7702312677 329919.22896621213 330844.2741402787 331771.9130054642 332702.15283409815 333635.000918901 334570.4645730412 335508.5511301912 336449.2679445872 337392.62239108514 338338.62186521903 339287.27378325816 340238.58558226697 341192.5647201622 342149.21867577074 343108.55494888977 344070.5810603444 345035.30455204734 346002.73298705736 346972.8739496391 347945.73504532274 348921.3239009627 349899.6481647983 350880.71550651325 351864.5336172959 352851.11020989943 353840.4530187029 354832.5697997713 355827.4683309162 356825.1564117572 357825.641863783 358828.93253041257 359835.0362770565 360843.96099117893 361855.71458235924 362870.30498235417 363887.7401451602 364908.028047075 365931.17668676144 366957.1940853088 367986.08828629623 369017.8673558568 370052.53938273917 371090.1124783717 372130.594776926 373173.9944353806 374220.3196335856 375269.5785743253 376321.77948338387 377376.9306096098 378435.0402249796 379496.1166246631 380560.16812708904 381627.20307400957 382697.22983056575 383770.256785353 384846.2923504882 385925.3449616738 387007.42307826446 388092.5351833344 389180.6897837423 390271.8954101994 391366.1606173361 392463.4939837681 393563.90411216434 394667.3996293143 395773.9891861965 396883.68145804456 397996.4851444165 399112.40896926314 400231.46168099507 401353.65205255285 402478.98888147506 403607.4809899667 404739.1372249699 405873.9664582314 407011.97758637316 408153.17953096237 409297.581238581 410445.1916808955 411596.01985472743 412750.0747821251 413907.36551043246 415067.9011123611 416231.6906860608 417398.743355192 418569.0682689963 419742.6746023681 420919.57155592676 422099.7683560894 423283.27425514214 424470.0985313138 425660.2504888473 426853.7394580733 428050.574795484 429250.7658838054 430454.32213207113 431661.2529756965 432871.56787655264 434085.2763230401 435302.38783016347 436522.9119396063 437746.8582198054 438974.2362660257 440205.05570043664 441439.3261721863 442677.0573574781 443918.25895964535 445162.94070922834 446411.11236405047 447662.7837092945 448917.9645575802 450176.66474903957 451438.8941513949 452704.6626600366 453973.9801980999 455246.85671654367 456523.3021942269 457803.3266379887 459086.94008272537 460374.15259146964 461664.97425547 462959.4151942681 464257.4855557811 465559.1955163779 466864.55528096115 468173.57508304634 469486.2651848425 470802.63587733207 472122.69748035184 473446.4603426745 474773.93484208855 476105.1313854804 477440.0604089161 478778.7323777228 480121.1577865712 481467.3471595565 482817.31105028285 484171.060041945 485528.6047474113 486889.955809307 488255.1239000979 489624.11972217355 490996.9540079316 492373.63751986175 493754.1810506305 495138.59542316466 496526.89149073744 497919.08013705263 499315.172276331 500715.178853395 502119.110843754 503526.97925369226 504938.7951203533 506354.5695118274 507774.3135272377 509198.03829682834 510625.75498205057 512057.4747756508 513493.208901759 514932.96861597453 516376.76520545676 517824.60998901265 519276.5143171847 520732.4895723418 522192.54716876644 523656.6985527453 525124.9552026588 526597.3286290712 528073.8303748205 529554.4720151087 531039.265157594 532528.2214424803 534021.3525426084 535518.6701635486 537020.1860436915 538525.9119543416 540035.8596998068 541550.041117494 543068.4680779992 544591.1524852018 546118.1062763601 547649.3414221999 549184.8699270121 550724.703828747 552268.8551991066 553817.3361436398 555370.1588018385 556927.3353472316 558488.8779874803 560054.7989644753 561625.1105544317 563199.8250679838 564778.9548502852 566362.5122811014 567950.5097749111 569542.959781 571139.8747835597 572741.2673017862 574347.1498899776 575957.535137632 577572.4356695471 579191.864145917 580815.8332624357 582444.3557503928 584077.4443767741 585715.1119443632 587357.3712918399 589004.2352938824 590655.7168612671 592311.8289409705 593972.5845162711 595637.9966068498 597308.0782688933 598982.8425951955 600662.3027152611 602346.4717954074 604035.3630388685 605728.9896858986 607427.3650138755 609130.502337404 610838.4150084222 612551.1164163055 614268.6199879696 615990.9391879779 617718.0875186472 619450.0785201514 621186.9257706312 622928.6428862963 624675.2435215357 626426.7413690217 628183.15015982 629944.4836634963 631710.7556882246 633481.9800808931 635258.1707272166 637039.3415518424 638825.5065184609 640616.679629914 642412.8749283063 644214.1064951138 646020.388451295 647831.7349574021 649648.1602136914 651469.6784602331 653296.3039770268 655128.0510841088 656964.9341416678 658806.9675501571 660654.1657504056 662506.543223733 664364.1144920613 666226.8941180313 668094.8967051144 669968.1368977288 671846.629381352 673730.3888826382 675619.4301695337 677513.7680513917 679413.4173790881 681318.3930451383 683228.7099838151 685144.3831712638 687065.4276256213 688991.8584071331 690923.6906182709 692860.9394038524 694803.6199511583 696751.7474900527 698705.3372931019 700664.404675694 702628.9649961592 704599.0336558905 706574.6260994646 708555.757814761 710542.4443330867 712534.7012292956 714532.5441219109 716535.9886732476 718545.0505895364 720559.7456210451 722580.0895622036 724606.0982517261 726637.7875727377 728675.1734528969 730718.27186452 732767.098824709 734821.6703954737 736882.0026838613 738948.1118420796 741020.0140676248 743097.7256034091 745181.2627378877 747270.6418051843 749365.8791852234 751466.9913038552 753573.9946329863 755686.9056907073 757805.7410414234 759930.5172959843 762061.251111814 764197.9591930406 766340.6582906297 768489.3652025129 770644.0967737212 772804.8698965168 774971.7015105245 777144.6086028662 779323.6082082925 781508.7174093177 783699.9533363532 785897.3331678403 788100.8741303864 790310.5934989012 792526.5085967288 794748.6367957869 796976.9955167011 799211.6022289414 801452.4744509596 803699.6297503272 805953.0857438726 808212.8600978188 810478.9705279225 812751.4347996128 815030.2707281307 817315.4961786682 819607.1290665091 821905.1873571683 824209.6890665338 826520.6522610073 828838.0950576467 831162.0356243073 833492.4921797828 835829.4829939516 838173.0263879179 840523.1407341555 842879.844456651 845243.1560310503 847613.0939848019 849989.6768973024 852372.9234000427 854762.8521767524 857159.4819635496 859562.8315490843 861972.9197746876 864389.7655345186 866813.3877757139 869243.8054985331 871681.0377565115 874125.103656607 876576.0223593509 879033.8130789979 881498.4950836754 883970.0876955378 886448.6102909151 888934.0823004647 891426.5232093263 893925.9525572724 896432.389938862 898945.8550035943 901466.3674560634 903993.9470561118 906528.613618986 909070.3870154906 911619.2871721458 914175.334071343 916738.5477515013 919308.9483072248 921886.5558894586 924471.390705649 927063.4730199015 929662.8231531383 932269.4614832586 934883.408445299 937504.6845315925 940133.3102919292 942769.306333718 945412.6933221479 948063.4919803509 950721.7230895628 953387.4074892879 956060.5660774591 958741.2198106066 961429.3897040186 964125.096831907 966828.3623275728 969539.2073835713 972257.6532518797 974983.721244062 977717.4327314354 980458.8091452414 983207.8719768105 985964.6427777322 988729.1431600227 991501.3947962954 994281.4194199304 997069.2388252458 999864.8748676664 . Here we initialize the total population to be 50, then set the growth factor as 1.00005 (.005 percent change). It will print the population every 56th day until it reaches one million. It multiplies the current population by the growth factor in each iteration, and increments the day count. When the day count reaches 56, it prints the current population and resets the day count to 0. . Note! This simulation assumes that the growth factor remains constant as time progresses, which may not be a realistic assumption in real-world scenarios. . import matplotlib.pyplot as plt # Define the initial population and growth rate population = 100 growth_rate = 0.05 # Define the number of years to simulate num_years = 50 # Create lists to store the population and year values populations = [population] years = [0] # Simulate population growth for the specified number of years for year in range(1, num_years+1): # Calculate the new population size new_population = population + (growth_rate * population) # Update the population and year lists populations.append(new_population) years.append(year) # Set the new population as the current population for the next iteration population = new_population # Plot the population growth over time plt.plot(years, populations) plt.xlabel(&#39;Year&#39;) plt.ylabel(&#39;Population&#39;) plt.title(&#39;Population Growth Simulation&#39;) plt.show() . If we create quantative data, we can plot it using the Matplotlib library. . Example on how simplification can cause bias . import random beak = [&quot;small-beak&quot;, &quot;long-beak&quot;, &quot;medium-beak&quot;], wing = [&quot;small-wings&quot;, &quot;large-wings&quot;, &quot;medium-wings&quot;], height = [&quot;short&quot;, &quot;tall&quot;,&quot;medium&quot;] naturaldisaster = [&quot;flood&quot;, &quot;drought&quot;, &quot;fire&quot;, &quot;hurricane&quot;, &quot;dustbowl&quot;] print(&quot;When a&quot; , random.choice(naturaldisaster) , &quot;hit&quot;, random.choice(height), &quot;birds died&quot;) . When a hurricane hit tall birds died . How does this simulation have bias? . There&#39;s no correlation between the properties of the birds and the natural disaster. . JS examples . Dice Roll Binary Coin Flip Card Pull . Hacks . Answer all questions and prompts in the notes (0.2) | Create a simulation Create a simulation that uses iteration and some form of data collection (list, dictionary...) (0.4) try creating quantative data and using the Matplotlib library to display said data | Comment and describe function of each parts | How does your simulation help solve/mimic a real world problem? | Is there any bias in your simulation? Meaning, are there any discrepancies between your program and the real event? | . | | Answer these simulation questions (0.3) | Bonus: take a real world event and make a pseudocode representation or pseudocode on a flowchart of how you would make a simulation for it (up to +0.1 bonus) | . import random rolls = [] # create an empty list to store the roll results for i in range(10): roll = random.randint(1, 6) # simulate rolling a die rolls.append(roll) # add the roll result to the list of rolls print(&quot;Results of 10 rolls:&quot;, rolls) print(&quot;Number of times each number was rolled:&quot;) for i in range(1, 7): count = rolls.count(i) # count how many times each number was rolled print(f&quot;{i}: {count}&quot;) . Results of 10 rolls: [6, 5, 5, 6, 6, 5, 1, 5, 4, 1] Number of times each number was rolled: 1: 2 2: 0 3: 0 4: 1 5: 4 6: 3 . Above code using matplotlib . import random import numpy as np import matplotlib.pyplot as plt rolls = [] # create an empty list to store the roll results for i in range(10000): roll = random.randint(1, 6) # simulate rolling a die rolls.append(roll) # add the roll result to the list of rolls # convert the list to a numpy array rolls_array = np.array(rolls) # calculate the frequency of each number rolled frequencies = np.zeros(6) for i in range(1, 7): count = np.sum(rolls_array == i) frequencies[i-1] = count / len(rolls_array) # plot a bar chart of the frequency data fig, ax = plt.subplots() ax.bar(range(1, 7), frequencies) ax.set_xlabel(&quot;Die Roll&quot;) ax.set_ylabel(&quot;Frequency&quot;) ax.set_title(&quot;Frequency of Die Rolls (n=10,000)&quot;) plt.show() . This simulation can be used to design and test games that involve dice rolls, such as board games or tabletop RPGs. By simulating many rolls and analyzing the results, game designers can ensure that the game mechanics are balanced and fair. There are biases in my simulation, the simulation assumes that the die is fair, meaning that each face of the die has an equal chance of being rolled. However, in reality, physical dice can have imperfections or be intentionally weighted, which can affect the probability of each face being rolled. . Answer to Simulation Questions . A &amp; B | A | A | D | B &amp; C | C |",
            "url": "https://dereksol.github.io/Tera/student/2023/04/25/P3M-Simulations.html",
            "relUrl": "/student/2023/04/25/P3M-Simulations.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "P3-M 4/21 Binary Overview",
            "content": "How to contact us . Join the &quot;coding&quot; channel on slack! That is the only place where we will be answering questions or sending announcements about lessons. If you have a question please contact us there. . How to join . Click on &quot;add channels&quot; below the list of channels | Click on &quot;browse channels&quot; | Search for &quot;coding&quot; | Click the green &quot;Join&quot; button on the right | . Learning Objectives . DAT-1.A: Representing Data with Bits . Basic Information . Bit is short for binary digit, and represents a value of either 0 or 1. A byte is 8 bits. | . | Sequences of bits are used to represent different things. Representing data with sequences of bits is called binary. | . | . Practice Questions: . How many bits are in 3 bytes? 24 bits . | What digital information can be represented by bits? Any digitial thing, can be represented by bits. . | Are bits an analog or digital form of storing data? What is the difference between the two? They are digital. The difference between analog and digital technologies is that in analog technology, information is translated into electric pulses of varying amplitude. In digital technology, translation of information is into binary format (zero or one) where each bit is representative of two distinct amplitudes. . | Examples . Boolean variables (true or false) are the easiest way to visualize binary. 0 = False | 1 = True | . | . import random def example(runs): # Repeat code for the amount of runs given while runs &gt; 0: # Assigns variable boolean to either True or False based on random binary number 0 or 1. boolean = False if random.randint(0, 1) == 0 else True # If the number was 1 (True), it prints &quot;awesome.&quot; if boolean: print(&quot;binary is awesome&quot;) # If the number was 2 (False), it prints &quot;cool.&quot; else: print(&quot;binary is cool&quot;) runs -= 1 # Change the parameter to how many times to run the function. example(10) . binary is cool binary is cool binary is awesome binary is cool binary is awesome binary is cool binary is awesome binary is cool binary is awesome binary is awesome . DAT-1.B: The Consequences of Using Bits to Represent Data . Basic Information . Integers are represented by a fixed number of bits, this limits the range of integer values. This limitation can result in __ or other errors. | Other programming languages allow for abstraction only limited by the computers memory. | Fixed number of bits are used to represent real numbers/limits | . Practice Questions: . What is the largest number can be represented by 5 bits? 31 . | One programing language can only use 16 bits to represent non-negative numbers, while a second language uses 56 bits to represent numbers. How many times as many unique numbers can be represented by the second language? 2^16 - 1 = 65,535 2^56 -1 = 72,057,594,037,927,935. The second language can store about 1,099,528,405,248 times more numbers than the first language. . | 5 bits are used to represent both positive and negative numbers, what is the largest number that can be represented by these bits? (hint: different thatn question 1) Signed 5 Bit integer: 31 Unsigned 5 bit integer: 15 . | Examples . import math def exponent(base, power): # Print the operation performed, turning the parameters into strings to properly concatenate with the symbols &quot;^&quot; and &quot;=&quot;. print(str(base) + &quot;^&quot; + str(power) + &quot; = &quot; + str(math.pow(base, power))) # How can function become a problem? (Hint: what happens if you set both base and power equal to high numbers?) exponent(5, 2) . 5^2 = 25.0 . DAT-1.C: Binary Math . Basic Information . Binary is Base 2, meaning each digit can only represent values of 0 and 1. | Decimal is Base 10, meaning eacht digit can represent values from 0 to 9. | Conversion between sequences of binary to decimal depend on how many binary numbers there are, their values and their positions. | . Practice Questions: . What values can each digit of a Base 5 system represent? The value a 5 digit based system can represent is 5^n depending on where it correlates to then the prior values can be added to each other to be able to get the total value of the number as for instance 001001 can be represent as (0 x 2^6) + (0 x 2^6) + (1 x 2^5) ... and how a similar concept can be used in a base 10 system we could do the exact same thing with a base 5 system. . | What base is Hexadecimal? What range of values can each digit of Hexadecimal represent? Hexadecimals are base 16. This can range from 0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f . | When using a base above 10, letters can be used to represent numbers past 9. These letters start from A and continue onwards. For example, the decimal number 10 is represented by the letter A in Hexadecimal. What letter would be used to represent the Base 10 number 23 in a Base 30 system? What about in a Base 50 system? In a base system above 10, letters are used to represent numbers past 9. To find the letter that represents a particular number in a given base system, we perform integer division and modulus operations. For example, to represent the number 23 in a base 30 system, we divide 23 by 30 and take the remainder, which is 23. The corresponding letter for the number 23 in base 30 is H, so 23 in base 30 is represented as the single digit H. Similarly, to represent the number 23 in a base 50 system, we divide 23 by 50 and take the remainder, which is 23. The corresponding letter for the number 23 in base 50 is X, so 23 in base 50 is represented as the single digit X. . | Examples . Using 6 bits, we can represent 64 numbers, from 0 to 63, as 2^6 = 64. | The numbers in a sequence of binary go from right to left, increasing by powers of two from 0 to the total amount of bits. The whole number represented is the sum of these bits. For example: 111111 | 2^5 + 2^4 + 2^3 + 2^2 + 2^1 + 2^0 | 32 + 16 + 8 + 4 + 2 + 1 | 63 | | Fill in the blanks (convert to decimal) . 001010 = 10 | 11100010 = 226 | 10 = 2 | | Fill in the blanks (convert to binary) . 12 = 1100 | 35 = 100011 | 256 = 100000000 | | . Hacks &amp; Grading (Due SUNDAY NIGHT 4/23) . Complete all of the popcorn hacks (Fill in the blanks + run code cells and interact + Answer ALL questions) [0.3 or nothing] | Create a program to conduct basic mathematical operations with binary sequences (addition, subtraction, multiplication, division) [0.6 or nothing] For bonus, program must be able to conduct mathematical operations on binary sequences of varying bits (for example: 101 + 1001 would return decimal 14.) [0.1 or nothing] | . | . def binary_addition(bin1, bin2): &quot;&quot;&quot;Performs binary addition on two binary sequences.&quot;&quot;&quot; carry = 0 result = &#39;&#39; while bin1 or bin2 or carry: sum = carry if bin1: sum += int(bin1[-1]) bin1 = bin1[:-1] if bin2: sum += int(bin2[-1]) bin2 = bin2[:-1] carry, bit = divmod(sum, 2) result = str(bit) + result return result def binary_subtraction(bin1, bin2): &quot;&quot;&quot;Performs binary subtraction on two binary sequences.&quot;&quot;&quot; if len(bin1) &lt; len(bin2): bin1, bin2 = bin2, bin1 bin2 = bin2.zfill(len(bin1)) result = &#39;&#39; borrow = 0 for i in range(len(bin1) - 1, -1, -1): diff = int(bin1[i]) - int(bin2[i]) - borrow borrow = 0 if diff &lt; 0: diff += 2 borrow = 1 result = str(diff) + result return result.lstrip(&#39;0&#39;) or &#39;0&#39; def binary_multiplication(bin1, bin2): &quot;&quot;&quot;Performs binary multiplication on two binary sequences.&quot;&quot;&quot; product = &#39;0&#39; for i, bit1 in enumerate(reversed(bin1)): if bit1 == &#39;1&#39;: partial_product = bin2 + &#39;0&#39; * i product = binary_addition(product, partial_product) return product def binary_division(dividend, divisor): &quot;&quot;&quot;Performs binary division on two binary sequences.&quot;&quot;&quot; if int(divisor, 2) == 0: raise ZeroDivisionError(&quot;division by zero&quot;) quotient = &#39;&#39; remainder = &#39;&#39; for bit in dividend: remainder += bit if len(remainder) &lt; len(divisor): quotient += &#39;0&#39; continue while int(remainder, 2) &gt;= int(divisor, 2): quotient += &#39;1&#39; remainder = binary_subtraction(remainder, divisor) if not quotient: quotient = &#39;0&#39; return quotient.lstrip(&#39;0&#39;) or &#39;0&#39;, remainder.lstrip(&#39;0&#39;) or &#39;0&#39; # Take input from the user binary1 = input(&quot;Enter the first binary sequence: &quot;) binary2 = input(&quot;Enter the second binary sequence: &quot;) # Perform addition and display the result result_addition = binary_addition(binary1, binary2) print(&quot;Addition of&quot;, binary1, &quot;and&quot;, binary2, &quot;is:&quot;, result_addition) # Perform subtraction and display the result result_subtraction = binary_subtraction(binary1, binary2) print(&quot;Subtraction of&quot;, binary1, &quot;and&quot;, binary2, &quot;is:&quot;, result_subtraction) # Perform multiplication and display the result result_multiplication = binary_multiplication(binary1, binary2) print(&quot;Multiplication of&quot;, binary1, &quot;and&quot;, binary2, &quot;is:&quot;, result_multiplication) # Perform division and display the result result_division, remainder = binary_division(binary1, binary2) print(&quot;Division of&quot;, binary1, &quot;and&quot;, binary2, &quot;is:&quot;, result_division, &quot;with remainder:&quot;, remainder) . Addition of 101 and 111 is: 1100 Subtraction of 101 and 111 is: 110 Multiplication of 101 and 111 is: 100011 Division of 101 and 111 is: 0 with remainder: 101 .",
            "url": "https://dereksol.github.io/Tera/student/2023/04/21/P3M-BinaryLesson.html",
            "relUrl": "/student/2023/04/21/P3M-BinaryLesson.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: | Memory in GB: | Storage in GB: | OS: | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://dereksol.github.io/Tera/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "MCQ Test 4 Corrections",
            "content": "Test Corrections . . Question 6 I wasn’t to sure how packets were transmitted over the Internet so I took an educated guess. After going over the answer, I realized that each packet contains data to be transmitted, along with metadata containing information used for routing the data, so that is the right answer. . Question 23 the example of where not searching for patterns is needed to produce useful information is a high school analyzing student grades to identify the students with the top ten highest grade point averages. This is because a single high school’s list of student grades is not considered a large set of data. Furthermore, identifying 10 students with the highest grade point averages is not an example of finding patterns. . Question 24 The longest amount of time when scaling up is actually sorting data instead of searching data. I assumed that searching data was going to take the longest because it had the largest numbers at its starting point. However, sorting data is correct because of how it will scale plus it is sorting the data. . Question 26 The true statement about data compression is there are trade-offs involved in choosing a compression technique for storing and transmitting data. I wasn’t sure what was true and took my best guess at it. . Question 39 1 3 2 4 cannot be executed from this code segment because in the second iteration of the loop, i is equal to 2. So, RANDOM(1, i) returns either 1 or 2. So, the output 1 3 2 4 is not possible. . Question 46 B is the correct code segment for drawing the figure instead of C because the code segment draws the three line segments shown in the figure. The first call to drawLine draws a line segment with endpoints (1, 5) and (6, 5). The second call to drawLine draws a line segment with endpoints (1, 5) and (6, 7). The third call to drawLine draws a line segment with endpoints (1, 5) and (6, 3). . Question 48 The value of x is approximately equal to the value of y because the binary search algorithm starts at the middle of the list and repeatedly eliminates half of the elements until the desired value is found or all elements have been eliminated. . Test Correction Reflection . Overall, I believe I am doing steady and well on the tests, and this is usually the score I average. There were a few questions that I was a little confused on because I didn’t know certain vocabulary, but after looking at the explanations and correct answers I was able to figure out why that was the correct answer. For future tests, I would say to really understand any vocabulary or definitions given to me in class and in tech talks because they do appear frequently in the practice tests that are given. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2025/2023/04/02/MCQ4corrections.html",
            "relUrl": "/apcsp%20week%2025/2023/04/02/MCQ4corrections.html",
            "date": " • Apr 2, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is a one. | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # there is the output of 1, 2, 3 # there are no duplicates # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # I think sets are in the same tech talk as Hashmaps because hashmaps, hashtables, and sets all don&#39;t have duplicate values # . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], # genre has a list &quot;tracks&quot;: { #tracks has a dictionary 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # square brackets is a list, curly brackets is a dictionary both are present within the genre and tracks # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . #lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] lover_album[&quot;producer&quot;] = set ([&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]) # What can you change to make sure there are no duplicate producers? # make it a set # sets make it so that no duplicates will show # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: {&#39;Louis Bell&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Frank Dukes&#39;, &#39;Taylor Swift&#39;}} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # change tracks to genre, then put the new name &quot;electropop&quot; in the curley brackets instead of &quot;All Of The Girls You Loved Before&quot; # # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: {&#39;Louis Bell&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Frank Dukes&#39;, &#39;Taylor Swift&#39;}} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: {&#39;Louis Bell&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Frank Dukes&#39;, &#39;Taylor Swift&#39;} . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() . [&#39;Pop&#39;, &#39;Synth-pop&#39;] . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary . | For Mr. Yeung&#39;s class: Justify your favorite Taylor Swift song, answer may effect seed . | . giveortake_album = { &quot;title&quot;: &quot;Give or Take&quot;, &quot;artist&quot;: &quot;Giveon&quot;, &quot;year&quot;: 2022, &quot;genre&quot;: [&quot;R&amp;B&quot;, &quot;Pop&quot;], # genre has a list &quot;tracks&quot;: { #tracks has a dictionary 1: &quot;Let Me Go&quot;, 2: &quot;Scarred&quot;, 3: &quot;Dec 11th&quot;, 4: &quot;This Will Do&quot;, 5: &quot;Get to You&quot;, 6: &quot;Tryna Be&quot;, 7: &quot;Make You Mine&quot;, 8: &quot;July 16th&quot;, 9: &quot;For Tonight&quot;, 10: &quot;Lost Me&quot;, 11: &quot;Lie Again&quot;, 12: &quot;Another Heartbreak&quot;, 13: &quot;At Least We Tried&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Remind Me&quot;, 16: &quot;Unholy Matrimony&quot;, } } # Printing the dictionary print(giveortake_album) . {&#39;title&#39;: &#39;Give or Take&#39;, &#39;artist&#39;: &#39;Giveon&#39;, &#39;year&#39;: 2022, &#39;genre&#39;: [&#39;R&amp;B&#39;, &#39;Pop&#39;], &#39;tracks&#39;: {1: &#39;Let Me Go&#39;, 2: &#39;Scarred&#39;, 3: &#39;Dec 11th&#39;, 4: &#39;This Will Do&#39;, 5: &#39;Get to You&#39;, 6: &#39;Tryna Be&#39;, 7: &#39;Make You Mine&#39;, 8: &#39;July 16th&#39;, 9: &#39;For Tonight&#39;, 10: &#39;Lost Me&#39;, 11: &#39;Lie Again&#39;, 12: &#39;Another Heartbreak&#39;, 13: &#39;At Least We Tried&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Remind Me&#39;, 16: &#39;Unholy Matrimony&#39;}} . print(giveortake_album.get(&#39;tracks&#39;)) . {1: &#39;Let Me Go&#39;, 2: &#39;Scarred&#39;, 3: &#39;Dec 11th&#39;, 4: &#39;This Will Do&#39;, 5: &#39;Get to You&#39;, 6: &#39;Tryna Be&#39;, 7: &#39;Make You Mine&#39;, 8: &#39;July 16th&#39;, 9: &#39;For Tonight&#39;, 10: &#39;Lost Me&#39;, 11: &#39;Lie Again&#39;, 12: &#39;Another Heartbreak&#39;, 13: &#39;At Least We Tried&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Remind Me&#39;, 16: &#39;Unholy Matrimony&#39;} . print(giveortake_album.get(&#39;tracks&#39;)[11]) . Lie Again . giveortake_album[&quot;producer&quot;] = set ([&#39;Cardo Got Wings, Boi-1da, Sevn Thomas, Jahaan Sweet, Rogét Chahayed, Don Mills, Giveon&#39;]) print(giveortake_album) . {&#39;title&#39;: &#39;Give or Take&#39;, &#39;artist&#39;: &#39;Giveon&#39;, &#39;year&#39;: 2022, &#39;genre&#39;: [&#39;R&amp;B&#39;, &#39;Pop&#39;], &#39;tracks&#39;: {1: &#39;Let Me Go&#39;, 2: &#39;Scarred&#39;, 3: &#39;Dec 11th&#39;, 4: &#39;This Will Do&#39;, 5: &#39;Get to You&#39;, 6: &#39;Tryna Be&#39;, 7: &#39;Make You Mine&#39;, 8: &#39;July 16th&#39;, 9: &#39;For Tonight&#39;, 10: &#39;Lost Me&#39;, 11: &#39;Lie Again&#39;, 12: &#39;Another Heartbreak&#39;, 13: &#39;At Least We Tried&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Remind Me&#39;, 16: &#39;Unholy Matrimony&#39;}, &#39;producer&#39;: {&#39;Cardo Got Wings, Boi-1da, Sevn Thomas, Jahaan Sweet, Rogét Chahayed, Don Mills, Giveon&#39;}} . giveortake_album[&quot;tracks&quot;].update({17: &quot;Heartbreak Anniversary&quot;}) print(giveortake_album) . {&#39;title&#39;: &#39;Give or Take&#39;, &#39;artist&#39;: &#39;Giveon&#39;, &#39;year&#39;: 2022, &#39;genre&#39;: [&#39;R&amp;B&#39;, &#39;Pop&#39;], &#39;tracks&#39;: {1: &#39;Let Me Go&#39;, 2: &#39;Scarred&#39;, 3: &#39;Dec 11th&#39;, 4: &#39;This Will Do&#39;, 5: &#39;Get to You&#39;, 6: &#39;Tryna Be&#39;, 7: &#39;Make You Mine&#39;, 8: &#39;July 16th&#39;, 9: &#39;For Tonight&#39;, 10: &#39;Lost Me&#39;, 11: &#39;Lie Again&#39;, 12: &#39;Another Heartbreak&#39;, 13: &#39;At Least We Tried&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Remind Me&#39;, 16: &#39;Unholy Matrimony&#39;, 17: &#39;Heartbreak Anniversary&#39;}, &#39;producer&#39;: {&#39;Cardo Got Wings, Boi-1da, Sevn Thomas, Jahaan Sweet, Rogét Chahayed, Don Mills, Giveon&#39;}} . for k,v in giveortake_album.items(): print(str(k) + &quot;: &quot; + str(v)) . title: Give or Take artist: Giveon year: 2022 genre: [&#39;R&amp;B&#39;, &#39;Pop&#39;] tracks: {1: &#39;Let Me Go&#39;, 2: &#39;Scarred&#39;, 3: &#39;Dec 11th&#39;, 4: &#39;This Will Do&#39;, 5: &#39;Get to You&#39;, 6: &#39;Tryna Be&#39;, 7: &#39;Make You Mine&#39;, 8: &#39;July 16th&#39;, 9: &#39;For Tonight&#39;, 10: &#39;Lost Me&#39;, 11: &#39;Lie Again&#39;, 12: &#39;Another Heartbreak&#39;, 13: &#39;At Least We Tried&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Remind Me&#39;, 16: &#39;Unholy Matrimony&#39;, 17: &#39;Heartbreak Anniversary&#39;} producer: {&#39;Cardo Got Wings, Boi-1da, Sevn Thomas, Jahaan Sweet, Rogét Chahayed, Don Mills, Giveon&#39;} . def search(): search = input(&quot;What would you like to know about the album?&quot;) if giveortake_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(giveortake_album.get(search.lower())) search() . {&#39;Cardo Got Wings, Boi-1da, Sevn Thomas, Jahaan Sweet, Rogét Chahayed, Don Mills, Giveon&#39;} .",
            "url": "https://dereksol.github.io/Tera/2023/03/29/DS-hashmaps.html",
            "relUrl": "/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 4.3a Parallel Computing",
            "content": "Analyzing Parallel Computing . Once again we will use image lab, this time to review Parallel Computing. . Change baseWidth in this line in code to increase computation requirements:def process_image(image, baseWidth=512): For instance 320, 512, 1024, 2048, 4096.- Compare Sequential and Parallel computing code and time to achieve outputs | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as PIL Image is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Scale to baseWidth def scale_image(img, baseWidth): scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Convert pixels to Grey Scale def grey_pixel(pixel): average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: return( (average, average, average, pixel[3]) ) # PNG format else: return( (average, average, average) ) # Convert pixels to Red Scale def red_pixel(pixel): if len(pixel) &gt; 3: return( (pixel[0], 0, 0, pixel[3]) ) # PNG format else: return( (pixel[0], 0, 0) ) # Convert pixels to Red Scale def green_pixel(pixel): if len(pixel) &gt; 3: return( (0, pixel[1], 0, pixel[3]) ) # PNG format else: return( (0, pixel[1], 0) ) # Convert pixels to Red Scale def blue_pixel(pixel): if len(pixel) &gt; 3: return( (0, 0, pixel[2], pixel[3]) ) # PNG format else: return( (0, 0, pixel[2]) ) # Set Properties of Image, Scale, and convert to Base64 def image_management(image, baseWidth): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img, baseWidth) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;numpy&#39;] = np.array(img.getdata()) # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Grey HTML # each pixel in numpy array is turned to grey # then resulting list, using List Comprehension, is put back into img img.putdata([grey_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Red HTML img.putdata([red_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Green HTML img.putdata([green_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Blue HTML img.putdata([blue_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) def process_image(image, baseWidth=2048): image_management(image, baseWidth) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- images --&quot;) display(HTML(image[&#39;html&#39;])) display(HTML(image[&#39;html_grey&#39;])) display(HTML(image[&#39;html_red&#39;])) display(HTML(image[&#39;html_green&#39;])) display(HTML(image[&#39;html_blue&#39;])) . Sequential Processing . The for loop iterates over the list of images and processes them one at a time, in order. . if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Sequential Processing for image in images: process_image(image) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (2048, 2048) -- images -- . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (2048, 1497) -- images -- . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (2048, 1536) -- images -- . . Parallel Computing . In parallel or concurrent mode, the ThreadPoolExecutor is used to submit each image to a separate worker thread, allowing multiple images to be processed simultaneously. Multithreading allows multiple concurrent tasks of a process at the same time. The executor.map() method is used to apply the process_image function to each image in the images list. . The order in which the images are processed is not guaranteed, as threads are performed simultaneously. | . import concurrent.futures # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Parallel Processsing # executor allocates threads, it considers core execution capability of machine with concurrent.futures.ThreadPoolExecutor() as executor: executor.map(process_image, images) # order is not predictable print() . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (2048, 1536) -- images -- . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (2048, 1497) -- images -- . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (2048, 2048) -- images -- . . Observing Parallel Computing and Threads . You can observe Processes, CPU Percentage, and Threads with Tools on your machine. Common tools to monitor performance are Activity Monitor on MacOS or Task Manager on Windows. . This example is using top launched in VSCode Terminal. PID is Process ID. | COMMAND is task running on machine. Python is activated when running this Jupyter notebook. | #TH is number of threads. This increases from 15/1 to 18/1 on my machine when running python parallel computing example. | . | . Hacks . AP Classroom. Provide answers and thoughts on theoritical question form college board Video in section 4.3. They start at about the 9 minute mark. . Example 1 The minimum time to execute all three processes when the two processors are run parallel is 50 seconds. This is because if you put y and z in one processor, it will be 40, but it wil be done and you will still have to wait for x 50 seconds to be done. | . Example 2 The difference in execution time between running the two processes in parallel in place of running them one after the other on a single processor is running the the two processes one after the other would be; 25 + 45 = 70 seconds. Running both parallel will yield a minimum time of 45 seconds. 70-45 = 25 seconds. | . Data Structures. Build a List Comprehension example . list = [calc(item) for item in items] | . nba_players = [&quot;Stephen Curry&quot;, &quot;Klay Thompson&quot;, &quot;Kevin Durant&quot;, &quot;James Harden&quot;, &quot;Damian Lillard&quot;] three_point_stats = [41.1, 42.0, 38.6, 36.3, 36.8] # Three-point shooting percentage for each player nba_player_stats = [f&quot;{player} shoots {stat}% from three-point range.&quot; for player, stat in zip(nba_players, three_point_stats)] print(nba_player_stats) . [&#39;Stephen Curry shoots 41.1% from three-point range.&#39;, &#39;Klay Thompson shoots 42.0% from three-point range.&#39;, &#39;Kevin Durant shoots 38.6% from three-point range.&#39;, &#39;James Harden shoots 36.3% from three-point range.&#39;, &#39;Damian Lillard shoots 36.8% from three-point range.&#39;] .",
            "url": "https://dereksol.github.io/Tera/2023/03/29/AP-unit4-3a-parallel-computing.html",
            "relUrl": "/2023/03/29/AP-unit4-3a-parallel-computing.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Extra Credit Tri 3 Blog",
            "content": "Notes . John and Ashley, both from San Marcos, one from Comp Sci(John), other in physics(Ashley) | She works in a quantum computing group | Failed a bunch of classes, but still pushed to show that it doesn’t define her, doesn’t define the love she has for what she works on | John was at Palomar for about 3 years, transferred to San Marcos right when pandemic struck | Computer science can go in many different fields, very versatile, cannot run away from computer science, always somewhat tied to everything | Many different options and pathways for computer science when going to San Marcos | Lot of events to attend at San Marcos to see if you have interest in certain majors | Internships, going to local events(networking), great way to get internships, also can join clubs | Don’t really have to be a student there to get internships | Tips for internships, try to avoid ones that are unpaid, a lot of us may feel under qualified, just do it, worst they say is no | Lot of programs to better interest at Cal State San Marcos, summer scholar program, 10 week program to do research with an advisor, Ashley really enjoyed it an sparked interest in her, also get paid for it Scholarships &amp; Grants . | Grant is government funded money to get to school, scholarship is private funded money | Scholarship is really on you, you can get it for pretty much anything, grades matter, kind of a socioeconomic status thing | Loan complicated, don’t get a loan if you don’t need to | subsidized loan is part of the government, help you so you don’t go deep into the loan, don’t have to worry about all the interest in that loan until 6 month grace period after college | unsubsidized loan starts interest after the semester Life after College . | Teacher credential program available at San Marcos | get aid to go to graduate school | if going for a Ph. D. you should be getting paid to stay that long | . Reflection/Takeaways . After this class presentation John and Ashley gave, this experienced has really enlightened me on the next steps of computer science that is outside of highschool, and next steps moving onto college in general. It was very powerful to hear that they said computer science will apply to literally any major or career you choose in some type of way, which is what Mr. Mort has been preaching as well. What I really learned a lot was about internships and how to know which ones is good for you, preferably the paid ones, and that even if you don’t feel like your prepared for it, just do it anyways, experience is the most important part. As a senior, I can relate to the scholarships and going to college part the most as it is only a couple more months until that becomes reality. I realized how much Cal State San Marcos has to offer, and I know that there are other great schools out there like that where I can do the same things. Even though I don’t see myself pursuing a computer science major, I know that it is still useful to know about it because we live it, and that I can apply the many things I learn in this class and about computer science to my career that I choose. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2028/2023/03/28/xtracredtri3.html",
            "relUrl": "/apcsp%20week%2028/2023/03/28/xtracredtri3.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "MCQ Big Idea 2 Quiz Correction Blog",
            "content": "Test Corrections . . Question 21. The answer I choose were options B and C, but the correct answer was options B and D. I realized that D was a better answer than C for justifying the steps of the entry because Sorting by year will sort the spreadsheet on column C from least to greatest. Filtering by year will remove any entries with unknown years. Filtering by photographer will remove any entries with unknown photographers. Since the order of the entries is not affected by the filters, the photograph with the lowest year value will be in the first row of the spreadsheet. This is exactly what the desired entry is asking for. . Test Correction Reflection . Overall, I think I did really well compared to other tests. I worked well with my whole team to really understand and go over each question. I believe that I am starting to understand more and more about Computer Science. One thing I think I really struggle on though is having to select multiple answers in the question, as I find those questions to be more tricky and confusing for me. But overall I definitely see improvement from past tests. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2025/2023/03/17/TQBigIdea2.html",
            "relUrl": "/apcsp%20week%2025/2023/03/17/TQBigIdea2.html",
            "date": " • Mar 17, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . A database schema defines how data is organized within a relational database. . What is the purpose of identity Column in SQL database? | . identify columns is used so that key values can be generated. That way each value is generated based on its place. . What is the purpose of a primary key in SQL database? | . the purpose of primary key is to extract or archive data from a table that is visited more than once during a process. . What are the Data Types in SQL table? | . Some data types in SQL Table is exact numerics, approximate numerics, date and time, and character strings. . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? | . Represents an open database that you connect to on your machine that you can have access to with many attributes. . Same for cursor object? | . After reading what it is on Google, I believe that it process each row that are queued in the database, and thats how it reads it in order to display the results. . Look at conn object and cursor object in VSCode debugger. What attributes are in the object? | . Attributes in conn are create, menu, read, schema, database, file, ipykernel, os, sqlite3 and sys. Attributes in cursor are conn, create, meny, read, schema, database, file, ipykernel, os, sqlite3, sys. . Is &quot;results&quot; an object? How do you know? | . Results is an object because an object has functions and data, which is what is shown when we debug it and look at the results, there are special variables, function variables, etc. . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$CqD19MZWsbZf2zGF$c23bf10dd0e60b227a512dcf273a7076b8dd6d816b56894bb690b5e72263e31a&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$IuLcyMF3y7m4xa8E$d8484c665e7337daffd04c0b4533bc57a2efc972bc993dd4a980e9d56dd19cf3&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$aVUubnVDmlg4iBWz$84d322078519c675cbb0bc662cf5070153496343a6787523ee7e23b9f7d5c595&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$3rLCOIIYzeObSdu8$cd1a6933dfbe661940f179294e2af2f7ceff8835399059c66bbb867135304c18&#39;, &#39;2023-03-15&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$up7hIpTlbPcSKN2Y$e266a0d53e6b687e2430f446a4312b81242dee77b0efaf55b069420d903bae8c&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$zkyNMKfGN045tK7t$5cc1607e7e55468bf6b9bc2ae5720facf9412a65e1621a503db533d6d495d17c&#39;, &#39;1921-10-21&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compore create() in both SQL lessons. What is better or worse in the two implementations? | . The 2.4a lesson does create by has try and excepts for each one individually, while this one lists all the things being created then has the try and except functions after. Im not to sure what is better or worse, but I think that off of looks that this cell below seems better when trying to create a lot of things at once. . Explain purpose of SQL INSERT. Is this the same as User init? | . The purpose fo SQL insert is to add new data into the database, I think it is because user init initializes the data meaning it assigns an initial value for a variable or data object. However I think init should be used to make the dataset then insert should be just strictly for adding new data in. . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new user record tera has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? | . I think that hacked part helps towards encrypting the password so it is not as easily accessible. . Explain try/except, when would except occur? | . try would happen when a user wants to reset or make new password, I think except would occur if the problem was not that no user id has been found or row for password was changed, bur not entirely sure exactly what the problem would be for this to happen. . What code seems to be repeated in each of these examples to point, why is it repeated? | . It seems to be close cursor or connection, I think it is done so that it finishes processing, therefore results can be displayed. . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? | . It is not dangerous because deleting is part of the process of data if things are put incorrectly, and you can always input new data anyways. . In the print statemements, what is the &quot;f&quot; and what does {uid} do? | . I think f find the userid, the bracket uid displays that certain uid found . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? | . menu repeats because it is the main thing that connects you to CRUD or S. . Could you refactor this menu? Make it work with a List? | . I am not entirely sure, but it does sound possible. . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | . Procedural abstraction is definitely seen in this code because we are giving names to things in the program do a procedure with it to print a certain output that we want. . In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | . | . Data Abstraction is definitely seen in both lectures as we continue to simplify code so that it is easier for us to run and less tedious of a process to write. . Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . Reference... sqlite documentation .",
            "url": "https://dereksol.github.io/Tera/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "2.4 HACKS",
            "content": "Creating the Table . import sqlite3 def create_connection(db): connection = None try: connection = sqlite3.connect(db) return connection except Error as e: print(e) return connection def create_table(connection, createTblSql): try: cursor = connection.cursor() cursor.execute(createTblSql) except Error as e: print(e) def main(): database = &#39;instance/movies.db&#39; createTblSql = &quot;&quot;&quot; CREATE TABLE IF NOT EXISTS movies ( _id integer PRIMARY KEY, _title text NOT NULL, _company text NOT NULL, _character text NOT NULL, _rottentomatoes text NOT NULL ); &quot;&quot;&quot; connection = create_connection(database) # create animated movies table if connection is not None: create_table(connection, createTblSql) else: print(&#39;Connection Error&#39;) if __name__ == &#39;__main__&#39;: main() . Create . def create(): database = &#39;instance/movies.db&#39; title = input(&quot;Enter the movie title&quot;) company = input(&quot;Enter movie company name&quot;) character = input(&quot;Enter main character name&quot;) rottentomatoes = input(&quot;Enter rottentomatoes of movie&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Execute SQL to insert record in to db cursor.execute(&quot;INSERT INTO movies (_title, _company, _character, _rottentomatoes) VALUES (?, ?, ?, ?)&quot;, (title, company, character, rottentomatoes)) # Commit the changes connection.commit() print(f&quot;New movie with {title} is added.&quot;) except sqlite3.Error as error: print(&quot;Error while inserting record&quot;, error) # Closing cursor and connection cursor.close() connection.close() create() . New movie with Snow White and the Seven Dwarfs is added. . Read . def read(): database = &#39;instance/movies.db&#39; # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() # Fetch all the records from movies table results = cursor.execute(&#39;SELECT * FROM movies&#39;).fetchall() if len(results) != 0: for row in results: print(row) else: print(&quot;No movies&quot;) # Closing cursor and connection cursor.close() connection.close() read() . (1, &#39;Moana&#39;, &#39;Disney&#39;, &#39;Moana&#39;, &#39;95%&#39;) (2, &#39;Kung Fu Panda&#39;, &#39;Dreamworks&#39;, &#39;Po&#39;, &#39;87%&#39;) (3, &#39;Inside Out&#39;, &#39;Disney&#39;, &#39;Joy&#39;, &#39;98%&#39;) (4, &#39;Coco&#39;, &#39;Disney&#39;, &#39;Miguel&#39;, &#39;97%&#39;) (5, &#39;Snow White and the Seven Dwarfs&#39;, &#39;Disney&#39;, &#39;Snow White&#39;, &#39;97&#39;) . Update . import sqlite3 # updating rottentomatoes def update(): database = &#39;instance/movies.db&#39; movieId = input(&quot;Enter a movie id to update the rottentomatoes&quot;) rottentomatoes = input(&quot;Enter new rottentomatoes&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: # Updating rottentomatoes for the movie cursor.execute(&quot;UPDATE movies SET _rottentomatoes = ? WHERE _id = ?&quot;, (rottentomatoes, movieId)) if cursor.rowcount != 0: print(f&quot;rottentomatoes for the movie is updated to {rottentomatoes}&quot;) connection.commit() else: print(f&quot;movie not found&quot;) except sqlite3.Error as error: print(&quot;Error occurred&quot;, error) # Closing cursor and connection cursor.close() connection.close() update() . rottentomatoes for the movie is updated to 95% . Delete . import sqlite3 def delete(): database = &#39;instance/movies.db&#39; movieId = input(&quot;Enter movie id to delete&quot;) # Connecting to the database, create cursor to execute the SQL command connection = sqlite3.connect(database) cursor = connection.cursor() try: cursor.execute(&quot;DELETE FROM movies WHERE _id = ?&quot;, (movieId,)) if cursor.rowcount == 0: print(f&quot;{movieId} does not exist&quot;) else: print(f&quot;Successfully deleted movie with id {movieId}&quot;) connection.commit() except sqlite3.Error as error: print(&quot;Error occurred: &quot;, error) # Closing cursor and connection cursor.close() connection.close() delete() . Successfully deleted movie with id 2 . Menu . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (1, &#39;Moana&#39;, &#39;Disney&#39;, &#39;Moana&#39;, &#39;95%&#39;) (2, &#39;Kung Fu Panda&#39;, &#39;Dreamworks&#39;, &#39;Po&#39;, &#39;87%&#39;) (3, &#39;Inside Out&#39;, &#39;Disney&#39;, &#39;Joy&#39;, &#39;98%&#39;) (4, &#39;Coco&#39;, &#39;Disney&#39;, &#39;Miguel&#39;, &#39;97%&#39;) (5, &#39;Snow White and the Seven Dwarfs&#39;, &#39;Disney&#39;, &#39;Snow White&#39;, &#39;97%&#39;) .",
            "url": "https://dereksol.github.io/Tera/2023/03/14/Databasehacks.html",
            "relUrl": "/2023/03/14/Databasehacks.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object, we have used this for our backend and API for our projects | SQLAlchemy db object We have used this for tables and to store data | | . Purpose - purpose in a program means to solve a problem or to pursue an interest through creative expression . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User | db.Model inheritance | init method | @property, @&lt;column&gt;.setter | create, read, update, delete methods | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): # class definition is often called a template, template definition for the property, properties that we want to have, db.Model - way you inherit users in your db Model __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): #init method works automatically when you prefix something, receives parameters and initializes attributes inside of our class, template is just code, an object shows up in our debugger. self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Notes and Comments about the following terms in the code . Class User: class definition is often called a template, template definition for the property, properties that we want to have, | db.model: way you inherit users in your db Model | init: method works automatically when you prefix something, receives parameters and initializes attributes inside of our class, template is just code, an object shows up in our debugger. | Setter and getters allows you to change the values of attributes inside your object, or retrieve. Getter retrieve and setters changes the value that was initialize. | Create, Read, Update, Delete, common method for databases, methods for them to help us interact with data in our object and perform the CRUD | . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object | | . db Object is organized in a structured manner. Create All tables creates the table. . User Object Constructors | User object constructors ensures model users are consistent and be used various of times. . Try / Except | This accounts for error. . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid toby, or error. Records exist uid niko, or error. Records exist uid lex, or error. Records exist uid whit, or error. Records exist uid indi, or error. Records exist uid raven, or error. . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by | | . filters with the parameter, parameter is uid, so filters by username ids . 2. user.password . Checks if password is correct, if yes, returns true, if not, returns false . ORM(Object Relational Model) - in SQLAlchemy, ORM on top of the python that works with databases . Credentials check, query for the username and password . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except | User find by uid finds user by their usernames, checks through usernames until matches the same one input, if not, it passes or keeps going . user = User(...) | This initializes the user object before date, getting the name, uid, and password first . user.dob and try/except | enter user&#39;s date of birth, looks for one that matches with the try function, if not, goes to except with keeps going through all, if none can be found then it prints invalid date . user.create() and try/except | Creates a new user for the database, if try works then prints new user was created, except will happen if error occurred while creating new user . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | this is extracting all users from database and turns them into JSON, the user query all queues all users to read them. . json_ready assignment, google List Comprehension | Believe that it comprehends each user reading it, then adding it to the list. . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-14-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://dereksol.github.io/Tera/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) #class notes # df stands for data frame #nil is common term, means nothing #nil is a string but the rest of the numbers are number # print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) #printing the column print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390, 100], &quot;duration&quot;: [50, 40, 45, 60] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;, &quot;day4&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 3 100 60 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 day4 100 60 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . #gives analytics on the data itself print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 4 entries, day1 to day4 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 4 non-null int64 1 duration 4 non-null int64 dtypes: int64(2) memory usage: 268.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7705882352941177 LogisticRegression Accuracy: 0.788235294117647 . /Users/johnmortensen/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( . import pandas as pd #read csv and sort &#39;Name&#39; largest to smallest df = pd.read_csv(&#39;files/nba.csv&#39;).sort_values(by=[&#39;Name&#39;], ascending=False) print(df.head(10)) . Name Team Number Position Age 237 Zaza Pachulia Dallas Mavericks 27.0 C 32.0 271 Zach Randolph Memphis Grizzlies 50.0 PF 34.0 402 Zach LaVine Minnesota Timberwolves 8.0 PG 21.0 270 Xavier Munford Memphis Grizzlies 14.0 PG 24.0 386 Wilson Chandler Denver Nuggets 21.0 SF 29.0 25 Willie Reed Brooklyn Nets 33.0 PF 26.0 141 Willie Cauley-Stein Sacramento Kings 0.0 C 22.0 385 Will Barton Denver Nuggets 5.0 SF 25.0 233 Wesley Matthews Dallas Mavericks 23.0 SG 29.0 97 Wesley Johnson Los Angeles Clippers 33.0 SF 28.0 Height Weight College Salary 237 6-11 275.0 NaN 5200000.0 271 6-9 260.0 Michigan State 9638555.0 402 6-5 189.0 UCLA 2148360.0 270 6-3 180.0 Rhode Island NaN 386 6-8 225.0 DePaul 10449438.0 25 6-10 220.0 Saint Louis 947276.0 141 7-0 240.0 Kentucky 3398280.0 385 6-6 175.0 Memphis 3533333.0 233 6-5 220.0 Marquette 16407500.0 97 6-7 215.0 Syracuse 1100602.0 .",
            "url": "https://dereksol.github.io/Tera/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "MCQ Final Tri 2 Test Correction Blog",
            "content": "Test Corrections . Question 10. When reading this question, I looked at the first answer and thought immediately that this one was the greatest cybersecurity risk out of all. But then after looking over the answers, I realized that emailing your credit card to reserve a hotel can really risk the security of your credit, and would be the most cybersecurity risk out of all of them. . Question 27. I realized this was incorrect because the distance between two numbers is obtained by taking the absolute value of the difference between the two numbers, not by taking the sum of the absolute values of the two numbers. The correct one is subtracting num1 from num2 and store the result in the variable diff, then take the absolute value of it because it will give the difference as a positive number when done. . Question 28. I figure that what I got was wrong because the code segment will remove only the first 2 characters of oldString. The right one is A because in order to remove the first 2 characters of oldString, this code segment takes a substring starting at position 3. To remove the last 2 characters of oldString, the substring ends at the position that is 4 characters less than the length of oldString. The right pair for that is C also because the first statement removes the first 2 characters of oldString and assigns the result to tempString. The second statement removes the last 2 characters of tempString and assigns the result to newString. . Question 35. A is the better answer here because If scoreA is greater than both scoreB and scoreC (the first two IF clauses), then Team A wins. If scoreA is greater than scoreB but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. If scoreB is greater than scoreA (the outer ELSE clause) and scoreC (the IF clause in the outer ELSE), then Team B wins. If scoreB is greater than scoreA but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. Therefore, this would determine that assuming no two team gets the same number of questions right, it will display the team with highest number of questions correct. . Question 36. II and III will assign the correct letter grade to grade based on the value of the variable score. Going through the options, Code segment I does not work correctly because it is not possible for “C” to be the value of grade at the end of the code segment. Code segment II correctly assigns “A” when the numeric score is greater than 90, or “B” if the numeric score is not greater than 90 but is greater than or equal to 80, or “C” otherwise. Code segment III assigns “C” when the numeric score is less than 80, or “B” if the numeric score is not less than 80 but is less than or equal to 90, or “A” otherwise. . Question 39. I guessed for this because I was a little confused on how to determine where it goes in the function. After reading the correct answer, it makes sense it will go between line 6 and 7 because inserting this statement between lines 6 and 7 increases the value of count once each time the robot moves forward, which keeps an accurate count of the number of squares the robot visits. . Question 41. I did not know that in order for binary search to work, the list had to be sorted. That is something that I will now note and is the main reason why I got this question wrong. . Question 42. I thought that the list containing duplicate elements would effect the binary search because I was not familiar with why this list shouldn’t use binary search and what binary search really means. I learned that binary search works on lists that are sorted, so since the elements are not sorted, binary search would not be appropriated. . Question 47. The answer is spin random, 1-4 since A landing 10 should happen 25% of the time, as well as B landing on 5, and C or D is a total of 50% chance of landing on it. this function will ensure that these percentages are met. . Question 50. It is algorithm A and D and not B and D because B indicates that the algorithm does not run in a reasonable amount of time. However, for A, As the size of the list grows, the number of steps needed to sort the list grows at a linear rate, as the number of steps is equal to 10n for a list of size n, so the algorithm will run in a reasonable amount of time. . Test Corrections Reflection . Overall I thought the test was relatively easy to go through and answer to the best of my ability. I felt like I was pretty strong in answering most of the questions, but when it came to terms, definitions, and codes that I didn’t know or wasn’t really comfortable with, I tend to struggle. I feel like I definitely learned a lot from taking this test and their is a lot of things I still need to learn. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2025/2023/03/08/TQ2CollegeBoard.html",
            "relUrl": "/apcsp%20week%2025/2023/03/08/TQ2CollegeBoard.html",
            "date": " • Mar 8, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . My takeaway:Lossy data is useful in terms of recovering data. Data compression is like methods that can be done to make images smaller and more compressed. . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . My takeaway: These relate to data compression because when we resize an image based on its pixels, putting an image from 2048x1020 to 320x240 would be compressing the image into a smaller size on the screen, showing data compression. . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | . ls and cd are the main ones I use to access my files. . What are the command you use in Windows terminal to access files? | . I am on Mac, but if I was on Windows I would use wsl. . What are some of the major differences? . Even though they are both command line interfaces allowing users to interact with computer based commands, the major differences between terminal and Windows terminal is that Windows terminal gives more features and is more of an advanced user interface. . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | . path is a big deal with working with images, because path is the directory which will pull where the images come from. So simply if there is no path to get the images, the images won&#39;t be able to connect and pop up on your website. . How does the meta data source and label relate to Unit 5 topics? Meta data is data that provides information about other data, in Unit 5 and this class, we are in Data Structures 1. Everything that we are learning is pretty much relating to data, therefore all of our class will relate . | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? . | . IPython is an enhanced interactive Python shell that provides a more convenient and productive environment for interactive and exploratory computing. IPython can be used as a standalone application or as a kernel for Jupyter notebooks, which is a web-based interactive computational environment for creating and sharing documents that contain live code, equations, visualizations, and narrative text. . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Happy Face&quot;, &#39;file&#39;: &quot;happyface.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Binary is Base2, Hexadecimal is Base16, and Base64 is Base64, but without that special name. They are all bases, just different base numbers. . Translate first 3 letters of your name to Base64. First three letters of my name: Der | . d = 01100100 . e = 01100101 . r = 01110010 . der = ZGVy . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | . I have been a consumer of buffering when I use my internet at my house go through experiences when my devices lag. . From your consumer experience, what effects have you experienced from buffering? | . When I play Fortnite, and my parents are taking up all the WIFI and my game starts to lag, I get like 100 ping. . How do these effects apply to images? | . If it is a bigger picture, it takes up more space meaning that it will take more time to load, whereas a smaller picture would render much faster. This is similar to lagging in the sense that it is taking a longer time to process. . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | . Yes, its getting the images through the path, defining them, and formatting them to display as an output. . Describe Grey Scale algorithm in English or Pseudo code? | . Grey scale algorithm is converting an image from color to grey scale. The algorithm works by calculating the average value of the color channels for each pixel in the image and replacing the color value of that pixel with the calculated grey scale value. . Describe scale image? What is before and after on pixels in three images? | . Scale image is resizing an image whether that means increasing or decreasing its size. Depending on making image bigger or smaller, each pixel in the original image will be duplicated or removed. . Image 1(1000x1000), before scaling would be 1000 x 1000 pixels, after scaling could be 500 x 500 pixels, meaning each block of 4 pixels in the original image would produce 1 pixel in the scaled image. . Is scale image a type of compression? If so, line it up with College Board terms described? | . Scaling an image is not a compression because it does not involve removing any information from the image, it just changes it by duplicating or removing pixels. In College Board terms, scaling an image is considered a preprocessing step in image compression. Preprocessing is any steps taken to prepare the image data for compression. . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green-square-16.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds-impression.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image . - meta data -- Lassen Volcano Peter Carolin lassen-volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | . CollegeBoard Practice Problems for 2.3 . . Question 1 was &quot;Which of the following is an advantage of a lossless compression algorithm over a lossy compression algorithm?&quot; I choose B which was correct, and it was &quot;A lossless compression algorithm can guarantee reconstruction of original data, while a lossy compression algorithm cannot.&quot; This is the right answer because it is true that lossless can guarantee reconstruction of original data, but lossy compression can&#39;t. | . Question 2 was &quot;A user wants to save a data file on an online storage site. The user wants to reduce the size of the file, if possible, and wants to be able to completely restore the file to its original version. Which of the following actions best supports the user’s needs?&quot; I choose A which was correct, it said &quot;Compressing the file using a lossless compression algorithm before uploading it.&quot; This is the correct answer since lossless compression allows reconstruction of the original data and reducing the size of the data. | . Question 3 was &quot;A programmer is developing software for a social media platform. The programmer is planning to use compression when users send attachments to other users. Which of the following is a true statement about the use of compression?&quot; I choose answer A which was wrong and I wasn&#39;t too sure about the answer, but it was my educational guess. I choose the one that said lossless compression video files will generally save more space than lossy compression of video files. But the correct answer is actually C, &quot;Lossy compression of an image file generally provides a greater reduction in transmission time than lossless compression does.&quot; This is correct because although fewer bits may be stored, information is not necessarily lost when lossy compression is applied to an image. | . Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Lossy Data Compression . This is a lossy data compression because it usually is an image with very high detail, lots of graphics and color blends. This can result in reduced image quality taking away information not really noticeable to the human eye. . Lossless Data Compression . This is a lossless data compression because it is an image is simple graphics, and has large areas of solid color. This means it is a smaller file size and no loss of image quality. . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://dereksol.github.io/Tera/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "N@TM Blog",
            "content": "Overview for my Group . Del Norte holds an event called Night at the Museum for electives and fine arts toward the end of every trimester. This is a chance for students to showcase the work they have put in throughout their time in the class, whether it be 3D animation, Ceramics, or our class, AP Computer Science Principles. . My group had the privilege to showcase our CPT project that we had been working on during class. Even though our group was formed a little late into the trimester, we were able to accomplish the best we could with our abilities and resources at hand. We ultimately came up with the idea of a fitness website that we would turn into Full Stack so that users can use our website to store diets, search videos, etc. . Chess . During the N@TM, I was able to view the group that worked on chess as their topic as well as other games. I had heard their presentation and plans for the website and was curious as to what their final result would come to look like. I was very surprised with how appealing the website looked and how well it functioned. There were many features in their sight and the way they coded the pieces to move that really fascinated me. I thought their project was very unique and did an overall great job of making an interesting and fun project. . Inventory Tracker . Another project that I looked at was this Inventory Tracker. I found it very fascinating that they you can enter an item that you want, put the date, item, action, and amount that you want and it will store it. I was inspired by how well their website was functioning and is something I can take away from. Another part of their website that I liked is that you can have the option to clear it to. I also believe this group did a good job at their CPT project and was quite impressive. . Reflection . Overall, I believe that the N@TM was a very eye opening experience to me. It taught me how everyone can be given the same guidelines, but its up to you are your group how you want the project to be executed and ultimately look like. After looking at all these fascinating CPT Projects, I learned that a lot of people work really hard to get the things they need to get done, and learned a lot from them that I could apply into my project and daily life as well. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2024/2023/02/27/N@TMblog.html",
            "relUrl": "/apcsp%20week%2024/2023/02/27/N@TMblog.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "Big Idea 5.6 Safe Computing",
            "content": "Describe PII you have seen on project in CompSci Principles. | PII stand for personal identifiable information, some projects that I have witness PII is when we are showing code and use our email and name for example. Sometimes for the code we will go a little more explicit by giving the date of birth of even the school we are currently at. However those are not to personal compared to other things on the list, like your social security number. . What are your feelings about PII and your personal exposure? | I feel that PII is something that you shouldn’t share with just anyone. Even people you trust the most shouldn’t know the deepest parts of your PII. For example, I am not going to give my best friend my social security number and birth certificate because they have known me for a while, its just not how it works. Those are things me and me only should know and have possession of. . Describe good and bad passwords? What is another step that is used to assist in authentication. | Bad passwords are ones that involve simple sequences like 123, or have your name within the password. An example of a bad password would be like Andrew123. Good passwords are usually ones with symbols and have deep meaning or little correlation to you in ways. An example could be like BFNsK]gadtL9R/]j, however the better the password, the harder it will probably be to remember. There is two factor authentification where it an app will send and email and then you clicking on it and putting a password will follow. . Try to describe Symmetric and Asymmetric encryption. | Symmetric encryption uses a single key to encrypt and decrypt. encrypting a zip file and decrypting it with the same key is symmetric encryption. Asymmetric encryption allows users to encrypt information using shared keys. It uses a mathematically related pair of keys for encryption and decryption: a public key and a private key. if one is used for the encryption the other is used for the decryption and vice versa. . Provide an example of encryption we used in AWS deployment. | AWS utilizes hardware security modules (HSMs) to protect customer key material while in use. . Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. | Phishing is where unknown sources try to entice you into a response, like click here for $1000. They usually try to impersonate big companies so that they can catch you off guard. One that I have learned the hard way was when I was very little and wanted something free online. I remember clicking it and then a virus attached to my computer. I also remember my dad installing a anti-virus for my computer, but I believe it was the reason my computer was always running so slow. Other phishing techniques could be when you want to pay and they ask for more personal information than they need. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2020/2023/02/08/56Reflection.html",
            "relUrl": "/apcsp%20week%2020/2023/02/08/56Reflection.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Big Idea 5.5 Legal and Ethical Concerns",
            "content": "When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. The type of license that Github offers when I looked at my repository was the Apache License 2.0. I researched what type of license it was and found that it is a type of open source, permissive software license. It says it allows commercial and private use, but their is trade mark use limitations. I think mine is an Open Source GPL License because this means the Github project must be public, which it is. . | In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. . | Digital Rights is where the companies where companies protect the content that they produce so that other people don’t just steal it and sell it for free because usually we pay for these services. Things I can think about for this in terms of Music will be like Spotify. You can still use it without a membership, but it is a whole lot better with it because you can listen to all the songs that you want when you want. However I have seen other apps mimic spotify and even copy their name with the same concept, except give the exclusive membership benefits for free. To me, it is crazy that people can still find ways to download the stuff for free and bypass all the protection companies put on their content. . Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. | I have changed my github personal blog license from the standard Apache License 2.0 to the MIT License. I picked this as my license because it allows for a friendly blog repo that allows me to let others use code freely and make and distribute closed source versions. However, I would appreciate my credit if used. I plan to do the same for our team repo, but I would like to talk it over with my groups members before doing so. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2020/2023/02/08/55Reflection.html",
            "relUrl": "/apcsp%20week%2020/2023/02/08/55Reflection.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Big Idea 5.4 Crowdsourcing",
            "content": "We have all experienced Crowdsourcing by using external data through API’s, namely RapidAPI. This data has influenced how we code and shown possibilities in obtaining and analyzing data. Discuss APIs you have used. | I used a BasketballAPI for my last project with a bunch of data about basketball players | Some other people used an API that gives you words for hangman | Another person used an NBA API that gave random NBA players with their stats | . We have all participated in code Crowdsourcing by using GitHub. Many of you have forked from the Teacher repository, or exchanged code with fellow students. Not only can we analyze GitHub code, but we can obtain profiles and history about the persons coding history. What is the biggest discovery you have found in GitHub? | The biggest discovery that I found in Github is that I am able to clone repositories and work on the same repository as a group. I also was blown away with the way I can create issues and use that as a form of submitting weekly checks | . Kaggle datasets for code and science exploration. The avenue of data points us youtube or netflix channels. Analyzing crowd data helps us make decisions. Exam top 10 to 20. Did you see anything interesting? | I noticed that all the trending sets are very unique and different from one another, however some of them do connect in ways. For example there is a good amount pertaining to social media like Youtube, bots of Social Media, ChatGPT Reddit, etc | . Hacks . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? | A crowdsource idea for a group of 150 computer science students could be a project collaboration platform where students can come together to work on projects and share their skills and knowledge with each other. In order to do so, we could regularly check in with the teams to provide feedback and offer any assistance they may need. . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? | I believe that our project could benefit heavily in Del Norte with crowdsourcing. If we shared and collaborated with other groups on the information that we have, their would be a lot of resources that everyone in our class and un and our school that would know and have access to all these perks. . What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. | Some data that we could get from the N@TM is some coding that has to deal with a pretty advanced feature, as that would do really well in terms of the CPT Project that we are doing. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2020/2023/02/01/54Notes.html",
            "relUrl": "/apcsp%20week%2020/2023/02/01/54Notes.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "Big Idea 5.3 Computing Bias",
            "content": "Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? | The older generation tend to use Facebook, while the new and young generation tend to use TikTok. 60% of the users on TikTok are ages 16-24. The average age of users that use Facebook range from 25 to 34 years old. These platforms do give purpose in giving information and entertainment to people, however it can be harmful as the content you receive can be very polarized, and usually put through algorithms to give the content you wish to see. It is definitely a good business, but takes advantage of people because many will believe whatever they see on social media, whether it is true or not. This makes our society less educated in certain topics and giving out information that is false to many others. . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? | Virtual assistants have female voices because they tend to be more friendly and sound more helpful. But this can definitely put a gender stereotype on girls, because male and female voices should be equally used in a society that believes in gender equality. By using only female voices, it may discredit a virtual assistant if they have a male voice, making them not trust the information they give you because you think there voice isn’t as appealing. . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) | Netflix has an algorithm that shows movies and shows that you prefer watching | TikTok uses a algorithm that gives you content that is personalized to what you want to see | Amazon recommends buying stuff based on what you purchased last or browse | Google will keep what you search and store that data for the next time you search something similar to that | . As Pairs (5 minutes) . Does the owner of the computer think this was intentional? If yes or no, justify you conclusion. | I think the owner did think this was done intentionally, and he thinks that his skin tone is the reason why his face doesn’t track but his white co-worker gets tracked. . How do you think this happened? | Lack of testing for their code, they probably didn’t account for all colors of skin that could be tracked, such as this person in the video. . Is this harmful? Was it intended to be harmful or exclude? | This is harmful because it puts the impression that their facial recognition is racist, even if that wasn’t their intent. . Should it be corrected? | It should definitely be corrected because it takes out a portion of humans that cannot use facial recognition because of their skin tone. . What would you or should you do to produce a better outcome? | Test it on all different colors of skin, making sure that it tracks everyone so that anyone, no matter the race can use the facial recognition feature. . Summary of Exercises . My overall thoughts on the questions we answered above is that companies all over the internet have their biases and algorithms that the users experience on their site. I feel that part of the reason why is because all these companies are at constant competition with each other, so they have to do whatever possible to keep the users engaged. Whether it be through using algorithms based on users experience, it can just be small things that relate to a user’s search so that they stay engaged on the site. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2020/2023/02/01/53Notes.html",
            "relUrl": "/apcsp%20week%2020/2023/02/01/53Notes.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "Project Blog",
            "content": "My Portion of Project for CPT . My portion of the project is going to be the search bar to find tips and tricks through articles and videos that help you along your fitness journey. Its is going to: . have a search bar at top of the page | have videos and articles embedded into the actual page | allow users to search for certain articles or videos to help them with fitness Outline of materials required for CollegeBoard . Row 1: Program Purpose and Function . | overall purpose of the program is so that users can find videos and articles that they want to watch or read so that they can receive guidance on their fitness journey | The video will go over the functionality of the program, meaning how the search bar works and what happens when you click on videos or articles | The input and output will be described in the video, so it will show the user inputting a certain article or video they want to watch, the output will provide user the list of articles or videos related to their search | . Row 2: Abstraction . Code will show how the data has been stored, I will show it in backend and I will obtain the data from an API | I will also show the data in this same list being used as part of fulfilling the programs purpose, the videos in the data are needed for the user to search certain videos and articles and have that pop up for them | The variable is the article and videos, and the data represents what articles and videos the users will be allowed to search from in the program | . Row 3: Managing Complexity . I will include a code segment that shows a list being used to manage complexity in the program, not to sure on this part, need to analyze this a little more to figure out how to show this | I will explain how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list, which again I need to think about more on how to do this. | . Row 4: Procedural Abstraction . code segment that shows a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure, this will be me searching up a key word, then having it hone in and a couple videos and articles related to that key word | I will describe what the identified procedure does and how it contributes to the overall functionality of the program, so it will hone in on the videos in which the user can click on to read and watch more about fitness, in turn they can use to better themselves whether it be in the gym or in their diet goal | . Row 5: Algorithm Implementation . I plan to use sequencing, selection, and iteration when creating this search bar feature | I will try my best to explain it so that someone else can figure out how this algorithm works and recreate it | . Row 6: Testing . I will give the two calls, which is searching in the search bar, and clicking on a video or article | The result of searching the search bar will give specific videos based on search | the result of click on a video or article is that it will bring you to that article or video in which you can watch or read it on a different page | . Video Plan . I my video, I plan to show the entirety of the search bar feature. I will show how if I search up a certain word like “legs,” it will show videos that relate to training legs in the gym. I plan to do that with a couple of searches, like ones that are related to dieting as well. When I search something in particular, I will display how it only shows videos and articles that pertain to that search. Then I will click on a couple of those article and videos to show what they entail and really show the entirety of the search feature by doing so. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2020/2023/01/30/ProjectBlog.html",
            "relUrl": "/apcsp%20week%2020/2023/01/30/ProjectBlog.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "MCQ 2 Blog",
            "content": "Score of MCQ #2 . . Test Corrections . Question 22 . When looking back at this question, I realized that Algorithm A does indeed calculate the correct average as well. For some reason I thought that for Algorithm A, the person in step two was a continuation for step 3, but those are two separate people. Therefore, I thought that Algorithm A wouldn’t calculate the average because of that. But because Step 2 and 3 are two different people, it makes sense that it would calculate the correct average as well. . Question 28 . For this question I picked answers A and D, however it was A and C. I initially had C but I thought it was wrong because I believed it would go in a continuous circle reaching the same starting point. However I realized that after repeating, it will continue to move forward and rotate left, but doesn’t necessarily move in the left direction. That it why C is right and should be A and C and not A and D. . Question 30 . I put A and C as my answer, but the correct answer was B and C. The place where I messed up on is that although A and B are very similar options, B has the draw circle function below the steps, which is the one I should have chosen. I forget to look carefully into that which made me overlook it and pick the wrong answer. . Question 36 . I said that the program would not work as intended when the target appears in the list more than once. However that was wrong because if target appears in a list more than once, the program will accurately display the number of times it appeared. Therefore, this refutes the argument to the program does not work as intended, which means that the program actually works and is correct, being answer A. . Question 41 . I had my answer as A and C, but the correct answer is A and D. The reason that option D is correct over C is because there is a two out of 10, or 20 percent, chance that it could evaluate to 1 or 2. If this happens, the value of sum is increased by 1, which simulates a person voting for the candidate. C is wrong because it says it can only equal to 2, but is not the right notation, it should have been equal to or less than 2. . Question 45 . I forgot what the meaning to heuristic means, so I took my best guess at it. I was close in the part that the problem cannot be solved in a reasonable time, however it is not most beneficial when an exact solution is needed, but an approximate solution is acceptable. . Question 47 . This is another question about heuristic, which I couldn’t remember the meaning of. But now I know that heuristic means proceeding to a solution by trial and error or by rules that are only loosely defined. Therefore, a program that finds the shortest driving route between two locations on a map is most likely to benefit from the use of heuristic because that cannot be solved in a reasonable time, and heuristic is used to speed that process up because finding the exact thing would take way too long. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2020/2023/01/30/MCQBlog.html",
            "relUrl": "/apcsp%20week%2020/2023/01/30/MCQBlog.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "Digital Divide Reflection",
            "content": "Big Idea 5.2 Digital Divide Reflection . What are the pros and cons on internet blockers at router and lack of admin password on lab machines at schools? | Pros . Prevent students from doing off task work or inappropriate things on the computer | Helps prevent the computer from searching things the school forbids students to go on or experience | Makes students more academically focused in terms of how they use their computers | . Cons . Can stop students from going on websites that they might need for school projects or homework | Refrains students from accessing a lot of information that might be needed | Limits students to the amount of outside resources they can use while at school | Can be less productive if the websites they are trying to access for school related stuff is blocked | . What concerns do you have personally about the digital divide? | The concerns that I have for digital divide is how well society as a whole will adapt to the new. For example, computers is something that not every still has access to or chooses to have access to. Whether we like it or not, I feel that computers is the next generation of ideas and needed to build a better society in the future. However, not every believes that, which puts people in society at different places. I know that some may choose to not use technology, and others will, but that will always be an ongoing problem for anything new to come in this world. . Digital Empowerment Questions . How does someone empower themself in a digital world? | Someone can empower themself in a digital world by learning the ins and outs of technology. When phones first came out, no one knew it was going to become what it is today. Many people that use a phone for the first time would find it very complicated and confusing. But by putting yourself in the situation where you want to learn more about technology, it will allow you to become more familiar with it. The more I use my phone, the more I find out how useful and powerful it is, and in turn makes me hold that power. . How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. | To help someone that is not empowered would be to educate them or help them when needed. For example, if someone at Del Norte had never really used a computer for the first time, or was not to familiar with how certain things on the computer work, I could try my best to help them out and teach them if I know the answer to their question. That way I can spread what I have learned about the digital world to others that are not informed about that certain piece. . Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? | I feel that paper isn’t necessarily blocking digital empowerment. We have used pen and paper far before we converted to the digital world. So I wouldn’t say that it is stopping it, however many might prefer to stick to pen and paper. Since majority seems to be converting over to technology, pen and paper is still used for its benefits, but technology and computers is also used for its benefits. We can see this is Del Norte where we will take notes of tests on pen and paper sometimes for the benefits that it entails, but we will also use our computers for homework assignments and other things that might be easier to do on computer than by paper. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2020/2023/01/24/digitaldivideblog.html",
            "relUrl": "/apcsp%20week%2020/2023/01/24/digitaldivideblog.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "Beneficial and Harmful Effects Blog Reflection",
            "content": "Big Idea 5.1 Beneficial and Harmful Effects . Computing is the process of using computer technology to complete a given goal-oriented task. One benefit of computing is that it makes real life things much more accessible on the internet, such as electronic transactions. Another benefit is that computers make things easier for us, such as accessing information online through Google, and a lot of information can be given to pretty much anyone around the world. The last benefit is that communication has become easier because of computing. Now we are able to talk to anyone around the world through computers. . One harmful effect is that society can adapt so much to computers that it can take away from doing stuff in the real world. Another harmful effect of computers is that there is constant competition between the companies that are online. Example would be Google and ChatGPT. ChatGPT is like google, except skips the steps where you have to click on stuff to get the information, rather you search it up and spits out the information to you. One more harmful effect of computers is that a lot of people have access to it, and not all people on the internet can be reliable. It is easier to scam and take advantage of someone online than in person. . | Beneficial and Harmful Effects related to our project . One benefit from our project is that it will help people become more healthy by tracking how much they eat and by plugging in information to attain a certain diet goal. Another benefit of our project is that it is applicable to anyone, and is different for everyone depending on the goal they want to reach in terms of their fitness lifestyle. One last benefit is that it calculates all the calories and macros that you need without you having to do it manually yourself. . A potential harmful effect of our project is that it could increase competition between other websites and apps that also track your calories and help you reach a fitness goal, or it could be hard for our website to compete if not performed well. . | Dopamine Issues . I feel that the dopamine problem is no conspiracy, and is definitely real. Whenever we go on social media or use the internet for long periods of time, we release dopamine, which is that “feel good” chemical. However this brews addiction. In order to satisfy ourselves, we continue to scroll on Instagram and TikTok, however we end up on our screens longer than we should. I can take away from productivity throughout the day, and sleep at night, and I can personally attest to those things. |",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2020/2023/01/24/benefitharmblog.html",
            "relUrl": "/apcsp%20week%2020/2023/01/24/benefitharmblog.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "Rebecca Presentation Notes",
            "content": "Notes . she began by outlining the goal of their project | explained the background of their initiative and the objectives they had for it | she went over their front end after that | discussed all of her existing features and how they can satisfy CRUD and College Board criteria | what she still intend to incorporate into their project | displayed a sample of one of their databases | discussed the goals of their program, potential issues, and how their program would address those issues | model, view, and control view explanation (How the API and Model Control Hacks are implemented in their project) | outlined their hosting strategy for both the front and back ends of their projects | displayed their scrum board and the planning they’ve done for how they’ll complete their project over time | Finally, went over the team manifesto to conclude the presentation | .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2020/2023/01/24/RebeccaNotes.html",
            "relUrl": "/apcsp%20week%2020/2023/01/24/RebeccaNotes.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . # Werkzeug is a collection of libraries that can be used to create a WSGI (Web Server Gateway Interface) # A gateway in necessary as a web server cannot communicate directly with Python. # In this case, imports are focused on generating hash code to protect passwords. from werkzeug.security import generate_password_hash, check_password_hash import json # Define a User Class/Template # -- A User represents the data we want to manage class User: # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using str(object) in human readable form, uses getter def __str__(self): return f&#39;name: &quot;{self.name}&quot;, id: &quot;{self.uid}&quot;, psw: &quot;{self.password}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;Person(name={self._name}, uid={self._uid}, password={self._password})&#39; # tester method to print users def tester(users, uid, psw): result = None for user in users: # test for match in database if user.uid == uid and user.is_password(psw): # check for match print(&quot;* &quot;, end=&quot;&quot;) result = user # print using __str__ method print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;) u2 = User(name=&#39;Nicholas Tesla&#39;, uid=&#39;nick&#39;, password=&#39;123nick&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;eli&#39;, password=&#39;123eli&#39;) u5 = User(name=&#39;Hedy Lemarr&#39;, uid=&#39;hedy&#39;, password=&#39;123hedy&#39;) # put user objects in list for convenience users = [u1, u2, u3, u4, u5] # Find user print(&quot;Test 1, find user 3&quot;) u = tester(users, u3.uid, &quot;123lex&quot;) # Change user print(&quot;Test 2, change user 3&quot;) u.name = &quot;John Mortensen&quot; u.uid = &quot;jm1021&quot; u.set_password(&quot;123qwerty&quot;) u = tester(users, u.uid, &quot;123qwerty&quot;) # Make dictionary &#39;&#39;&#39; The __dict__ in Python represents a dictionary or any mapping object that is used to store the attributes of the object. Every object in Python has an attribute that is denoted by __dict__. Use the json.dumps() method to convert the list of Users to a JSON string. &#39;&#39;&#39; print(&quot;Test 3, make a dictionary&quot;) json_string = json.dumps([user.__dict__ for user in users]) print(json_string) print(&quot;Test 4, make a dictionary&quot;) json_string = json.dumps([vars(user) for user in users]) print(json_string) . Test 1, find user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$l71...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$5gQ...&#34; * name: &#34;Alexander Graham Bell&#34;, id: &#34;lex&#34;, psw: &#34;sha256$6Tw...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$t3L...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$ROF...&#34; Test 2, change user 3 name: &#34;Thomas Edison&#34;, id: &#34;toby&#34;, psw: &#34;sha256$l71...&#34; name: &#34;Nicholas Tesla&#34;, id: &#34;nick&#34;, psw: &#34;sha256$5gQ...&#34; * name: &#34;John Mortensen&#34;, id: &#34;jm1021&#34;, psw: &#34;sha256$szr...&#34; name: &#34;Eli Whitney&#34;, id: &#34;eli&#34;, psw: &#34;sha256$t3L...&#34; name: &#34;Hedy Lemarr&#34;, id: &#34;hedy&#34;, psw: &#34;sha256$ROF...&#34; Test 3, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$l712O4ASTEofJllb$3c81fdc72db69bf9f9af453893c0a3154c6cc8405b71ba96ae6f234ef5f2e588&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$5gQXNTl76yONK8Sq$15f2032df3480d0104cf0aad9d845229bf797749fca918f86b35f9b939f75ded&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$szrtVUmUHcjKA5gi$5d131da76ba3c399e7798613c8ad79596f145a6ee128d0037b0cf07dce3b5674&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$t3L1jqyXsfNkPePX$6280950e77992bb1b3d90eef5a13814d649e76eed91775fbad07af27d9dfdb48&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$ROFNOu2vGncsCeQJ$ca1f0c8684dced0d31227bff1b05b35a922f307640c70b491845369cb6679eb1&#34;}] Test 4, make a dictionary [{&#34;_name&#34;: &#34;Thomas Edison&#34;, &#34;_uid&#34;: &#34;toby&#34;, &#34;_password&#34;: &#34;sha256$l712O4ASTEofJllb$3c81fdc72db69bf9f9af453893c0a3154c6cc8405b71ba96ae6f234ef5f2e588&#34;}, {&#34;_name&#34;: &#34;Nicholas Tesla&#34;, &#34;_uid&#34;: &#34;nick&#34;, &#34;_password&#34;: &#34;sha256$5gQXNTl76yONK8Sq$15f2032df3480d0104cf0aad9d845229bf797749fca918f86b35f9b939f75ded&#34;}, {&#34;_name&#34;: &#34;John Mortensen&#34;, &#34;_uid&#34;: &#34;jm1021&#34;, &#34;_password&#34;: &#34;sha256$szrtVUmUHcjKA5gi$5d131da76ba3c399e7798613c8ad79596f145a6ee128d0037b0cf07dce3b5674&#34;}, {&#34;_name&#34;: &#34;Eli Whitney&#34;, &#34;_uid&#34;: &#34;eli&#34;, &#34;_password&#34;: &#34;sha256$t3L1jqyXsfNkPePX$6280950e77992bb1b3d90eef5a13814d649e76eed91775fbad07af27d9dfdb48&#34;}, {&#34;_name&#34;: &#34;Hedy Lemarr&#34;, &#34;_uid&#34;: &#34;hedy&#34;, &#34;_password&#34;: &#34;sha256$ROFNOu2vGncsCeQJ$ca1f0c8684dced0d31227bff1b05b35a922f307640c70b491845369cb6679eb1&#34;}] . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2005, 1, 17) age = calculate_age(dob) print(age) print(dob) . 17 2005-01-17 . Hack Helper . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) #getter @property def classOf(self): return self._classOf #setter @classOf.setter def classOf(self, classOf): self._classOf = classOf # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot;: self.classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, classOf={self._classOf})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Derek Sol&#39;, uid=&#39;dmsol218&#39;, password=&#39;Tera123&#39;, dob=date(2005, 1, 17), classOf=&#39;2023&#39;) print(&quot;Print users info:&quot;) print(u1) print(&quot; nJSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . Print users info: {&#34;name&#34;: &#34;Derek Sol&#34;, &#34;uid&#34;: &#34;dmsol218&#34;, &#34;dob&#34;: &#34;01-17-2005&#34;, &#34;age&#34;: 17, &#34;classOf&#34;: &#34;2023&#34;} JSON ready string: {&#34;name&#34;: &#34;Derek Sol&#34;, &#34;uid&#34;: &#34;dmsol218&#34;, &#34;dob&#34;: &#34;01-17-2005&#34;, &#34;age&#34;: 17, &#34;classOf&#34;: &#34;2023&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Derek Sol&#39;, &#39;_uid&#39;: &#39;dmsol218&#39;, &#39;_password&#39;: &#39;sha256$wrbTzLVE2ToH8yJB$c380908a6ed8e0a9f9e8e7b0c138de4d2e91ee4dfe242eb9d5fec23da3ebc9d6&#39;, &#39;_dob&#39;: datetime.date(2005, 1, 17), &#39;_classOf&#39;: &#39;2023&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Derek Sol, uid=dmsol218, password=sha256$wrbTzLVE2ToH8yJB$c380908a6ed8e0a9f9e8e7b0c138de4d2e91ee4dfe242eb9d5fec23da3ebc9d6,dob=2005-01-17, classOf=2023) . Idea for my Group&#39;s Project . import json class userInfo: def __init__(user, firstName, lastName, genre, favoritemovie): user._firstName = firstName # variables with self prefix become part of the object, user._lastName = lastName user._genre = genre user._favoritemovie = favoritemovie # first name getter @property def firstName(user): return user._firstName # first name setter @firstName.setter def firstName(user, firstName): user._firstName = firstName # last name getter @property def lastName(user): return user._lastName # last name setter @lastName.setter def lastName(user, lastName): user._lastName = lastName #favorite movie genre getter @property def genre(user): return user._genre #favorite movie genre setter @genre.setter def genre(user, genre): user._genre = genre #favorite movie getter @property def favoritemovie(user): return user._favoritemovie # favorite movie setter @favoritemovie.setter def favoritemovie(user, favoritemovie): user._favoritemovie = favoritemovie # output content using str(object) in human readable form, uses getter def __str__(user): return f&#39;first name: &quot;{user.firstName}&quot;, last name: &quot;{user.lastName}&quot;, genre: &quot;{user.genre}&quot;, favorite movie: &quot;{user.favoritemovie}&quot;&#39; # output command to recreate the object, uses attribute directly def __repr__(user): return f&#39;Person(first name={user._firstName}, last name={user._lastName}, genre={user.genre}, favorite movie: {user._favoritemovie})&#39; # tester method to print users def tester(user, firstName, lastName, genre, favoritemovie): result = None for user in users: print(str(user)) return result # place tester code inside of special if! This allows include without tester running if __name__ == &quot;__main__&quot;: # define user objects u1 = userInfo(firstName=&#39;Derek&#39;, lastName=&#39;Sol&#39;, genre=&#39;Adventure&#39;, favoritemovie=&#39;Kung Fu Panda&#39;) # put user objects in list for convenience users = [u1] print(&quot;Users in Database in JSON: n n&quot;,u1) . Users in Database in JSON: first name: &#34;Derek&#34;, last name: &#34;Sol&#34;, genre: &#34;Adventure&#34;, favorite movie: &#34;Kung Fu Panda&#34; .",
            "url": "https://dereksol.github.io/Tera/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post33": {
            "title": "Student Teaching Portfolio",
            "content": "My Vocab . Unit 3 Sections 1-2 . Notes . Variable is an abstraction inside a program that can hold a value | organizes data by labeling it with descriptive name | consists of three parts: name, value, and type | When naming variables, keep it easy and simple to read, because it can be messy and confusing later on | types of data, integer is a number, text/string is a word, and Boolean is data that determines if something is true or false | assignment operator allows a program to change the value represented by a variable, used to assign values to variables | value stored in a variable will be the most recent value assigned | . Data Abstraction . Method used in coding to represent data in a useful form, by taking away aspects of data that aren&#39;t being used in the situation | Variables and lists are primary tools in data abstraction | Provides a separation between the abstract properties of a data type and the concrete details of its representation | . Lists &amp; Strings . List = ordered sequence of elements | Element = individual value in a list that is assigned to a unique index | Index = a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index | String = ordered sequence of characters (Letters, numbers, special characters) | . What are Lists? . Allow for data abstraction | Bundle variables together | Store multiple elements | Allows multiple related items to be treated as a single value | Give one name to a set of memory cells | Can keep adding elements to it as needed | Can store elements as a single variable by using a list | . 3 Types of List Operations . Assigning values to a list at certain indices | Creating an empty list and assigning it to a variable | Assigning a copy of one list to another list (setting one list equal to another list) | Practice . colorList=[&quot;green&quot;, &quot;red&quot;, &quot;pink&quot;, &quot;purple&quot;, &quot;blue&quot;, &quot;brown&quot;] print(str(colorList)) . [&#39;green&#39;, &#39;red&#39;, &#39;pink&#39;, &#39;purple&#39;, &#39;blue&#39;, &#39;brown&#39;] . Homework . print(&quot;General Knowledge Trivia&quot;) QandA = { &quot;#1) What is the largest mammal?&quot;: &quot;blue whale&quot;, &quot;#2) What is the largest organ in the body?&quot;: &quot;skin&quot;, &quot;#3) What galaxy do we live in?&quot;: &quot;milky way&quot;, &quot;#4) Who founded Amazon?&quot;: &quot;jeff bezos&quot;, &quot;#5) What is the world&#39;s largest ocean?&quot;: &quot;pacific ocean&quot;, } def qandresp(question): # display question, return inputted response print(question) resp = input() return resp correct = 0 # Setup print(&quot;Current number of questions: &quot; + str(len(QandA))) # iterate over each key for key in QandA: rsp = qandresp(key) # save user&#39;s response to a variable rsp rsp = rsp.lower() # answer is case sensitive, so match response to lowercase for answer key to work if rsp == QandA[key]: # check if the response is equal to the answer in the dictionary print(f&quot;Correct!&quot;) correct += 1 else: print(f&quot;{rsp} is incorrect &quot;) percent = str(round(correct/len(QandA), 2)*100) # calculate percentage print(&quot;You scored &quot; + str(correct) +&quot;/&quot; + str(len(QandA))) print(f&quot;Which is also, {percent}%&quot;) # print score and percentage . General Knowledge Trivia Current number of questions: 5 #1) What is the largest mammal? Correct! #2) What is the largest organ in the body? heart is incorrect #3) What galaxy do we live in? Correct! #4) Who founded Amazon? Correct! #5) What is the world&#39;s largest ocean? atlantic ocean is incorrect You scored 3/5 Which is also, 60.0% . Unit 3 Sections 3-4 . Notes . An algorithm has three components: sequencing, selection, and iteration | sequencing is algorithms doing tasks in the order of specification | selection is allowing is to choose two different outcomes based off a decision | iteration is that if a condition is true, then the code is repeated | . Algorithm Can Be Represented In Two Ways . flowcharts, which uses shapes and arrows to represent steps of an algorithm | pseudocode, which is a blend of human language and coding format | . Basic Operations . subtraction, represented by - | addition, represented by + | multiplication, represented by * | division, represented by / | getting the remainder, represented by MOD(% in python) | . Different Ways Values Are Stored in Variables . numerical value stored in variable | value of another variable stored in variable | result of an operation stored in a variable | result of a procedure call stored in a variable | . Strings . What is a String? A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . Homework . Tracking Variables Hack . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 # Result is 20.4 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 # Result is 0 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueC) # Result is 17 . 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) # Result is straightbrownshort . straightbrownshort . String Hacks . Problem 1 . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = Noun[:7] yoda = abrev + &quot; &quot; + Verb + &quot; &quot; + Adjective2 + &quot; &quot; + Adjective + &quot;.&quot; print(yoda) . Mr.Mort is Very handsome. . Problem 2 . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 len2 = len(cookie2) * 45 vote1 = (str(cookie) + &quot; vote &quot; + str(len2)) vote2 = (str(cookie2) + &quot; vote &quot; + str(len1)) votes = (str(vote1) + &quot; &quot; + str(vote2)) print(votes) . choclate vote 225 rasin vote 4.0 . Unit 3 Sections 8-10 . Notes . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . There is list, then four total collection data types in Python . Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn&#39;t allow duplicates | Dictionary: collection that is ordered, changeable, doesn&#39;t allow duplicates | . More Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . Methods . Method Definition Example . append() | adds element to the end of the list | fruits.append(&quot;watermelon&quot;) | . index() | returns the index of the first element with the specified value | fruits.index(&quot;apple&quot;) | . insert() | adds element at given position | fruits.insert(1, &quot;watermelon&quot;) | . remove() | removes the first item with the specified value | fruits.remove(&quot;strawberry&quot;) | . reverse() | reverses the list order | fruits.reverse() | . sort() | sorts the list | fruits.sort() | . count() | returns the amount of elements with the specified value | fruits.count(&quot;apple&quot;) | . copy() | returns a copy of the list | fruits.copy() | . clear() | removes the elements from the list | fruits.clear() | . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. | There&#39;s a lot of types of iteration though, what to use? How do we apply iteration to lists? | Some methods include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension | here are 2 types of iteration: definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met | . Else, elif, break . Else: when the condition does not meet, do statement() | Elif: when the condition does not meet, but meets another condition, do statement() | Break: stop the loop | . Homework . HW Iteration . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() print(inp + &quot; -&gt;&quot;) for i in range(len(inp)): for j in range(len(words)): if inp[i] == words [j][0]: print(words[j]) . derek -&gt; delta echo romeo echo kilo . Other way to print matrix . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . def print_matrix3(matrix): for i in range(len(keypad)): print(*keypad[i]) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . Birth Month HW . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] print(str(keyboard[0][1]) + str(keyboard[3][9]) + str(keyboard[0][1]) + str(keyboard[0][7]) + str(keyboard[3][9]) + str(keyboard[0][2]) + str(keyboard[0][10]) + str(keyboard[0][10]) + str(keyboard[0][5]) + &quot; n&quot; + str(keyboard[0][1]) + str(keyboard[0][7])) . 1/17/2005 17 . Unit 3 Sections 9-11 . Notes . Algorithms . Algorithms can be written in different ways and still accomplish the same tasks | Algorithms that appear similar can yield different side effects or results. | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) | Different algorithms can be developed or use to solve the same problem. | . Conditionals vs. Boolean . The condition and instructions are what differ, that&#39;s where the magic happens. The condition is a boolean expression when an expression outputs either true or false. Boolean values are another type of data type in programming languages, and they can only ever hold true or false. . Selection vs. Iteration . Selection: . A process used in algorithms where a conditional if-statement leads to one of two outcomes | Outcome 1: if the conditional statement is true, something will happen | Outcome 2: if the conditional statement is false, something else will happen | . Iteration . A process used in algorithms that allows certain things to happen until a condition is satisfied | Once the condition is satisfied, then an outcome is produced | This can take the form of a for-loop, while-loop, and/or if-statement | . Takeaways . You can use code you&#39;ve previously wrote in order to make a project easier. | Breaking algorithms down into steps can make things easier and more simple. | . Homework . Flowchart . Link to flowchart . import random def RandomNumGen(x): RandomNumGenList = [] while x &gt; 0: RandomNumGenList.append(random.randint(1,20)) x -= 1 print(RandomNumGenList) return max(RandomNumGenList) RandomNumGen(3) . [1, 16, 18] . 18 . Unit 3 Sections 12-13 . Notes . Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . Developing Procedures . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a pre-written procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . quizGrade = 25 def currentGrade(currentPoints): currentGrade = currentPoints / 40 currentGrade = currentGrade * 100 return currentGrade newPoints = int(input(&quot;What did you get out of 40?&quot;)) newPercent = (currentGrade(int(newPoints))) if (newPoints &gt; quizGrade): newquizGrade = newPercent print(&quot;your new grade is &quot; + str(newquizGrade) + &quot;%&quot;) else: print(&quot;your grade is still &quot; + str(quizGrade) + &quot;/40&quot;) . your new grade is 87.5% . Homework . class Student: marks = [] def getData(self, rn, name, m1, m2, m3): Student.rn = rn Student.name = name Student.marks.append(m1) Student.marks.append(m2) Student.marks.append(m3) def displayData(self): print(&quot;Roll Call Number: &quot;, Student.rn) print(&quot;Name is: &quot;, Student.name) print(&quot;Grade in subject 1: &quot;, Student.marks[0]) print(&quot;Grade in subject 2: &quot;, Student.marks[1]) print(&quot;Grade in subject 3: &quot;, Student.marks[2]) print(&quot;Average Grade of: &quot;, self.average()) GradeAverage = self.average() if (GradeAverage &gt; 90): print(&quot;your an A student&quot;) elif (GradeAverage &gt; 80): print(&quot;your a B Student&quot;) else: print(&quot;do better&quot;) def total(self): m = Student.marks return(Student.marks[0] + Student.marks[1] +Student.marks[2]) def average(self): return ((Student.marks[0] + Student.marks[1] +Student.marks[2])/3) r = int (input(&quot;Enter the roll call number: &quot;)) name = input(&quot;Enter the name: &quot;) m1 = int (input(&quot;Enter the Grade in first subject: &quot;)) m2 = int (input(&quot;Enter the Grade in second subject: &quot;)) m3 = int (input(&quot;Enter the Grade in third subject: &quot;)) s1 = Student() s1.getData(r, name, m1, m2, m3) s1.displayData() . Roll Call Number: 26 Name is: Derek Sol Grade in subject 1: 81 Grade in subject 2: 84 Grade in subject 3: 93 Average Grade of: 86.0 your a B Student . Unit 3 Sections 14-15 . Notes . Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . API&#8217;s . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . Random Values . Random number generation (RNG) produces a random number (crazy right?) | This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . Homework . import random n = int(input(&quot;How many numbers would you like to generate?&quot;)) a = int(input(&quot;Give the lowest number you want all numbers to be picked from?&quot;)) b = int(input(&quot;Give the highest number you want all numbers to be picked from?&quot;)) numbers = [random.randint(a, b) for _ in range(n)] # I input the range from numbers 1-100 evens = [] odds = [] for number in numbers: if number % 2 == 0: evens.append(number) else: odds.append(number) print(evens) print(odds) . [46, 78, 12, 78, 76, 8, 18, 92, 98, 42, 64, 30] [83, 95, 7, 97, 39, 61, 73, 21] . import numpy as np poly = np.poly1d([2, 0, 0, -6, 24, 0]) derivative = poly.deriv() print(&quot;The derivative of n&quot; + str(poly) + &quot; n&quot; + &quot;is&quot; + &quot; n&quot; + str(derivative)) . The derivative of 5 2 2 x - 6 x + 24 x is 4 10 x - 12 x + 24 . import numpy as np n = np.poly1d([13, 0, 4, 0, 0]) d = np.poly1d([2]) derivative = ((d * n.deriv()) - (d.deriv() * n)) / 4 result = derivative(9) print(&quot;The derivative of n&quot; + str(n) + &quot; n divided by&quot; + str(d) + &quot; nis: n&quot; + str(derivative)) print(&quot; nWhen x = 9, f&#39;(x) = n&quot; + str(round(result))) . The derivative of 4 2 13 x + 4 x divided by 2 is: 3 26 x + 4 x When x = 9, f&#39;(x) = 18990 . import random animals = [&#39;dog1&#39;, &#39;dog2&#39;, &#39;dog3&#39;, &#39;dog4&#39;, &#39;dog5&#39;, &#39;dog6&#39;, &#39;dog7&#39;, &#39;dog8&#39;, &#39;dog9&#39;, &#39;dog10&#39;, &#39;cat1&#39;, &#39;cat2&#39;, &#39;cat3&#39;, &#39;cat4&#39;, &#39;cat5&#39;, &#39;cat6&#39;, &#39;cat7&#39;, &#39;cat8&#39;, &#39;cat9&#39;, &#39;cat10&#39;] random.shuffle(animals) print(animals) . [&#39;dog10&#39;, &#39;cat8&#39;, &#39;cat4&#39;, &#39;dog3&#39;, &#39;cat1&#39;, &#39;dog1&#39;, &#39;cat10&#39;, &#39;dog2&#39;, &#39;cat6&#39;, &#39;dog6&#39;, &#39;dog4&#39;, &#39;dog7&#39;, &#39;cat2&#39;, &#39;dog5&#39;, &#39;cat9&#39;, &#39;cat7&#39;, &#39;dog9&#39;, &#39;cat5&#39;, &#39;dog8&#39;, &#39;cat3&#39;] . Two Other Python Libraries . Keras . Keras is a deep learning API written in Python, running on top of the machine learning platform TensorFlow. It was developed with a focus on enabling fast experimentation. Being able to go from idea to result as fast as possible is key to doing good research. | It is simple, flexible, and powerful. | Keras reduces developer cognitive load to free you to focus on the parts of the problem that really matter. | Keras adopts the principle of progressive disclosure of complexity: simple workflows should be quick and easy, while arbitrarily advanced workflows should be possible via a clear path that builds upon what you&#39;ve already learned. | Keras provides industry-strength performance and scalability: it is used by organizations and companies including NASA, YouTube, or Waymo. | . Pandas . Pandas is an open source Python package that is most widely used for data science/data analysis and machine learning tasks. It is built on top of another package named Numpy, which provides support for multi-dimensional arrays. -Pandas makes it simple to do many of the time consuming, repetitive tasks associated with working with data such as; data cleansing, data fill, data normalization, merges and joins, data visualization, statistical analysis, data inspection, loading and saving data, etc. | Pretty much used to analyze data fast, powerfully, and flexibly | . Unit 3 Sections 16 . Notes . What is a simulation? . A simulation is a tested scenario used for viewing results/outputs to prepare for them in real world situations | These can be used for games like dice rolling, spinners, etc | These can be used for practical things such as building structures, testing car crashes, and other things before engaging in them in the real world | These simulations can have the option of obeying real world physics (Gravity, collision) or they can go against these norms since this is a fictitious scenario, and couldn&#39;t happen in real life | . Simulations in Real Life . Simulations are used extremely frequently in real life applications. One of the most common examples of simulations are video games. A games physics engine can accurately simulate objects colliding | Another example is Blender, the software used in 3d animations class, here at Del Norte. Blender is made up of many small simulations, but one big one it uses is simulating the way light bounces off of and interacts with objects. | . Homework . import time # Define a function that updates the simulation def update_simulation(): # Update the state of the simulation here... # Prompt the user to enter the mass and radius of a planet mass = float(input(&quot;Enter the mass of the planet (in kilograms): &quot;)) radius = float(input(&quot;Enter the radius of the planet (in kilometers): &quot;)) # Calculate the gravity of the planet gravity = (6.67 * 10**-11 * mass) / (radius**2) print(f&quot;Gravity of planet: {gravity}&quot;) #Gravity of planet 1: Neptune #Gravity of planet 2: Saturn #Gravity of planet 3: Jupiter #Gravity of planet 4: Uranus # Run the simulation indefinitely while True: update_simulation() time.sleep(1) # Pause for 1 second between each update . Gravity of planet: 29180968.4670602 Gravity of planet: 28951451.382520344 Gravity of planet: 67089129.85402547 Gravity of planet: 23315153.5014559 . ValueError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb Cell 57 in &lt;cell line: 21&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; #Gravity of planet 1: Neptune &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; #Gravity of planet 2: Saturn &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; #Gravity of planet 3: Jupiter &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; #Gravity of planet 4: Uranus &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=18&#39;&gt;19&lt;/a&gt; # Run the simulation indefinitely &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; while True: &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=20&#39;&gt;21&lt;/a&gt; update_simulation() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; time.sleep(1) /Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb Cell 57 in update_simulation() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; def update_simulation(): &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; # Update the state of the simulation here... &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # Prompt the user to enter the mass and radius of a planet -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; mass = float(input(&#34;Enter the mass of the planet (in kilograms): &#34;)) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; radius = float(input(&#34;Enter the radius of the planet (in kilometers): &#34;)) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-15-STP.ipynb#Y113sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; # Calculate the gravity of the planet ValueError: could not convert string to float: &#39;&#39; . Example of a Simulation . In terms of coding, NBA 2K is a simulation because it uses a computer program to simulate the behavior and interactions of the various elements that make up a game of basketball. This includes the players, the ball, the court, and the rules of the game. To create this simulation, the developers of NBA 2K use a combination of algorithms, data structures, and mathematical calculations to model the behavior of these elements. For example, they may use algorithms to simulate the movement of the ball and the players on the court, and use data structures to store information about the teams, players, and game rules. Additionally, the developers may use mathematical calculations to model the physics of the game, such as the effects of gravity on the ball and the players, and the interactions between different objects on the court. . Unit 3 Sections 17-18 . Notes . What is Algorithmic Efficiency? . The ability of an algorithm to solve a problem in an efficient way An efficient algorithm solves a problem quickly and with a minimum amount of resources, such as time and memory. | . | How do we determine if an algorithm is efficient or not? One way we can do this is by determining the time complexity of the algorithm. | Another way is through space complexity. ### Heuristic solution | An heuristic solution is an approach to a problem that produces a solution that isn&#39;t necessarily optimal but can be used when normal methods take forever. | . | . Decidable problem vs Undecidable problem . A decidable problem is a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. In other words, a decidable problem is a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not. | . An undecidable problem problem is a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. This means that it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem. | . The Halting Problem . The halting problem is an example of an undecidable problem. It states that it is not always possible to correctly determine whether a code halts or runs forever. . There is no way to write an algorithm to analyze and determine whether a body of code can run forever or not. | . Homework . Traveling Merchant Problem Hacks: . What did you and your team discuss? (record below) . We discussed all the possible ways to start from Indianapolis and visit all the cities. We said that in order to get the shortest route, you have to take the shortest flight first, so go cincinnati, then figure out the shortest distances from there and continue on. . Describe the method used to solve the traveling merchant problem. (record below) . The method used was a heuristic solution. We go to the shortest travel from Indianapolis, then look at the neighboring cities. We continue to pick the shortest travel every time and follow that until the end. This makes the traveling more optimal with less distance traveled and less time consuming if it were to be a real life scenario. . Hacks . Come up with one situation in which a computer runs into an undecidable problem. Explain why it is considered an undecidable problem. . One situation in which a computer may run into an undecidable problem is when it is trying to determine whether a given mathematical statement is true or false. This problem, known as the axiomatic truth problem, is considered undecidable because there is no algorithm that can accurately determine the truth value of an arbitrary mathematical statement. The reason the axiomatic truth problem is undecidable is that it involves trying to determine the truth or falsity of an arbitrary statement, which may be impossible to do with complete accuracy. In mathematics, a statement is considered true if it can be proven to be true using a set of axioms and rules of inference. However, it is not always possible to prove the truth or falsity of a given statement using these methods. For example, the statement &quot;There are infinitely many prime numbers&quot; cannot be proven or disproven using the standard axioms of mathematics. . import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return print(&quot;Your number was found at&quot;, i) end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 x = 5500 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) linear_search(lst, x) # runs procedure . Found element after 5500 loops in 372 microseconds Your number was found at 5499 . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 55# replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . Element found after 12 loops in 6 microseconds . 54 . Graphs on Review Ticket . Link to see the Graphs/ReviewTicket . Looking at the graphs, even though both graphs contained the same x values, the 1st code gave me much higher values in microseconds(y) than the 2nd code. Therefore, the 2nd graph and code is more efficient. This is because it is finding the element in an overall less time(in microseconds) than the 1st graph. . Decidable Problem . def find_smallest_odd(n): # Set the smallest odd number to 1 smallest_odd = 1 # Set the current number to 1 current_num = 1 # Loop until the current number is greater than n while current_num &lt;= n: # If the current number is odd, update the smallest odd number if current_num % 2 == 1: smallest_odd = current_num # Break the loop since we have found the smallest odd number break # Increment the current number current_num += 1 # Return the smallest odd number return smallest_odd find_smallest_odd(20) #Since the smallest odd number that is less than or equal to 20 is 1, the output will be 1 . Code that runs forever . def is_prime(n): # Check if the number is less than 2, which is not considered prime if n &lt; 2: return False # Check if the number is divisible by any number less than itself for i in range(2, n): if n % i == 0: return False # If the number is not divisible by any number less than itself, it is prime return True # Set the current number to 2, which is the smallest prime number current_num = 2 # Set a flag to indicate whether the current number is prime is_prime = True # Loop indefinitely while True: current_num += 1 .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2014-17/2022/12/15/STP.html",
            "relUrl": "/apcsp%20week%2014-17/2022/12/15/STP.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Unit 3 Sections 17-18",
            "content": "Do Now!!! . Set up your notebook by either wgetting the lesson or tracking it by your own (We would recommend wgetting since there are some fill in the blanks!) | wget here: https://raw.githubusercontent.com/mmaxwu/Tri2-GroupFastpages/master/_notebooks/2022-12-dd-lesson.ipynb | . 3.17: Algorithm Efficiency . Purpose: . The purpose of this lesson is to help students understand how to make an efficient program and optimize it and understand its importance to the CSP curriculum. . What is Algorithmic Efficiency? . The ability of an algorithm to solve a problem in an efficient way An efficient algorithm solves a problem quickly and with a minimum amount of resources, such as time and memory. | . | How do we determine if an algorithm is efficient or not? One way we can do this is by determining the time complexity of the algorithm. | Another way is through space complexity. | . | . Traveling Merchant Problem Hacks: . What did you and your team discuss? (record below) . We discussed all the possible ways to start from Indianapolis and visit all the cities. We said that in order to get the shortest route, you have to take the shortest flight first, so go cincinnati, then figure out the shortest distances from there and continue on. . An heuristic solution is an approach to a problem that produces a solution that isn&#39;t necessarily optimal but can be used when normal methods take forever | . Describe the method used to solve the traveling merchant problem. (record below) . The method used was a heuristic solution. We go to the shortest travel from Indianapolis, then look at the neighboring cities. We continue to pick the shortest travel every time and follow that until the end. This makes the traveling more optimal with less distance traveled and less time consuming if it were to be a real life scenario. . 3.18: Undecidable Problems . Purpose: . The purpose of this lesson is to introduce students to the concept of undecidable problems in computer science and to explain why these problems are important. . Key vocabulary: . Decision problem | Decidable problem | Undecidable problem | . Decision Problem . A decision problem is a problem in computer science and mathematics that can be solved by a yes-no answer, also known as a binary answer. In other words, a decision problem is a problem for which there are only two possible outputs:&quot;yes&quot; or &quot;no&quot;. There are two types of decision problems that Collegeboard goes over: . Decidable Problems | Undecidable Problems | . A decidable problem is a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. In other words, a decidable problem is a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not. . An undecidable problem problem is a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. This means that it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem. . Decidable Problems . A decidable problem is an algorithm that can always have an output of yes or no given any input. It is always correct. . Example of a Decidable Problem . The procedure below tests to see if a number is divisible by 13. If it is, it returns true. If it isn&#39;t, it returns false. . def divideThirteen(number): if number % 13 == 0: return True else: return False print(divideThirteen(26)) print(divideThirteen(30)) . True False . Undecidable Problems . An Example of a Forever Running Code . The code keeps adding 1 to the variable number until number is no longer an integer(This is not the python data type &quot;integer&quot;, it&#39;s the integer in number theory). However, there is no end to this code, making the computer run forever. There is no halt to the code. . i = 0 number = 1 def integerTest(n): # Testing if the number is an integer if n%1 ==0: return True else: return False # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. while i == 0: number += 1 if integerTest(number) == False: i +=1 print(&quot;Done&quot;) . KeyboardInterrupt Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-12-14-Studentlesson9.ipynb Cell 11 in &lt;cell line: 10&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-14-Studentlesson9.ipynb#X13sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; return False &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-14-Studentlesson9.ipynb#X13sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-14-Studentlesson9.ipynb#X13sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; while i == 0: &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-14-Studentlesson9.ipynb#X13sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; number += 1 &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-14-Studentlesson9.ipynb#X13sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; if integerTest(number) == False: KeyboardInterrupt: . The Halting Problem . The halting problem is an example of an undecidable problem. It states that it is not always possible to correctly determine whether a code halts or runs forever. . There is no way to write an algorithm to analyze and determine whether a body of code can run forever or not. . Halting Problem Example: . In order to understand this, suppose that an algorithm was able to analyze whether a code halts or not. Let&#39;s call this algorithm HaltChecker. | HaltChecker analyzes the program,program P, and its input,input I. If program P halts with input I, HaltChecker returns an output of &quot;halts&quot;. If program P doesn&#39;t halt(runs forever) with input I, HaltChecker returns an output of &quot;never&quot;. For example, in the code where it tests if variable number, the code runs forever, so HaltChecker returns an output of &quot;never&quot;. | Then, we add another algorithm called Reverser which reverses HaltChecker&#39;s output. So, if &quot;never&quot; is the output of HaltChecker, then the output of Reverser is &quot;halts&quot;. It&#39;s also the same the other way around: if HaltChecker has an output of &quot;halts&quot;, then Reverser has an output of &quot;never. | We combine these algorithms into one entire body of code. | Since Reverser is the algorithm at the end, hence giving the ultimate output, notice how it prints &quot;never&quot; when in fact there is an end(As proved by HaltChecker), and how it also prints &quot;halts&quot; when there is in fact is no end to the code(Also proved by HaltChecker). As a result, HaltChecker is inaccurate and this is an undecidable problem. | . This Diagram Sums up the Entire Process in the Bulleted List: . Credits of diagram and example to Khan Academy . FAQ . Q: If Reverser is causing the problem, why not remove it? | A: Removing Reverser will remove the problems, however, we are looking for ways which create the problem of not outputting a correct result. One example is enough to prove that it is an undecidable problem since it proves that the code is not completely accurate. | . Extra Things to Notice . Note that while a computer may take a long time to run a section of code, it does not mean that the computer is going to run forever. | Humans are able to solve some undecidable problems. The entire Halting Problem example was to prove that computers cannot solve undecidable problems. | . Hacks . Come up with one situation in which a computer runs into an undecidable problem. Explain why it is considered an undecidable problem. . One situation in which a computer may run into an undecidable problem is when it is trying to determine whether a given mathematical statement is true or false. This problem, known as the axiomatic truth problem, is considered undecidable because there is no algorithm that can accurately determine the truth value of an arbitrary mathematical statement. The reason the axiomatic truth problem is undecidable is that it involves trying to determine the truth or falsity of an arbitrary statement, which may be impossible to do with complete accuracy. In mathematics, a statement is considered true if it can be proven to be true using a set of axioms and rules of inference. However, it is not always possible to prove the truth or falsity of a given statement using these methods. For example, the statement &quot;There are infinitely many prime numbers&quot; cannot be proven or disproven using the standard axioms of mathematics. . 3.17 Homework . Your homework for Algorithmic Efficiency is pretty simple. . Use the 1st code below and graph it (Desmos, TI Inpire Cas, e.t.c), change the x value only! | Label the number of loops done as x and the time (microseconds) to find the index as y | Connect the points | Do the same thing with the 2nd code | Compare the two graphs and explain which one of the two is more efficient and why (min. 2 sentences) | Insert images of the graph either in your blog or on review ticket | import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return print(&quot;Your number was found at&quot;, i) end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 x = 5500 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) linear_search(lst, x) # runs procedure . Found element after 5500 loops in 338 microseconds Your number was found at 5499 . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 55# replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . Element found after 12 loops in 6 microseconds . 54 . Graphs on Review Ticket . Looking at the graphs, even though both graphs contained the same x values, the 1st code gave me much higher values in microseconds(y) than the 2nd code. Therefore, the 2nd graph and code is more efficient. This is because it is finding the element in an overall less time(in microseconds) than the 1st graph. . 3.18 Homework: . Use the Jupyter notebook to write an algorithm that solves a decidable problem. You can use math or whatever else you would like to do. | Write code to get the computer to run forever. Check this example if you need help, but please come up with your own idea. | Homeworks, hacks, and classwork(filled in blanks) for both 3.17 and 3.18 are due on Thursday at 9:00 pm. -0.1 points for each day late. . Decidable Problem . def find_smallest_odd(n): # Set the smallest odd number to 1 smallest_odd = 1 # Set the current number to 1 current_num = 1 # Loop until the current number is greater than n while current_num &lt;= n: # If the current number is odd, update the smallest odd number if current_num % 2 == 1: smallest_odd = current_num # Break the loop since we have found the smallest odd number break # Increment the current number current_num += 1 # Return the smallest odd number return smallest_odd find_smallest_odd(20) #Since the smallest odd number that is less than or equal to 20 is 1, the output will be 1 . 1 . Code that runs forever . def is_prime(n): # Check if the number is less than 2, which is not considered prime if n &lt; 2: return False # Check if the number is divisible by any number less than itself for i in range(2, n): if n % i == 0: return False # If the number is not divisible by any number less than itself, it is prime return True # Set the current number to 2, which is the smallest prime number current_num = 2 # Set a flag to indicate whether the current number is prime is_prime = True # Loop indefinitely while True: current_num += 1 .",
            "url": "https://dereksol.github.io/Tera/lesson",
            "relUrl": "/lesson",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "3.16 Lesson",
            "content": "First Order of Business: Get your notebook . Open a terminal in vscode, run command: cd _notebooks, type &#39;wget&#39; and paste this link into said terminal and run it . | Take notes wherever you please, but you will be graded on participating . | . So, what is a simulation anyway? . A simulation is a tested scenario used for viewing results/outputs to prepare for them in real world situations . | These can be used for games like dice rolling, spinners, etc . | These can be used for practical things such as building structures, testing car crashes, and other things before engaging in them in the real world . | These simulations can have the option of obeying real world physics (Gravity, collision) or they can go against these norms since this is a fictitious scenario, and couldn&#39;t happen in real life . | . Big Question . Which of the following simulations could be the LEAST useful? . | A retailer trying to identify which products sold the most . | A restaurant determining the efficiency of robots | An insurance company studying the rain impact of cars | A sports bike company studying design changes to their new bike design | . If you guessed a bike company, you&#39;re wrong, because the retail simulation was the right answer. Simulating robots in food service, sudying rain impact on vehicles, and new bike design can contribute a lot more to society in comparison to seeing what products sell more than others. | . Next Big Question . If you were making a simulation for making a new train station, which of the following would be true about this simulation? . It could reveal potential problems/safety issues before construction starts | It cannot be used to test the train station in different weather | Simulation will add high costs to projects | Simulation is not needed because this train station already exists | . Potential Saftey was the right answer, because you need somewhere to test the safety and ethicness of what you&#39;re about to do before you start building it. Otherwise, let&#39;s just say you&#39;ll have a special plaque for FBI&#39;s Most Wanted | . Simulation 1: . Both programs below do the same thing. Given a height and a weight, they calculate how long it will take for a object to fall to the ground in a vacuum subjected to normal Earth levels of gravity. . However, the second one is a simulation. It calculates the distance the object has fallen every 0.1 seconds. This is useful for if you wanted a visual representation of a falling object, which pure math can&#39;t do as smoothly. . height = float(input(&quot;height in meters?&quot;)) weight = input(&quot;weight in pounds?&quot;) stuff = (2 * (height / 9.8))**(1/2) print(&quot;It will take&quot;, stuff,&quot;seconds for an object that weighs&quot;,weight,&quot;pounds&quot;,&quot;to fall &quot;,height,&quot;meters in a vacuum&quot;) . It will take 1.4285714285714286 seconds for an object that weighs 50 pounds to fall 10.0 meters in a vacuum . t = 0 g = 0 d = 0 false = True while false: t = t + 0.1 d = 9.8 / 2 * (t**2) if d &gt;= height: false = False #print(d) # if you want to print the distance every time it calculates it. Too long to output to a terminal, but this could be useful to display graphically. #print(t) print(t) print(d) . 1.5000000000000002 11.025000000000002 . Simulation 2: . This simulation is made in order to simulate movement on a 2d plane vs a 3d plane. . | How it works: we have multiple variables, if statements and equations under a while command in order to randomy generate steps on a 2d plane. Once it reaches the set destination, it will say that the man made it home after x amount of steps. . | For the 3D plane, it takes a lot longer due to how big and open the 3d environment is, so there are more if statements in the 3d plane . | . (explain further) . import random x = 0 y = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): step = random.randrange(4) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 turn = turn + 1 if x == 0 and y == 0: nights = nights + 1 print(&quot;The Man Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y != 0: print(&quot;(&quot;, x,y, &quot;)&quot;) if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average, &quot;Ones that when&#39;t too long &quot;, stopped) . The Man Has Made It Home After 4 Turns ( 440 654 ) ( 1574 1142 ) ( 1988 1484 ) ( 2274 2238 ) ( 1424 2272 ) ( 913 3295 ) ( 509 3495 ) ( 261 3657 ) ( -400 3144 ) ( -1981 3347 ) Caped The Man Has Made It Home After 44846 Turns The Man Has Made It Home After 4 Turns ( -905 287 ) ( -966 354 ) ( -538 12 ) ( -319 -173 ) ( -253 -321 ) ( 33 -711 ) The Man Has Made It Home After 6716252 Turns ( 393 447 ) ( 261 605 ) The Man Has Made It Home After 2691676 Turns ( -673 -149 ) ( 212 784 ) ( 512 568 ) ( 1040 1556 ) ( 1247 2715 ) ( 602 1788 ) ( 154 2014 ) ( -166 2212 ) ( -917 2507 ) ( -2085 3059 ) Caped The Man Has Made It Home After 654 Turns The Man Has Made It Home After 680 Turns ( -22 -652 ) ( 769 -147 ) ( 780 -70 ) ( 522 -94 ) The Man Has Made It Home After 4893306 Turns ( 791 121 ) ( 710 -890 ) ( 1192 -792 ) ( 2243 -531 ) ( 3484 220 ) ( 3768 444 ) ( 4918 1976 ) ( 4889 2721 ) ( 4359 3667 ) ( 4854 4236 ) Caped The Man Has Made It Home After 2 Turns The Man Has Made It Home After 18 Turns The Man Has Made It Home After 124 Turns The Man Has Made It Home After 4 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 6 Turns The Man Has Made It Home After 506 Turns The Man Has Made It Home After 4852 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 4 Turns The Man Has Made It Home After 401730 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 2 Turns The Man Has Made It Home After 276 Turns The Man Has Made It Home After 12 Turns The Man Has Made It Home After 18 Turns ( 427 143 ) ( 542 -620 ) ( 989 -1691 ) ( 2234 -1692 ) ( 1859 -2113 ) ( 1269 -2511 ) ( 592 -2206 ) ( 1028 -2328 ) ( 1025 -3321 ) ( 588 -2416 ) Caped . KeyboardInterrupt Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb Cell 10 in &lt;cell line: 9&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X12sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; y = y-1 &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X12sZmlsZQ%3D%3D?line=19&#39;&gt;20&lt;/a&gt; turn = turn + 1 &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X12sZmlsZQ%3D%3D?line=21&#39;&gt;22&lt;/a&gt; if x == 0 and y == 0: &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X12sZmlsZQ%3D%3D?line=22&#39;&gt;23&lt;/a&gt; nights = nights + 1 &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X12sZmlsZQ%3D%3D?line=23&#39;&gt;24&lt;/a&gt; print(&#34;The Man Has Made It Home After &#34;, turn, &#34;Turns&#34;) KeyboardInterrupt: . import random x = 0 y = 0 z = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): #rando movement step = random.randrange(6) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 if step == 4: z = z+1 if step == 5: z = z-1 #Turn counter turn = turn + 1 #Goal check if x == 0 and y == 0 and z == 0: nights = nights + 1 print(&quot;The Bird Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y + z != 0: print(&quot;(&quot;, x,y, &quot;) &quot;,&quot;| &quot;, z) #Too long Stoper if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 z = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Avaerage&quot;, average,&quot;Ones that when&#39;t too long &quot;, stopped) . The Bird Has Made It Home After 2 Turns The Bird Has Made It Home After 2 Turns The Bird Has Made It Home After 2 Turns ( -185 525 ) | 380 ( -293 379 ) | 498 ( -534 1074 ) | 828 ( 176 613 ) | 567 . KeyboardInterrupt Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb Cell 11 in &lt;cell line: 10&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X13sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; turns = [] &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X13sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; while (nights &lt; 100): &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X13sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; #rando movement &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X13sZmlsZQ%3D%3D?line=11&#39;&gt;12&lt;/a&gt; step = random.randrange(6) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X13sZmlsZQ%3D%3D?line=12&#39;&gt;13&lt;/a&gt; if step == 0: &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X13sZmlsZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; x = x+1 File /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/random.py:215, in Random.randrange(self, start, stop, step, _int) 213 if stop is None: 214 if istart &gt; 0: --&gt; 215 return self._randbelow(istart) 216 raise ValueError(&#34;empty range for randrange()&#34;) 218 # stop argument supplied. File /Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/random.py:255, in Random._randbelow_with_getrandbits(self, n) 253 getrandbits = self.getrandbits 254 k = n.bit_length() # don&#39;t use (n-1) here because n can be 1 --&gt; 255 r = getrandbits(k) # 0 &lt;= r &lt; 2**k 256 while r &gt;= n: 257 r = getrandbits(k) KeyboardInterrupt: . Simulations in the wild . Simulations are used extremely frequently in real life applications. One of the most common examples of simulations are video games. A games physics engine can accurately simulate objects colliding . Another example is Blender, the software used in 3d animations class, here at Del Norte. Blender is made up of many small simulations, but one big one it uses is simulating the way light bounces off of and interacts with objects. . HW !!! . Create a simulation. It can be anything, just has to simulate something. . Some ideas: . Two objects colliding | Gravity on other planets | . AND . Find an example of a simulation in a software/game you use, screenshot, and explain how it is a simulation . import time # Define a function that updates the simulation def update_simulation(): # Update the state of the simulation here... # Prompt the user to enter the mass and radius of a planet mass = float(input(&quot;Enter the mass of the planet (in kilograms): &quot;)) radius = float(input(&quot;Enter the radius of the planet (in kilometers): &quot;)) # Calculate the gravity of the planet gravity = (6.67 * 10**-11 * mass) / (radius**2) print(f&quot;Gravity of planet: {gravity}&quot;) #Gravity of planet 1: Neptune #Gravity of planet 2: Saturn #Gravity of planet 3: Jupiter #Gravity of planet 4: Uranus # Run the simulation indefinitely while True: update_simulation() time.sleep(1) # Pause for 1 second between each update . Gravity of planet: 54212767.98021029 Gravity of planet: 28951451.382520344 Gravity of planet: 67084535.02285952 Gravity of planet: 23315153.5014559 . ValueError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb Cell 15 in &lt;cell line: 17&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; # Run the simulation indefinitely &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; while True: &gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; update_simulation() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=17&#39;&gt;18&lt;/a&gt; time.sleep(1) /Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb Cell 15 in update_simulation() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; def update_simulation(): &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; # Update the state of the simulation here... &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; # Prompt the user to enter the mass and radius of a planet -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; mass = float(input(&#34;Enter the mass of the planet (in kilograms): &#34;)) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; radius = float(input(&#34;Enter the radius of the planet (in kilometers): &#34;)) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-12-13-Studentlesson8.ipynb#X22sZmlsZQ%3D%3D?line=10&#39;&gt;11&lt;/a&gt; # Calculate the gravity of the planet ValueError: could not convert string to float: &#39;&#39; . Example of a Simulation . In terms of coding, NBA 2K is a simulation because it uses a computer program to simulate the behavior and interactions of the various elements that make up a game of basketball. This includes the players, the ball, the court, and the rules of the game. To create this simulation, the developers of NBA 2K use a combination of algorithms, data structures, and mathematical calculations to model the behavior of these elements. For example, they may use algorithms to simulate the movement of the ball and the players on the court, and use data structures to store information about the teams, players, and game rules. Additionally, the developers may use mathematical calculations to model the physics of the game, such as the effects of gravity on the ball and the players, and the interactions between different objects on the court. .",
            "url": "https://dereksol.github.io/Tera/lesson/2022/12/13/Studentlesson8.html",
            "relUrl": "/lesson/2022/12/13/Studentlesson8.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Extra Credit 12/13",
            "content": "Kathyleen Beveridge . . Born in Vietnam, moved to San Diego in 2004 | Received her bachelors degree in Santa Clara bay area, then received a degree at USC | Lives by a mission statement, says my mission in life is to not merely survive, but to thrive and to do so with passion… Career . | First job was an investment banker at Wells Fargo, was a stock broker, mutual funds | Went back to university and switch careers after at High Tech | Took six months off in San Diego, learned how to surf | Switched again, went to Qualcomm, then left Companies . | HP Inc: Create technology that makes life better for everyone, everywhere | Qualcomm: Inventing the tech the world loves | Thermo Fisher Scientific: Enable our customers to make the world healthier, cleaner, and safer | Every company wants to code for the betterment of life and society | Thermo Fisher products that they make, make a massive impact | Her title is senior director for marketing and sales | . Kris Porter . . Title has been Software Engineer, SRE, DevOps, Infrastructure Engineer | Livermore High School alum, enjoyed STEM classes | Went to UCLA for Electrical Engineering, focused on Communication Systems and Computer Networks | Master Degree in Electrical Engineering for Cal State LA | Center for Embedded Networked Sensors Career . | Finished graduate school, stock market crashed | Worked at a shop that was fixing Mac computers | Systems Engineer at a start up, GPM | NBC Universal, Streaming media infrastructure | Intro to DevOps, transition to Qualcomm | Working at Twitter Continuous Learning highlights . | CCNA training | Machine Learning and Deep Learning (Qualcomm) | Python (Udemy) | Data Structures, Algorithms and System Design for Interviews | Twitter University Projects he has worked on . | Streaming Media Infrastructure for the 2012 Olympic Games | Analytics Infrastructure Projects (LocationSmart, Qualcomm) | Twitter Projects, New DataCenter Deployment, Migrating HomeTimeline to GraphQL | .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2012/2022/12/13/ExtraCredit.html",
            "relUrl": "/apcsp%20week%2012/2022/12/13/ExtraCredit.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "wget https://raw.githubusercontent.com/aidenhuynh/CS_Swag/master/_notebooks/2022-11-30-randomvalues.ipynb . Libraries . A library is a collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | These precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | A library may also contain documentation, configuration data, message templates, classes, and values, etc. | . Why are libraries important? . Using Libraries makes Python Programming simpler and convenient for the programmer. | One example would be through looping and iteration, as we don’t need to write the same code again and again for different programs. | Python libraries play a very vital role in fields of Machine Learning, Data Science, Data Visualization, etc. | . A few libraries that simplify coding processes: . Pillow allows you to work with images. | Tensor Flow helps with data automation and monitors performance. | Matplotlib allows you to make 2D graphs and plots. | . The AP Exam Refrence Sheet itself is a library! . Hacks: . Research two other Python Libraries NOT DISCUSSED DURING LESSON and make a markdown post, explaining their function and how it helps programmers code. . API&#8217;s . An Application Program Interface, or API, contains specific direction for how the procedures in a library behave and can be used. | An API acts as a gateway for the imported procedures from a library to interact with the rest of your code. | . Activity: Walkthrough with NumPy . Install NumPy on VSCode: Open New Terminal In VSCode: | pip3 install --upgrade pip | pip install numpy | | . REMEMBER: When running library code cells use Python Interpreter Conda (Version 3.9.12) . Example of using NumPy for arrays: . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . [[1 2 3] [4 5 6] [7 8 9]] . Example of using NumPy for derivatives: . import numpy as np # defining polynomial function var = np.poly1d([2, 0, 1]) print(&quot;Polynomial function, f(x): n&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative, f(x)&#39;=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=5 f(x)&#39;=&quot;, derivative(5)) . Polynomial function, f(x): 2 2 x + 1 Derivative, f(x)&#39;= 4 x When x=5 f(x)&#39;= 20 . Random Values . Random number generation (RNG) produces a random number (crazy right?) This means that a procedure with RNG can return different values even if the parameters (inputs) do not change | . | CollegeBoard uses RANDOM(A, B), to return an integer between integers A and B. RANDOM(1, 10) can output 1, 2, 3, 4, 5, 6, 7, 8, 9, or 10 | In Python, this would be random.randint(A, B), after importing Python&#39;s &quot;random&quot; library (import random) | JavaScript&#39;s works a little differently, with Math.random() returning a value between 0 and 1. To match Python and CollegeBoard, you could make a procedure like this | . | . | . CollegeBoard Example: What is the possible range of values for answ3 . Convert the following procedure to Python, then determine the range of outputs if n = 5. . PROCEDURE Dice(n) sum ← 0 REPEAT UNTIL n = 0 sum ← sum + RANDOM(1, 6) n ← n - 1 RETURN sum . import random # Fill in the blank def Dice(n): sum = 0 while n&gt;= 0: sum += random.randint(1, 6) n -= 1 return sum Dice(5) . 19 . Homework . Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier). . | Using NumPy and only coding in python cell, find the answer to the following questions: a. What is the derivative of 2x^5 - 6x^2 + 24x? b. What is the derivative of (13x^4 + 4x^2) / 2 when x = 9? . | Suppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order. . | import random n = int(input(&quot;How many numbers would you like to generate?&quot;)) a = int(input(&quot;Give the lowest number you want all numbers to be picked from?&quot;)) b = int(input(&quot;Give the highest number you want all numbers to be picked from?&quot;)) numbers = [random.randint(a, b) for _ in range(n)] # I input the range from numbers 1-100 evens = [] odds = [] for number in numbers: if number % 2 == 0: evens.append(number) else: odds.append(number) print(evens) print(odds) . [82, 90, 36, 50, 74, 62, 42, 66, 74, 8] [39, 25, 43, 35, 15, 49, 85, 83, 27, 59] . import numpy as np poly = np.poly1d([2, 0, 0, -6, 24, 0]) derivative = poly.deriv() print(&quot;The derivative of n&quot; + str(poly) + &quot; n&quot; + &quot;is&quot; + &quot; n&quot; + str(derivative)) . The derivative of 5 2 2 x - 6 x + 24 x is 4 10 x - 12 x + 24 . import numpy as np n = np.poly1d([13, 0, 4, 0, 0]) d = np.poly1d([2]) derivative = ((d * n.deriv()) - (d.deriv() * n)) / 4 result = derivative(9) print(&quot;The derivative of n&quot; + str(n) + &quot; n divided by&quot; + str(d) + &quot; nis: n&quot; + str(derivative)) print(&quot; nWhen x = 9, f&#39;(x) = n&quot; + str(round(result))) . The derivative of 4 2 13 x + 4 x divided by 2 is: 3 26 x + 4 x When x = 9, f&#39;(x) = 18990 . import random animals = [&#39;dog1&#39;, &#39;dog2&#39;, &#39;dog3&#39;, &#39;dog4&#39;, &#39;dog5&#39;, &#39;dog6&#39;, &#39;dog7&#39;, &#39;dog8&#39;, &#39;dog9&#39;, &#39;dog10&#39;, &#39;cat1&#39;, &#39;cat2&#39;, &#39;cat3&#39;, &#39;cat4&#39;, &#39;cat5&#39;, &#39;cat6&#39;, &#39;cat7&#39;, &#39;cat8&#39;, &#39;cat9&#39;, &#39;cat10&#39;] random.shuffle(animals) print(animals) . [&#39;dog3&#39;, &#39;dog9&#39;, &#39;cat2&#39;, &#39;dog4&#39;, &#39;dog5&#39;, &#39;cat4&#39;, &#39;cat8&#39;, &#39;dog8&#39;, &#39;cat10&#39;, &#39;dog6&#39;, &#39;cat1&#39;, &#39;cat5&#39;, &#39;cat7&#39;, &#39;dog7&#39;, &#39;cat9&#39;, &#39;cat6&#39;, &#39;cat3&#39;, &#39;dog10&#39;, &#39;dog2&#39;, &#39;dog1&#39;] . Hacks . Two Other Python Libraries . Keras . Keras is a deep learning API written in Python, running on top of the machine learning platform TensorFlow. It was developed with a focus on enabling fast experimentation. Being able to go from idea to result as fast as possible is key to doing good research. | It is simple, flexible, and powerful. | Keras reduces developer cognitive load to free you to focus on the parts of the problem that really matter. | Keras adopts the principle of progressive disclosure of complexity: simple workflows should be quick and easy, while arbitrarily advanced workflows should be possible via a clear path that builds upon what you&#39;ve already learned. | Keras provides industry-strength performance and scalability: it is used by organizations and companies including NASA, YouTube, or Waymo. | . Pandas . Pandas is an open source Python package that is most widely used for data science/data analysis and machine learning tasks. It is built on top of another package named Numpy, which provides support for multi-dimensional arrays. -Pandas makes it simple to do many of the time consuming, repetitive tasks associated with working with data such as; data cleansing, data fill, data normalization, merges and joins, data visualization, statistical analysis, data inspection, loading and saving data, etc. | Pretty much used to analyze data fast, powerfully, and flexibly | .",
            "url": "https://dereksol.github.io/Tera/jupyter/libraries",
            "relUrl": "/jupyter/libraries",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "3.9/3.11 Hacks",
            "content": "Flowchart . Link to flowchart . import random def RandomNumGen(x): RandomNumGenList = [] while x &gt; 0: RandomNumGenList.append(random.randint(1,20)) x -= 1 print(RandomNumGenList) return max(RandomNumGenList) RandomNumGen(3) . [3, 2, 13] . 13 .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2014-17/2022/12/09/3.9to11Hacks.html",
            "relUrl": "/apcsp%20week%2014-17/2022/12/09/3.9to11Hacks.html",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Units 2/3 Vocab",
            "content": "Unit 2 Binary/Data Terms . Bits . A bit is a unit of information that can have only two values: 0 or 1. It is the smallest unit of information that can be stored or processed by a computer. Bits are typically used to represent binary data, which is data that is encoded using only two possible values. In Python you can use &quot;int&quot; data type to represent binary data as a sequence of bits. . binary_number = 0b1010 # represents 1010 as an integer . Bytes . A byte is a group of 8 bits. It is a unit of information that can hold a single character in a computer&#39;s memory. . Hexadecimals/Nibbles . a hexadecimal is a base-16 number represented using the symbols 0-9 and A-F. Hexadecimals are often used to represent colors in web development, as they can be more concise and easier to read than longer binary numbers. | A nibble is a unit of data that is half of a byte (eight bits). It is often represented using a hexadecimal digit, which can represent a value from 0 to 15 in decimal. | . Unsigned Integer . An unsigned integer is a type of integer that can only represent non-negative (greater than or equal to zero) whole numbers. It is called &quot;unsigned&quot; because it does not have a sign bit to indicate whether the number is positive or negative. This means that an unsigned integer can represent a larger range of values than a signed integer, which uses a sign bit to indicate the sign of the number. . Signed Integer . An integer is a whole number that can be either positive or negative. It has no decimal point and can store very large numbers. By default, Python integers are stored as signed integers, which means they can represent both positive and negative numbers. . 10 -10 12345678901234567890 -9876543210987654321 # All these numbers a valid integers in Python . Floating Point . A floating point number is a number with a decimal point. It is used to represent real numbers, such as 3.14159 or -0.01. . For example, the following are all valid floating point numbers in Python: . 3.14 -10.6 0.0 12345.6789 . Boolean . A boolean is a data type that represents a truth value. It can have two values: True or False. Booleans are often used in conditional statements to control the flow of a program . x = True if x: print(&quot;x is True&quot;) else: print(&quot;x is False&quot;) . ASCII . ASCII (American Standard Code for Information Interchange) is a character encoding standard that represents text as a series of numbers. It defines a mapping between numerical values and characters, with each character being represented by a unique number between 0 and 127. . Unicode . Unicode is a character encoding standard that represents text as a series of numbers. It is a widely used standard that supports a much larger range of characters than ASCII, including non-Latin scripts and emojis. . In Python, Unicode characters are represented using the str data type, which is a sequence of Unicode code points. . RGB . A problem solving approach (algorithm) to find a satisfactory solution where finding an optimal or exact solution is impractical or impossible. . Lossy . In the context of digital media, &quot;lossy&quot; refers to a type of data compression that reduces the quality of the data in order to save space. Lossy compression algorithms remove data that is not perceived by the human eye or ear, resulting in a smaller file size but lower quality. In Python, you can use various libraries and modules to work with lossy data formats. For . from PIL import Image # Open a JPEG image and save it as a PNG image image = Image.open(&#39;image.jpg&#39;) image.save(&#39;image.png&#39;) . Lossless . Lossless compression algorithms remove redundant or unnecessary data from the file, but do not remove any data that is needed to accurately represent the original data. Lossless compression is commonly used for text, data, and other types of files where it is important to preserve the accuracy of the data. For example, the ZIP file format and the PDF document format are both lossless formats that are widely used for storing and distributing digital documents. . import zipfile # Create a ZIP file with zipfile.ZipFile(&#39;documents.zip&#39;, &#39;w&#39;) as z: z.write(&#39;document1.txt&#39;) z.write(&#39;document2.txt&#39;) # Extract the contents of the ZIP file with zipfile.ZipFile(&#39;documents.zip&#39;, &#39;r&#39;) as z: z.extractall() . Unit 3 Algorithm/Programming Terms . Variables . A variable is a named location in memory that stores a value or reference to a value. When you create a variable, you can specify the value that you want to store in it. You can then use the variable to refer to the value throughout your program. . For example, you might create a variable called name and store your name in it: . name = &quot;Derek&quot; . Data Types . In Python, data types are used to define the type of a value that can be stored in a variable. . ex: &quot;int&quot;, &quot;float&quot;, &quot;str&quot;, etc. . Assignment Operators . assignment operators are used to assign a value to a variable. The most basic assignment operator is the = operator, which assigns the value on the right side of the operator to the variable on the left side. . x = 10 y = 15 . Lists . A list is a collection of items that are ordered and changeable. Lists are written with square brackets and the items are separated by commas. . superheroes = [ &quot;Superman&quot;, &quot;Batman&quot;, &quot;Wonder Woman&quot;, &quot;The Flash&quot;, &quot;Green Lantern&quot;, &quot;Aquaman&quot;, &quot;Martian Manhunter&quot;, &quot;Cyborg&quot;, &quot;Black Canary&quot;, &quot;Captain Marvel&quot;] . 2D Lists . A 2D list is a list of lists. It is a data structure that allows you to store a collection of items, where each item is a list itself. . matrix = [ [1, 2, 3], [4, 5, 6], [7, 8, 9] ] . Dictionaries . A dictionary is a collection of key-value pairs. It is an unordered data structure that allows you to store and retrieve data using keys rather than indices. . contacts = { &quot;Alice&quot;: &quot;555-1234&quot;, &quot;Bob&quot;: &quot;555-5678&quot;, &quot;Eve&quot;: &quot;555-9101&quot; } . Class . a class is a blueprint for creating objects. It defines the properties and behaviors that the objects will have. . class Dog: def __init__(self, name, breed, age): self.name = name self.breed = breed self.age = age . Algorithms, Sequences, Selection, Iteration . Algorithms: a list set of instructions, used to solve problems or perform tasks. . Sequence: algorithms do tasks in the order of specification. . Selection: helps choose two different outcomes based off a decision. . Iteration: if a condition is true, then the code can repeat. . Expressions . An expression is a piece of code that returns a value. Expressions are made up of variables, operators, and function calls, and they can be used in a variety of contexts, such as assignments, function calls, and control structures. . Comparison Operators . Comparison operators are used to compare the values of two expressions. They return a Boolean value indicating whether the comparison is true or false. . ex: &#39;x == y&#39;: returns True if x is equal to y, and False otherwise. . Boolean Expressions and Selection . a Boolean expression is an expression that evaluates to either True or False. Boolean expressions are often used in control structures, such as if statements and while loops, to determine whether a block of code should be executed. . Here is an example of an if statement using a Boolean expression in Python: . x = 5 if x &gt; 0: print(&quot;x is positive&quot;) . x is positive . Boolean Expressions and Iteration . You can use Boolean expressions in iteration structures, such as for loops and while loops, to control the flow of the loop. . Here is an example of a while loop using a Boolean expression in Python: . x = 5 while x &gt; 0: print(x) x -= 1 . 5 4 3 2 1 . Truth Tables . A truth table is a way to represent the relationship between different logical statements or expressions. It lists all of the possible combinations of input values for the statements or expressions, and shows the corresponding output values that result. . have two values . 0 = off, false . 1 = on, true . Examples . 0 and 0 = false. And operator means both needs to be true. . 0 or 1 = true. Either or. . Use this in conditionals (selection). . XOR = exclusive or. . Or = similar to true or false. - . Ex: A is true, B is false . Characters . A character is a single Unicode character, which is a unit of text that represents a letter, number, symbol, or other type of character. Unicode is a standardized character encoding system that represents characters from many different languages and scripts. . Strings . A string is a sequence of characters. Strings are used to represent text and are often used to store and manipulate data. . string1 = &#39;Hello&#39; print(string1[0]) # Output: &#39;H&#39; print(string1[2]) # Output: &#39;l&#39; . H l . Length . The len() function returns the length of an object. For example, if you have a string, a list, or a tuple, you can use len() to determine the number of elements it contains. . Here&#39;s an example of using len() with a string: . lst = [1, 2, 3, 4, 5] len(lst) . 5 . Concatenation . Concatenation refers to the operation of joining two or more strings together to create a single string. This can be done using the + operator, which is used to add two or more strings together. . s1 = &#39;Hello&#39; s2 = &#39;world&#39; s3 = s1 + &#39; &#39; + s2 print(s3) . Hello world . Upper . Used to check if the argument contains any uppercase characters. . Lower . Returns the lowercase string from the given string. . Traversing Strings . The process of going through a String one character at a time, often using loops. . Python If, Elif, Else Conditionals . If: statement executes a piece of code when one statement is false and the following statement is true. . Elif: first if statement isn&#39;t true, but want to check for another condition. . Else: executes if &quot;if&quot; isn&#39;t true. . hours = 30 sal = &quot;&quot; experienced = True # using operators to determine the salary if (hours &gt;= 10): sal = &quot;130k&quot; elif (hours &gt;= 8): sal = &quot;90k&quot; else: sal = &quot;50k&quot; experienced = False # printing the final statement print (&#39;Derek has a salary of:&#39; , sal,&#39;and has experience:&#39; , experienced) . Derek has a salary of: 130k and has experience: True . Nested Selection Statements . Conditional within a conditional. When more than one decision must be made before the appropriate action can be taken. . Python For, While loops with Range, with List . Returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and stops before a specified number. . Combining loops with conditionals to break, continue . A statement that controls the flow of execution depending on some condition. . Procedural Abstraction . A function encapsulates a bundle of program statements (code): The function gives us a name for the statements, a way to invoke them at a high-level. . Python Def procedures . def is the keyword for defining a function. . def func1(): print(&quot;I am learning Python Function&quot;) . Parameters . A parameter is the variable listed inside the parentheses in the function definition. An argument is the value that is sent to the function when it is called. . def f(data): return data * 5 . Return Values . The value that a function returns to the caller is generally known as the function&#39;s return value. All Python functions have a return value, either explicit or implicit. . def addition(first_number, second_number): answer = first_number + second_number return answer .",
            "url": "https://dereksol.github.io/Tera/2022/12/07/vocab.html",
            "relUrl": "/2022/12/07/vocab.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Unit 3 Sections 12-13",
            "content": "Calling Procedures . Slide 1: . A ___ is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as ___ or ___, depending on the programing language. | Parameters are input values of a procedure. ___ specify the values of the parameters when procedure is called. | A procedure call interrupts the ___ execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was ___. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of ___. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and ___ the arguments. | If the procedure returns some sort of data like a __ or ___, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . def convertFahrenheit(): # code goes here return celsius convertFahrenheit(outsideTemp) . Developing Procedures . Slide 8: . Picking a ___ name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . currentGrade &lt;- currentPoints / 40 currentGrade &lt;- current Grade * 100 if currentGrade &gt; quizGrade quizGrade &lt;- currentGrade . Procedural Abstraction . One type of abstraction is __ abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing __ in a program | Subdivision of a program into separate subprograms is called __ | A procedural abstraction may __ shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a __ procedure | Making sure to include the right arguments so the __ can do what its supposed to do is crucial | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . def procedure() # code goes here return # code goes here .",
            "url": "https://dereksol.github.io/Tera/lessons/2022/12/07/developing-procedures.html",
            "relUrl": "/lessons/2022/12/07/developing-procedures.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Unit 3 Sections 12-13",
            "content": "Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . def convertFahrenheit(temperature): celsius = temperature -32 celsius = celsius * 5/9 return celsius outsideTemp = input(&quot;What is the temperature outside?&quot;) outsideTemp = convertFahrenheit(int(outsideTemp)) print(outsideTemp) . -15.0 . Developing Procedures . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . quizGrade = 25 def currentGrade(currentPoints): currentGrade = currentPoints / 40 currentGrade = currentGrade * 100 return currentGrade newPoints = int(input(&quot;What did you get out of 40?&quot;)) newPercent = (currentGrade(int(newPoints))) if (newPoints &gt; quizGrade): newquizGrade = newPercent print(&quot;your new grade is &quot; + str(newquizGrade) + &quot;%&quot;) else: print(&quot;your grade is still &quot; + str(quizGrade) + &quot;/40&quot;) . your new grade is 87.5% . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a prewritten procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . Complexity Example . One of the biggest advantages of procedural abstraction is managing complexity. . Think about the process of simplifying the code? What do you think the advantage of the code segment on the left is? . Code Segment 1 Code Segment 2 . ROTATE_LEFT() | detourLeft() | . MOVE_FORWARD()|turnCorner()| ROTATE_RIGHT |MOVE_FORWARD()| MOVE_FORWARD()|MOVE_FORWARD()| MOVE_FORWARD() ROTATE_RIGHT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() ROTATE_LEFT() MOVE_FORWARD() MOVE_FORWARD MOVE_FORWARD() . Hacks . Write a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | 0.1 points will be deducted for late submissions | Submit the notes with all blanks filled in (scored out of 0.5 points) and the python procedure (scored out of 0.5 points) by Monday 12/12 at 11:59 PM. | . class Student: marks = [] def getData(self, rn, name, m1, m2, m3): Student.rn = rn Student.name = name Student.marks.append(m1) Student.marks.append(m2) Student.marks.append(m3) def displayData(self): print(&quot;Roll Call Number: &quot;, Student.rn) print(&quot;Name is: &quot;, Student.name) print(&quot;Grade in subject 1: &quot;, Student.marks[0]) print(&quot;Grade in subject 2: &quot;, Student.marks[1]) print(&quot;Grade in subject 3: &quot;, Student.marks[2]) print(&quot;Average Grade of: &quot;, self.average()) GradeAverage = self.average() if (GradeAverage &gt; 90): print(&quot;your an A student&quot;) elif (GradeAverage &gt; 80): print(&quot;your a B Student&quot;) else: print(&quot;do better&quot;) def total(self): m = Student.marks return(Student.marks[0] + Student.marks[1] +Student.marks[2]) def average(self): return ((Student.marks[0] + Student.marks[1] +Student.marks[2])/3) r = int (input(&quot;Enter the roll call number: &quot;)) name = input(&quot;Enter the name: &quot;) m1 = int (input(&quot;Enter the Grade in first subject: &quot;)) m2 = int (input(&quot;Enter the Grade in second subject: &quot;)) m3 = int (input(&quot;Enter the Grade in third subject: &quot;)) s1 = Student() s1.getData(r, name, m1, m2, m3) s1.displayData() . Roll Call Number: 26 Name is: Derek Sol Grade in subject 1: 81 Grade in subject 2: 84 Grade in subject 3: 93 Average Grade of: 86.0 your a B Student .",
            "url": "https://dereksol.github.io/Tera/lessons/2022/12/07/Studentlesson6.html",
            "relUrl": "/lessons/2022/12/07/Studentlesson6.html",
            "date": " • Dec 7, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Student Teaching Portfolio",
            "content": "Unit 3 Sections 1-2 . Notes . Variable is an abstraction inside a program that can hold a value | organizes data by labeling it with descriptive name | consists of three parts: name, value, and type | When naming variables, keep it easy and simple to read, because it can be messy and confusing later on | types of data, integer is a number, text/string is a word, and Boolean is data that determines if something is true or false | assignment operator allows a program to change the value represented by a variable, used to assign values to variables | value stored in a variable will be the most recent value assigned | . Data Abstraction . Method used in coding to represent data in a useful form, by taking away aspects of data that aren&#39;t being used in the situation | Variables and lists are primary tools in data abstraction | Provides a separation between the abstract properties of a data type and the concrete details of its representation | . Lists &amp; Strings . List = ordered sequence of elements | Element = individual value in a list that is assigned to a unique index | Index = a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index | String = ordered sequence of characters (Letters, numbers, special characters) | . What are Lists? . Allow for data abstraction | Bundle variables together | Store multiple elements | Allows multiple related items to be treated as a single value | Give one name to a set of memory cells | Can keep adding elements to it as needed | Can store elements as a single variable by using a list | . 3 Types of List Operations . Assigning values to a list at certain indices | Creating an empty list and assigning it to a variable | Assigning a copy of one list to another list (setting one list equal to another list) | Practice . colorList=[&quot;green&quot;, &quot;red&quot;, &quot;pink&quot;, &quot;purple&quot;, &quot;blue&quot;, &quot;brown&quot;] print(str(colorList)) . [&#39;green&#39;, &#39;red&#39;, &#39;pink&#39;, &#39;purple&#39;, &#39;blue&#39;, &#39;brown&#39;] . Homework/Hacks . print(&quot;General Knowledge Trivia&quot;) QandA = { &quot;#1) What is the largest mammal?&quot;: &quot;blue whale&quot;, &quot;#2) What is the largest organ in the body?&quot;: &quot;skin&quot;, &quot;#3) What galaxy do we live in?&quot;: &quot;milky way&quot;, &quot;#4) Who founded Amazon?&quot;: &quot;jeff bezos&quot;, &quot;#5) What is the world&#39;s largest ocean?&quot;: &quot;pacific ocean&quot;, } def qandresp(question): # display question, return inputted response print(question) resp = input() return resp correct = 0 # Setup print(&quot;Current number of questions: &quot; + str(len(QandA))) # iterate over each key for key in QandA: rsp = qandresp(key) # save user&#39;s response to a variable rsp rsp = rsp.lower() # answer is case sensitive, so match response to lowercase for answer key to work if rsp == QandA[key]: # check if the response is equal to the answer in the dictionary print(f&quot;Correct!&quot;) correct += 1 else: print(f&quot;{rsp} is incorrect &quot;) percent = str(round(correct/len(QandA), 2)*100) # calculate percentage print(&quot;You scored &quot; + str(correct) +&quot;/&quot; + str(len(QandA))) print(f&quot;Which is also, {percent}%&quot;) # print score and percentage . General Knowledge Trivia Current number of questions: 5 #1) What is the largest mammal? Correct! #2) What is the largest organ in the body? heart is incorrect #3) What galaxy do we live in? Correct! #4) Who founded Amazon? Correct! #5) What is the world&#39;s largest ocean? atlantic ocean is incorrect You scored 3/5 Which is also, 60.0% . Unit 3 Sections 3-4 . Notes . An algorithm has three components: sequencing, selection, and iteration | sequencing is algorithms doing tasks in the order of specification | selection is allowing is to choose two different outcomes based off a decision | iteration is that if a condition is true, then the code is repeated | . Algorithm Can Be Represented In Two Ways . flowcharts, which uses shapes and arrows to represent steps of an algorithm | pseudocode, which is a blend of human language and coding format | . Basic Operations . subtraction, represented by - | addition, represented by + | multiplication, represented by * | division, represented by / | getting the remainder, represented by MOD(% in python) | . Different Ways Values Are Stored in Variables . numerical value stored in variable | value of another variable stored in variable | result of an operation stored in a variable | result of a procedure call stored in a variable | . Strings . What is a String? A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . Homework/Hacks . Tracking Variables Hack . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 # Result is 20.4 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 # Result is 0 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueC) # Result is 17 . 17 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) # Result is straightbrownshort . straightbrownshort . String Hacks . Problem 1 . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = Noun[:7] yoda = abrev + &quot; &quot; + Verb + &quot; &quot; + Adjective2 + &quot; &quot; + Adjective + &quot;.&quot; print(yoda) . Mr.Mort is Very handsome. . Problem 2 . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 len2 = len(cookie2) * 45 vote1 = (str(cookie) + &quot; vote &quot; + str(len2)) vote2 = (str(cookie2) + &quot; vote &quot; + str(len1)) votes = (str(vote1) + &quot; &quot; + str(vote2)) print(votes) . choclate vote 225 rasin vote 4.0 . Unit 3 Sections 8-10 . Notes . Lists: a sequence of variables . we can use lists to store multiple items into one variable | used to store collections of data | changeable, ordered, allow duplicates | . There is list, then four total collection data types in Python . Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn&#39;t allow duplicates | Dictionary: collection that is ordered, changeable, doesn&#39;t allow duplicates | . More Terms . Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . Methods . Method Definition Example . append() | adds element to the end of the list | fruits.append(&quot;watermelon&quot;) | . index() | returns the index of the first element with the specified value | fruits.index(&quot;apple&quot;) | . insert() | adds element at given position | fruits.insert(1, &quot;watermelon&quot;) | . remove() | removes the first item with the specified value | fruits.remove(&quot;strawberry&quot;) | . reverse() | reverses the list order | fruits.reverse() | . sort() | sorts the list | fruits.sort() | . count() | returns the amount of elements with the specified value | fruits.count(&quot;apple&quot;) | . copy() | returns a copy of the list | fruits.copy() | . clear() | removes the elements from the list | fruits.clear() | . Iteration . Iteration is the repetition of a process or utterance applied to the result or taken from a previous statement. | There&#39;s a lot of types of iteration though, what to use? How do we apply iteration to lists? | Some methods include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension | here are 2 types of iteration: definite and indefinite. Definite iteration clarifies how many times the loop is going to run, while indefinite specifies a condition that must be met | . Else, elif, break . Else: when the condition does not meet, do statement() | Elif: when the condition does not meet, but meets another condition, do statement() | Break: stop the loop | . Homework . HW Iteration . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() print(inp + &quot; -&gt;&quot;) for i in range(len(inp)): for j in range(len(words)): if inp[i] == words [j][0]: print(words[j]) . derek -&gt; delta echo romeo echo kilo . Other way to print matrix . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . def print_matrix3(matrix): for i in range(len(keypad)): print(*keypad[i]) print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . Birth Month HW . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] print(str(keyboard[0][1]) + str(keyboard[3][9]) + str(keyboard[0][1]) + str(keyboard[0][7]) + str(keyboard[3][9]) + str(keyboard[0][2]) + str(keyboard[0][10]) + str(keyboard[0][10]) + str(keyboard[0][5]) + &quot; n&quot; + str(keyboard[0][1]) + str(keyboard[0][7])) . 1/17/2005 17 . Unit 3 Sections 9-11 . Notes . Algorithms . Algorithms can be written in different ways and still accomplish the same tasks | Algorithms that appear similar can yield different side effects or results. | Some conditional statements can be written as the same as Boolean expressions (VICE VERSA) | Different algorithms can be developed or use to solve the same problem. | . Conditionals vs. Boolean . The condition and instructions are what differ, that&#39;s where the magic happens. The condition is a boolean expression when an expression outputs either true or false. Boolean values are another type of data type in programming languages, and they can only ever hold true or false. . Selection vs. Iteration . Selection: . A process used in algorithms where a conditional if-statement leads to one of two outcomes | Outcome 1: if the conditional statement is true, something will happen | Outcome 2: if the conditional statement is false, something else will happen | . Iteration . A process used in algorithms that allows certain things to happen until a condition is satisfied | Once the condition is satisfied, then an outcome is produced | This can take the form of a for-loop, while-loop, and/or if-statement | . Takeaways . You can use code you&#39;ve previously wrote in order to make a project easier. | Breaking algorithms down into steps can make things easier and more simple. | . Homework . Unit 3 Sections 12-13 . Notes . Calling Procedures . Slide 1: . A procedure is a named group of programming instructions that may have parameters and return values. | Procedures are referred to by different names, such as method or function, depending on the programing language. | Parameters are input values of a procedure. Arguments specify the values of the parameters when procedure is called. | A procedure call interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | . Slide 2: . When calling procedures, it&#39;s important to take notice to whether it returns data, or a block of statements. | If the procedure just returns a block of statements, you call the procedure by referring to the procedure name, and inputting the arguments. | If the procedure returns some sort of data like a boolean or value, then you will assign that value to a variable | . Slide 3: . Assume the Temperature outside is Fahrenheit. | The procedure convertFahrenheit is intended to convert from Fahrenheit to Celsius. | Convert the following psuedocode to python | . Developing Procedures . Slide 8: . Picking a descriptive name is important in case you revisit the code later on (separate words with capitals) There are 2 different types of procedures- ones that return a value and those that simply execute a block of statements Steps of developing procedure: picking a useful name, thinking of parameters (what data does the procedure need to know), making a flowchart or writing procedure in pseudocode, and actually developing the procedure. . Slide 9: . In this example, a teacher is writing a program that will replace the grade on a previous quiz if the new grade is better than the previous. . What would be a good name for this procedure? | What parameters do we need for this procedure? | Try writing this procedure out in python based on the given pseudocode | . Procedural Abstraction . One type of abstraction is procedural abstraction which provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | This is very helpful in managing complexity in a program | Subdivision of a program into separate subprograms is called modularity | A procedural abstraction may extract shared features to generalize functionality instead of duplicating code. This allows for program reuse, which helps manage complexity | When a pre-written procedure is called, you don’t necessarily need to know the details of this, just what it does and how to call it | Simply, procedural abstraction is naming and calling a prewritten procedure | Making sure to include the right arguments so the procedure can do what its supposed to do is crucial | . Homework .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2014-17/2022/12/01/Studentteachingportfolio.html",
            "relUrl": "/apcsp%20week%2014-17/2022/12/01/Studentteachingportfolio.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Unit 3 Sections 3-4",
            "content": "What is an Algorithm? . An algorithm: a set of instructions that can accomplish a specific task. . An Algorithm Has Three Components . Sequencing: Algorithms do tasks in the order of specification. | . Selection: Helps choose two different outcomes based off a decision. | . Iteration: If a condition is true, then the code can repeat. | . Algorithms Can Be Represented in Two Ways . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | . . Pseudocode: A blend of human language and coding format. | Hacks: Jamboard Flowchart . Click on this link for a group activity . . . Arithmetic Operations . Arithmetic operations exist in most programming languages. . Basic Operations . Subtraction: . Represented by “-&quot; | . num1 = 2 - 1 . Addition: . Represented by &quot;+&quot; | . num1 = 2 + 1 . Multiplication: . Represented by “*” | . num1 = 2 * 1 . Division: . Represented by “/” | . num1 = 2 / 1 . Getting the Remainder: . Represented by “MOD” (% in python) | . num1 = 5 % 2 . Different Uses . Items can be numbers or variables. . Examples: . num1 = 10 num2 = num1 - 25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Example: Evaluate num1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) . 10.0 . . . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable . | Value of another variable stored in a variable . | Result of an operation stored in a variable . | Result of a procedure call stored in a variable . | score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20, 60, 80) # 4 . Sequencing is Important! . Changing the order of the steps changes the overall outcome, since every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables, especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6, which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6, which is 16 # output: num1 = 10, num2 = 16, num3 = 6 . VS . num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14, num2 = 8, num3 = 6 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot, not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var2 = var1 - var3 #var1 = var2 #var3 = (var1 + var2) / 2 #var2 = 6 print(var1) print(var2) print(var3) . 9 7 2 . Hacks/Homework . Evaluate the variable &quot;result&quot;. . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueB) . 13 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) . straightbrownshort . . . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pseudocode starts at 1) . Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Problem 1 . from operator import concat Noun = &quot;Mr.Mortensen&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = substring (Noun, 1, 7) yoda = concat(Adjective2, &quot;4&quot;, Adjective, &quot;6&quot;, Adjective, &quot;4&quot;, Adjective, &quot;a&quot;) display[yoda] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 31 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; Adjective2 = &#34;Very&#34; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; Verb = &#34;is&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; abrev = substring(Noun, 1, 7) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; yoda = concat(Adjective2, &#34;4&#34;, Adjective, &#34;6&#34;, Adjective, &#34;4&#34;, Adjective, &#34;a&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; display[yoda] NameError: name &#39;substring&#39; is not defined . Problem 2 . cookie = len(&quot;choclate&quot;) cookie2 = len(&quot;rasin&quot;) len1 = cookie / 2 len2 = cookie2 * 45 vote1 = (cookie, &quot;vote&quot;, len2) vote2 = (cookie2, &quot;vote&quot;, len1) votes = concat(vote1, &quot; &quot;, vote2) display[votes] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 33 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; vote1 = (cookie, &#34;vote&#34;, len2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; vote2 = (cookie2, &#34;vote&#34;, len1) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; votes = concat(vote1, &#34; &#34;, vote2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; display[votes] NameError: name &#39;concat&#39; is not defined .",
            "url": "https://dereksol.github.io/Tera/jupyter/lesson2",
            "relUrl": "/jupyter/lesson2",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Unit 3 Sections 1-2",
            "content": "Variables . A variable is an abstraction inside a program that can hold a value | It organizes data by labeling it with a descriptive name | It consists of three parts: name, value, and type | Using meaningful variables names helps with readability of program code and understanding of what values are represented by the variables | . Naming Variables . Do&#39;s Don&#39;ts Why . highScore | highestScoreInTheGame | Keep it simple and easy to read, having variables that are too complicated can cause your code to become messy later on | . highScore | highscore | Differentiate the words in your variable with a capital letter. Makes things easier to read | . firstName | n | not specific enough/vague | . isRaining | is it raining | spaces are improper syntax | . phoneNumber | 555-number | dashes are improper syntax and numbers should be avoided in variable names | . Types of data Integer: A number | Text/string: A word | Boolean: Data that determines if something is true or false | . | . name = &quot;table1&quot; #string print(name, type(name)) number = 4 #integer print(number, type(number)) isAbsent = False print(isAbsent, type(isAbsent)) . table1 &lt;class &#39;str&#39;&gt; 4 &lt;class &#39;int&#39;&gt; False &lt;class &#39;bool&#39;&gt; . A list of data can also be stored in variables. Why is that useful? . print/retrieve specific values in the list without creating a lot of variables | easily remove/add/change items into the list | . colors = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;] print(colors[2]) . yellow . Assignments . The assignment operator allows a program to change the value represented by a variable | Used to assigning values to variables | . Operator Description Syntax Outcome when print(a) . = | Assign value of right side of expression to left side operand | a = b | b | . += | Add right side operand with left side operand and then assign to left operand | a += b | a + b | . -= | Subtract right operand from left operand and then assign to left operand: True if both operands are equal | a -= b | a - b | . *= | Multiply right operand with left operand and then assign to left operand | a *= b | a * b | . /= | Divide left operand with right operand and then assign to left operand | a /= b | a / b | . **= | Calculate exponent(raise power) value using operands and assign value to left operand | a **= b | a ^ b | . a = 1 b = 2 a = b print(a) . The value stored in a variable will be the most recent value assigned . a = 1 b = a a = 2 print(b) . 1 . Changing Values . currentScore = 10 highScore = currentScore currentScore = 7 print(highScore) . your turn! Here are 3 problems for you to solve . num1 = 5 num2 = 9 num1 = num2 print(num1) print(num2) . num1 = 15 num2 = 25 num3 = 42 num2 = num3 num3 = num1 num1 = num2 print(num1) print(num2) print(num3) . Which of these will show the sum? . num2 += num1 print(num1) print(num2) print(str(num1)+ str(num2)) print(num1 + num2) . Data Abstraction . Method used in coding to represent data in a useful form, by taking away aspects of data that aren&#39;t being used in the situation | Variables and lists are primary tools in data abstraction | Provides a separation between the abstract properties of a data type and the concrete details of its representation | . Lists &amp; Strings . List = ordered sequence of elements | Element = individual value in a list that is assigned to a unique index | Index = a way to reference the elements in a list or string using natural numbers; each element of a string is referenced by an index | String = ordered sequence of characters (Letters, numbers, special characters) . Note: index starts at 1 for AP Exam, must be whole numbers, cannot be negative, and goes up to the number of elements in the list We can represent a list or string using a variable . | . Example of a List - Colors . Index Element . 1 | Green | . 2 | Blue | . 3 | Purple | . 4 | Pink | . At Index 1, the element is green, at index 2, the element is blue, etc. | . Managing the Complexity of a Program through Data Abstraction . Data abstractions help manage complexity in programs by giving a collection of data a name without referencing the specific details of the representation | Developing a data abstraction to use in a program can result in a program that is easier to develop and maintain | . Using Lists as Data Abstractions . What are Lists? . Allow for data abstraction | Bundle variables together | Store multiple elements | Allows multiple related items to be treated as a single value | Give one name to a set of memory cells | Can keep adding elements to it as needed | Can store elements as a single variable by using a list | . 3 Types of List Operations . Assigning values to a list at certain indices | Creating an empty list and assigning it to a variable | Assigning a copy of one list to another list (setting one list equal to another list) | 1. Assigning values to a list at certain indices . colorsList=[&quot;pink&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;orange&quot;] print(colorsList) . [&#39;pink&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;blue&#39;, &#39;orange&#39;] . 2. Creating an empty list and assigning it to a variable . colorsList=[] # can be used if you want to create a list that can be filled with values later . 3. Assigning a copy of one list to another list (setting one list equal to another list) . # copy of the list is made; the list isn&#39;t sorted in place def Reverse(lst): # defining variable: lst new_lst = lst[::-1] return new_lst lst = [&quot;pink&quot;, &quot;green&quot;, &quot;purple&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;blue&quot;, &quot;black&quot;] print(Reverse(lst)) # reverse 1st . [&#39;black&#39;, &#39;blue&#39;, &#39;orange&#39;, &#39;yellow&#39;, &#39;purple&#39;, &#39;green&#39;, &#39;pink&#39;] . What is Managing Complexity? . Improving code readability | Reducing the need for new variables as more data is collected | Can easily update data | Can easily convert data to different forms | . How do Lists Help Manage the Complexity of a Program? . Don’t need as many variables | Can easily change the number of variables | Can apply the same mathematical computation (through an algorithm) to all the elements in the list | . Data Abstraction Practice . Manage the complexity of the given code below using a list. Re-write the code segment in a less complex way, but with the same result. . color1=&quot;green&quot; color2=&quot;red&quot; color3=&quot;pink&quot; color4=&quot;purple&quot; color5=&quot;blue&quot; color6=&quot;brown&quot; print(color1) print(color2) print(color3) print(color4) print(color5) print(color6) . green red pink purple blue brown . Answer . colorList=[&quot;green&quot;, &quot;red&quot;, &quot;pink&quot;, &quot;purple&quot;, &quot;blue&quot;, &quot;brown&quot;] print(str(colorList)) . [&#39;green&#39;, &#39;red&#39;, &#39;pink&#39;, &#39;purple&#39;, &#39;blue&#39;, &#39;brown&#39;] . AP Exam Use of Data Abstraction . With the properties of the AP Exam pseudocode, lists work differently from what we&#39;ve learned in python so far, here are the two major differences: . The index does not start at 0 but 1 | There is only one method of interchanging data between lists, and that is completely overwriting previous list data with the other list n&quot;, | . Homework . You will turn in a program that utilizes lists and variables as it&#39;s primary function, options could be a quiz, a sorter, database, or wherever your imagination brings you. You will be graded on how well you understood the concepts and if you used anything other than just the simplest parts . Quiz template, if you do use it, fix the issues, and add more to it than it&#39;s current barebones state. I would recommend using it to create something related to school. . quesCount = 0 # Use a dictionary for the questions quesList = [&quot;Question1&quot;, &quot;Question2&quot;, &quot;Question3&quot;, &quot;Question4&quot;] # Use a dictionary for the correct solutions soluList = [&quot;Solution1&quot;, &quot;Solution2&quot;, &quot;Solution3&quot;, &quot;Solution4&quot;] quesAmount= len(quesList) hrm quesCount &lt;= quesAmount: print(quesList[quescount] + &quot; n&quot;) guess = input() if(guess == soluList[quesamOOuaunt]): score+=1 print(&quot;Correct! Score: &quot;) else: print(&quot;Incorrect! The correct answer was &quot; + soluList(quescount) + &quot; n&quot;) quesCount += 1 print(&quot;Final score: &quot; + str(score)) .",
            "url": "https://dereksol.github.io/Tera/lectures/2022/12/01/Studentlesson1.html",
            "relUrl": "/lectures/2022/12/01/Studentlesson1.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Conditionals",
            "content": "Focusing on Selection . Selection: uses a condition that evaluates to true or false . Selection determines which part of an algorithm are executed based on a condition being true or false . Algorithm is a finite set of instructions that accomplish a specific task . Conditional Statements . Also known as &quot;if statements&quot; . Can be seen as if statements or if blocks . . Can also be seen as if else statements or if else-blocks . . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) . x is greater than y . x = 0 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . x is not greater than y . Participation . -Calculate the total sum of two numbers, if it is equal to 200, print 200, if otherwise, print the sum. . num1 = num2 = sum = num1 + num2 .",
            "url": "https://dereksol.github.io/Tera/2022/11/30/presentation.html",
            "relUrl": "/2022/11/30/presentation.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "3.6 Conditionals",
            "content": "Focusing on Selection . Selection: uses a condition that evaluates if it is true or false . . Conditional Statements . Also known as &quot;If-statements&quot; . . Can be seen as if statements or if blocks . x = 4 y = 10 if y &gt; x: print(&quot;y is greater than x&quot;) . y is greater than x . Can also be seen as if else statements or if else blocks . . x = 4 y = 10 if y &gt; x: print(&quot;y is greater than x&quot;) else: print(&quot;y is less than x&quot;) . y is greater than x .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2014/2022/11/29/conditionspresent.html",
            "relUrl": "/apcsp%20week%2014/2022/11/29/conditionspresent.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "3.6 Conditionals",
            "content": "Focusing on Selection . Selection: uses a condition that evaluates if it is true or false . .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2014/2022/11/29/conditionalspresentation.html",
            "relUrl": "/apcsp%20week%2014/2022/11/29/conditionalspresentation.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Mathematical Expressions and Strings",
            "content": "What is an Algorithm? . An algorithm: a set of instructions that can accomplish a specific task. . An Algorithm Has Three Components . Sequencing: Algorithms do tasks in the order of specification. | . Selection: Helps choose two different outcomes based off a decision. | . Iteration: If a condition is true, then the code can repeat. | . Algorithms Can Be Represented in Two Ways . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | . . Pseudocode: A blend of human language and coding format. | Hacks: Jamboard Flowchart . Click on this link for a group activity . . . Arithmetic Operations . Arithmetic operations exist in most programming languages. . Basic Operations . Subtraction: . Represented by “-&quot; | . num1 = 2 - 1 . Addition: . Represented by &quot;+&quot; | . num1 = 2 + 1 . Multiplication: . Represented by “*” | . num1 = 2 * 1 . Division: . Represented by “/” | . num1 = 2 / 1 . Getting the Remainder: . Represented by “MOD” (% in python) | . num1 = 5 % 2 . Different Uses . Items can be numbers or variables. . Examples: . num1 = 10 num2 = num1 - 25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Example: Evaluate num1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) . 10.0 . . . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable . | Value of another variable stored in a variable . | Result of an operation stored in a variable . | Result of a procedure call stored in a variable . | score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20, 60, 80) # 4 . Sequencing is Important! . Changing the order of the steps changes the overall outcome, since every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables, especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6, which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6, which is 16 # output: num1 = 10, num2 = 16, num3 = 6 . VS . num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14, num2 = 8, num3 = 6 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot, not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var2 = var1 - var3 #var1 = var2 #var3 = (var1 + var2) / 2 #var2 = 6 print(var1) print(var2) print(var3) . 9 7 2 . Hacks/Homework . Evaluate the variable &quot;result&quot;. . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueB) . 13 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) . straightbrownshort . . . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pseudocode starts at 1) . Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Problem 1 . from operator import concat Noun = &quot;Mr.Mortensen&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = substring (Noun, 1, 7) yoda = concat(Adjective2, &quot;4&quot;, Adjective, &quot;6&quot;, Adjective, &quot;4&quot;, Adjective, &quot;a&quot;) display[yoda] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 31 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; Adjective2 = &#34;Very&#34; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; Verb = &#34;is&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; abrev = substring(Noun, 1, 7) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; yoda = concat(Adjective2, &#34;4&#34;, Adjective, &#34;6&#34;, Adjective, &#34;4&#34;, Adjective, &#34;a&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; display[yoda] NameError: name &#39;substring&#39; is not defined . Problem 2 . cookie = len(&quot;choclate&quot;) cookie2 = len(&quot;rasin&quot;) len1 = cookie / 2 len2 = cookie2 * 45 vote1 = (cookie, &quot;vote&quot;, len2) vote2 = (cookie2, &quot;vote&quot;, len1) votes = concat(vote1, &quot; &quot;, vote2) display[votes] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 33 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; vote1 = (cookie, &#34;vote&#34;, len2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; vote2 = (cookie2, &#34;vote&#34;, len1) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; votes = concat(vote1, &#34; &#34;, vote2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; display[votes] NameError: name &#39;concat&#39; is not defined .",
            "url": "https://dereksol.github.io/Tera/jupyter/lesson2",
            "relUrl": "/jupyter/lesson2",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Mathematical Expressions and Strings",
            "content": "What is an Algorithm? . An algorithm: a set of instructions that can accomplish a specific task. . An Algorithm Has Three Components . Sequencing: Algorithms do tasks in the order of specification. | . Selection: Helps choose two different outcomes based off a decision. | . Iteration: If a condition is true, then the code can repeat. | . Algorithms Can Be Represented in Two Ways . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | . . Pseudocode: A blend of human language and coding format. | Hacks: Jamboard Flowchart . Click on this link for a group activity . . . Arithmetic Operations . Arithmetic operations exist in most programming languages. . Basic Operations . Subtraction: . Represented by “-&quot; | . num1 = 2 - 1 . Addition: . Represented by &quot;+&quot; | . num1 = 2 + 1 . Multiplication: . Represented by “*” | . num1 = 2 * 1 . Division: . Represented by “/” | . num1 = 2 / 1 . Getting the Remainder: . Represented by “MOD” (% in python) | . num1 = 5 % 2 . Different Uses . Items can be numbers or variables. . Examples: . num1 = 10 num2 = num1 - 25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Example: Evaluate num1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) . 10.0 . . . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable . | Value of another variable stored in a variable . | Result of an operation stored in a variable . | Result of a procedure call stored in a variable . | score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20, 60, 80) # 4 . Sequencing is Important! . Changing the order of the steps changes the overall outcome, since every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables, especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6, which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6, which is 16 # output: num1 = 10, num2 = 16, num3 = 6 . VS . num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14, num2 = 8, num3 = 6 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot, not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var2 = var1 - var3 #var1 = var2 #var3 = (var1 + var2) / 2 #var2 = 6 print(var1) print(var2) print(var3) . 9 7 2 . Hacks/Homework . Evaluate the variable &quot;result&quot;. . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueB) . 13 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) . straightbrownshort . . . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pseudocode starts at 1) . Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Problem 1 . from operator import concat Noun = &quot;Mr.Mortensen&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = substring (Noun, 1, 7) yoda = concat(Adjective2, &quot;4&quot;, Adjective, &quot;6&quot;, Adjective, &quot;4&quot;, Adjective, &quot;a&quot;) display[yoda] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 31 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; Adjective2 = &#34;Very&#34; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; Verb = &#34;is&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; abrev = substring(Noun, 1, 7) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; yoda = concat(Adjective2, &#34;4&#34;, Adjective, &#34;6&#34;, Adjective, &#34;4&#34;, Adjective, &#34;a&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; display[yoda] NameError: name &#39;substring&#39; is not defined . Problem 2 . cookie = len(&quot;choclate&quot;) cookie2 = len(&quot;rasin&quot;) len1 = cookie / 2 len2 = cookie2 * 45 vote1 = (cookie, &quot;vote&quot;, len2) vote2 = (cookie2, &quot;vote&quot;, len1) votes = concat(vote1, &quot; &quot;, vote2) display[votes] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 33 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; vote1 = (cookie, &#34;vote&#34;, len2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; vote2 = (cookie2, &#34;vote&#34;, len1) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; votes = concat(vote1, &#34; &#34;, vote2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; display[votes] NameError: name &#39;concat&#39; is not defined .",
            "url": "https://dereksol.github.io/Tera/jupyter/lesson2",
            "relUrl": "/jupyter/lesson2",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Mathematical Expressions and Strings",
            "content": "What is an Algorithm? . An algorithm: a set of instructions that can accomplish a specific task. . An Algorithm Has Three Components . Sequencing: Algorithms do tasks in the order of specification. | . Selection: Helps choose two different outcomes based off a decision. | . Iteration: If a condition is true, then the code can repeat. | . Algorithms Can Be Represented in Two Ways . Flowcharts: Use shapes and arrows to represent the steps of an algorithm. | . . Pseudocode: A blend of human language and coding format. | Hacks: Jamboard Flowchart . Click on this link for a group activity . . . Arithmetic Operations . Arithmetic operations exist in most programming languages. . Basic Operations . Subtraction: . Represented by “-&quot; | . num1 = 2 - 1 . Addition: . Represented by &quot;+&quot; | . num1 = 2 + 1 . Multiplication: . Represented by “*” | . num1 = 2 * 1 . Division: . Represented by “/” | . num1 = 2 / 1 . Getting the Remainder: . Represented by “MOD” (% in python) | . num1 = 5 % 2 . Different Uses . Items can be numbers or variables. . Examples: . num1 = 10 num2 = num1 - 25 num3 = 100 * num1 num4 = num1 / num2 num5 = 9 % num4 . Order of Operations . Arithmetic operations in programming are performed in the same order as operations in mathematics: . Operations in parentheses should be done first. . | Division and multiplication should be done before addition and subtraction. . | Modulus works similar to multiplication and division. . | . Example: Evaluate num1 . num1 = 9 % 2 * ( 8 - 2 ) + 8 / ( 6 - 4 ) print(num1) . 10.0 . . . Variables . Different Ways Values are Stored in Variables . Numerical value stored in a variable . | Value of another variable stored in a variable . | Result of an operation stored in a variable . | Result of a procedure call stored in a variable . | score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20, 60, 80) # 4 . Sequencing is Important! . Changing the order of the steps changes the overall outcome, since every time the value assigned to a variable is changed, it overrides the last value which was assigned to the same variable. That is why it is important to track the value of variables, especially in code where the value is constantly changing. . num1 = 2 num2 = 4 num3 = 6 num1 = num2 + num3 # num1 is now 4 + 6, which is 10 num2 = num1 + num3 # num2 is now (the new num1) 10 + 6, which is 16 # output: num1 = 10, num2 = 16, num3 = 6 . VS . num1 = 2 num2 = 4 num3 = 6 num2 = num1 + num3 #num2 is now 8 num1 = num2 + num3 # num1 is now 14 # output: num1 = 14, num2 = 8, num3 = 6 . Tracking Variables . Tracking variables is a common question found on AP exams and is an important thing to keep in mind when writing any code. If the value of your variables changes a lot, not accounting for these changes can result in an unwanted outcome. . var1 = 9 var2 = 7 var3 = 2 #var = var1 + 5 #var2 = var1 - var3 #var1 = var2 #var3 = (var1 + var2) / 2 #var2 = 6 print(var1) print(var2) print(var3) . 9 7 2 . Hacks/Homework . Evaluate the variable &quot;result&quot;. . Num1 = 50 Num2 = Num1 % 9 + 15 Num3 = Num2 / Num1 + ( Num2 * 2 ) Num4 = Num3 + Num1 / 5 - 10 Result = Num4 - Num2 . Num1 = 10 Num2 = Num1 % 3 * 4 Num1 = Num2 Num3 = Num1 * 3 Result = Num3 % 2 . valueA = 4 valueB = 90 valueC = 17 valueB = valueC - valueA valueA = valueA * 10 if valueB &gt; 10: print(valueB) . 13 . type = &quot;curly&quot; color = &quot;brown&quot; length = &quot;short&quot; type = &quot;straight&quot; hair = type + color + length print(hair) . straightbrownshort . . . Strings . What is a String? . A String: A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . A string is a collection of characters. What is a character as character can be anything from numbers, letters, spaces, special symbols, etc. . Certain procedures may be used with strings and they vary from programming language to language Python examples . len() to find the length of a string . lower() to convert to lowercase . etc. Pseudocode examples . len() returns the length of a string . concat() returns a string made up of the concatenated strings ex. concat(&quot;string1&quot;, &quot;string2&quot;) would return string1string2 . substring() returns the characters from the string beginning at the at the first position to the last so an example of this would be substring (&quot;abcdefghijk&quot;, 2, 5) would print bcde (pseudocode starts at 1) . String Concatenation . What is string concatenation? . String concatenation is combining 2 or more strings to make a new strings in order to create a new string . concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster . Substrings . What is a substring? . A substring is a part of and already existing string. . In pseudocode substring() method is used for instance for concat(&quot;Mr.Mortenson is very handsome&quot; 1, 2) the system would return Mr (remember that pseudocode starts at 1) . Hacks . Find the result of the following problems. Then convert the pseudocode to working python code using your knowledge of python string operators. . Problem 1 . from operator import concat Noun = &quot;Mr.Mortensen&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = substring (Noun, 1, 7) yoda = concat(Adjective2, &quot;4&quot;, Adjective, &quot;6&quot;, Adjective, &quot;4&quot;, Adjective, &quot;a&quot;) display[yoda] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 31 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; Adjective2 = &#34;Very&#34; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; Verb = &#34;is&#34; -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; abrev = substring(Noun, 1, 7) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=8&#39;&gt;9&lt;/a&gt; yoda = concat(Adjective2, &#34;4&#34;, Adjective, &#34;6&#34;, Adjective, &#34;4&#34;, Adjective, &#34;a&#34;) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X42sZmlsZQ%3D%3D?line=9&#39;&gt;10&lt;/a&gt; display[yoda] NameError: name &#39;substring&#39; is not defined . Problem 2 . cookie = len(&quot;choclate&quot;) cookie2 = len(&quot;rasin&quot;) len1 = cookie / 2 len2 = cookie2 * 45 vote1 = (cookie, &quot;vote&quot;, len2) vote2 = (cookie2, &quot;vote&quot;, len1) votes = concat(vote1, &quot; &quot;, vote2) display[votes] . NameError Traceback (most recent call last) /Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb Cell 33 in &lt;cell line: 7&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; vote1 = (cookie, &#34;vote&#34;, len2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; vote2 = (cookie2, &#34;vote&#34;, len1) -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=6&#39;&gt;7&lt;/a&gt; votes = concat(vote1, &#34; &#34;, vote2) &lt;a href=&#39;vscode-notebook-cell:/Users/dmsol/Tera/_notebooks/2022-11-29-LessonDay2Hacks.ipynb#X44sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; display[votes] NameError: name &#39;concat&#39; is not defined .",
            "url": "https://dereksol.github.io/Tera/jupyter/lesson2",
            "relUrl": "/jupyter/lesson2",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Lesson Plan for 3.5-3.7",
            "content": "Notes on my Section of Teaching Hello . 3.6: Daily Video 1 Notes . Learning how to express an algorithm that uses selection without using a programming language, such as flowcharts and pseudo code | Selection determines which part of an algorithm are executed based on a condition being true or false | Algorithm is a finite set of instructions that accomplish a specific task | Consists of combinations of sequencing, selection, and iteration | Selection allows us to choose different outcomes based off of the result of a decision or condition | Can write an algorithm to update a high score for example | 1.Set highScore to 10 | 2.Get currentScore from user | Using selection, 3. If currentScore is greater than highScore, set highScore to currentScore | 4.If not, Display highScore | . 3.6: Daily Video 2 Notes . Learn how to write conditional statements | Conditional statements, also known as “if-statements,” affect the sequential flow of control by executing different statements based on the value of a Boolean expression | Can write them as if blocks or if else blocks | If condition is true, whatever statement is in the block of statements is done | IF ELSE, two outcomes, IF is just one particular outcome | First get input from the user, IF statement will take the Boolean expression and put it in the parentheses or the block associated for the IF | IF it is true, displays the number | Display goodbye outside of if statement so it says goodbye whether or not the outcome of IF is true or else | Represent these algorithms that have selection by writing conditional statements, these allow us to alter the outcome based off of a Boolean expression, can do IF ELSE statements to have two different outcomes | . 3.6: Daily Video 3 Notes . Learn how to determine the result of conditional statements | Conditional statements alter the flow of execution in our program, can do this using IF blocks, or we can do IF ELSE blocks to choose from two different outcomes | ELSE only executes if the IF condition is false | IF statements allow us to perform specific action based off the condition being true or false | . Lesson Plan Idea . PearDeck encapsulating 3.5-3.7 | Each one of us is responsible for teaching a section, since there is only three sections, two of us will work together to teach the same section | Ethan and I will be responsible for teaching 3.6, which is Conditionals | On the PearDeck, there will be visuals on slides to support our teaching, and is a more interactive form of a presentation to keep them engaged | We will put flow charts and images of code relating to conditionals, like IF blocks and IF ELSE blocks, and definitions of what algorithms and selection means | Plan to teach for about 10 minutes on this section | Afterward, have them go through 3 questions relating to this conditionals section, thinking one question could be putting a specific example of an IF statement and having them determine the outcome | Maybe question where you are given a scenario and have to show me how you would build this conditional statement on VSCode | First person to get these questions right can be rewarded with candy | At the end, we could give them independent work time to create an IF statement and and IF ELSE statement in VSCode as homework | .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2013/2022/11/17/Lessonplan.html",
            "relUrl": "/apcsp%20week%2013/2022/11/17/Lessonplan.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | . | | | . 4 2 1 .",
            "url": "https://dereksol.github.io/Tera/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 5, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "N@TM Individual Blog",
            "content": ". Classes I Visited . I visited many classes for the night of the Museum such as 3D Computer Animation, Ceramics, and Photography. The class that this picture is from is Ceramics. This was one of the projects where you had to make a teacup or teapot, and it was up to you to decide what you wanted it to look like. This person decided to incorporate an octopus onto the cup by attaching tentacles all over it. Something I really liked about this project is the texture of the tentacles and how the barnacles look and felt so real. This is another picture from Ceramics. One of the projects was to make whatever you wanted using all the previous projects as inspiration. This person made a plate and a mug that were both M&amp;M themed, and this plate was the orange M&amp;M. I really like the theme that he went with and the execution of the logo. . Ideas for Next Trimester . Our project came out pretty solid, however there was a lot more things that I wanted to add for improvement. I really wanted to add a dropdown menu, but was very hard for me to make and find a tutorial that I found helpful. As the Frontend Developer, I did a decent job at making the website look aesthetically appealing, however I wish I could have done and learned a lot more styles to make everything look better. One big takeaway from this project was to have better time management as a group, because if we split the work up more evenly and throughout more days, our project could have reached a higher potential and outcome. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2012/2022/11/04/N@TMblog.html",
            "relUrl": "/apcsp%20week%2012/2022/11/04/N@TMblog.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Individual Trimester 1 Final Blog",
            "content": "Questions that I missed . 6. Loop terminates when count exceeds max, so only values less than or equal to max are printed. . 8. The procedure does not interchange the values of j and k. Rather, it returns a new list with the values at indices j and k interchanged. . 11. Wasn’t too sure on this question and confused. The inner loop iterates from index j + 1 to the end of the list, so each element is only compared with the elements that follow it. . 14. When numCorrect is 9, the condition numCorrect &gt; 7 evaluates to true and the condition numCorrect ≥ 9 evaluates to true. Therefore “check plus” is displayed as intended. . 16. Thought that it was only broken up into two packets but there are many more. Messages are broken into as many packets as are needed to transmit the data. Each packet contains both data and metadata. . 21. Statement I is true because strings of characters can be represented by sequences of bits. . 22. Confused on binary numbers a bit. Binary 0110 is equivalent to 22+21, or decimal 6. . 29. Switched my answers at the very end from the right one to the wrong one. Input data can be stored as any data type. Programming languages do not typically store input data in a list for record-keeping purposes. . 32. The last assignment statement assigns a copy of myList to yourList, rather than appending one list to the other. . 34. The code segment initializes the three lists, and then swaps the contents of firstList and secondList rather than appending one list to the other. . 35. Didn’t know if the MaxPs 50 goes before or after. . 36. This would be the correct solution if i were initialized to 2 instead of 1. This code segment will generate the list [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]. . 37. Confused on what temp means. A temporary variable is needed to interchange the values of two variables. . 39. List indices are typically nonnegative integers, so a decimal number between two integers would be considered an invalid index. . 41. This is the initial value of p. None of the variables has the value 10 after executing the code segment. . 42. After initially assigning values to the variables, the code segment assigns the value 4 to num3 and assigns the value 8 to num1. The value of sum at the end of the code segment is 8 + 4 + 4, or 16. . 43. This is the value of x after the code segment is executed, not the value of result. . 45. The code segment iterates through each element in the list, incrementing count1 for each positive value and incrementing count2 otherwise. There are only two positive values in the list, not five. . 46. The fourth statement assigns the value of second (which is true) to first. . 48. The value of y is initially 50, but its value is changed to 75 in the fifth statement. . 49. Switched answers last second. This code segment produces the string “onno”. . 50. Overall confused on how to attack this question. Took my best guess on this one. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%2012/2022/11/04/IndividualTri1Final.html",
            "relUrl": "/apcsp%20week%2012/2022/11/04/IndividualTri1Final.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "AP Prep Multiple Choice 2",
            "content": "1.4 Identifying and Correcting Errors Quiz . . 1.5 The Internet Quiz . . After looking over the questions that I got wrong, I realized why my answers were wrong and why the right ones fit better. Overall, a little bit of trouble with this week’s quizzes, but learned more than I knew before. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%207/2022/10/09/APPrep2.html",
            "relUrl": "/apcsp%20week%207/2022/10/09/APPrep2.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "Application Programming Interface (API)",
            "content": "Covid19 RapidAPI Example . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;561be3d3dcmsh26da5c03e252f9fp1d2d4fjsn25f9e92f38d8&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) print(response.json) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . &lt;bound method Response.json of &lt;Response [200]&gt;&gt; World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . API For my Project . import requests url = &quot;https://basketball-data.p.rapidapi.com/tournament/teams&quot; querystring = {&quot;tournamentId&quot;:&quot;89&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;b731fee7a5mshf2b6608334c0b07p13bf5fjsn09fcf5df26f4&quot;, &quot;X-RapidAPI-Host&quot;: &quot;basketball-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json()) . [{&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Adelaide 36ers&#39;, &#39;shortName&#39;: &#39;ADE&#39;, &#39;mediumName&#39;: &#39;Ad. 36ers&#39;, &#39;id&#39;: 1448}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Brisbane Bullets&#39;, &#39;shortName&#39;: &#39;BRI&#39;, &#39;mediumName&#39;: &#39;B.Bullets&#39;, &#39;id&#39;: 2503}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Cairns Taipans&#39;, &#39;shortName&#39;: &#39;CTP&#39;, &#39;mediumName&#39;: &#39;C.Taipans&#39;, &#39;id&#39;: 1446}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Illawarra Hawks&#39;, &#39;shortName&#39;: &#39;ILH&#39;, &#39;mediumName&#39;: &#39;I.Hawks&#39;, &#39;id&#39;: 1443}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Melbourne United&#39;, &#39;shortName&#39;: &#39;MEL&#39;, &#39;mediumName&#39;: &#39;Melb.United&#39;, &#39;id&#39;: 1445}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;New Zealand Breakers&#39;, &#39;shortName&#39;: &#39;NZB&#39;, &#39;mediumName&#39;: &#39;N.Z.Breakers&#39;, &#39;id&#39;: 1441}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Perth Wildcats&#39;, &#39;shortName&#39;: &#39;PWC&#39;, &#39;mediumName&#39;: &#39;P.Wildcats&#39;, &#39;id&#39;: 1442}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;SE Melbourne Phoenix&#39;, &#39;shortName&#39;: &#39;&#39;, &#39;mediumName&#39;: &#39;&#39;, &#39;id&#39;: 3696}, {&#39;isNational&#39;: False, &#39;country&#39;: {&#39;name&#39;: &#39;Australia&#39;, &#39;shortName&#39;: &#39;AUS&#39;, &#39;id&#39;: 6}, &#39;name&#39;: &#39;Sydney Kings&#39;, &#39;shortName&#39;: &#39;SDK&#39;, &#39;mediumName&#39;: &#39;S.Kings&#39;, &#39;id&#39;: 1444}] .",
            "url": "https://dereksol.github.io/Tera/2022/10/09/PBL-python_rapidapi.html",
            "relUrl": "/2022/10/09/PBL-python_rapidapi.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Code Corrections",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter z is the 26 letter in the alphabet . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter x is the 24 letter in the alphabet . Evens while loop . evens = [] i = 0 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [0, 2, 4, 6, 8, 10] . Odds while loop . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . Evens for loop . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 0): evens.append(numbers[i]) print(evens) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): # % sign is a division sign odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . Before . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 5 == 0: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 0, 2, 4, 5, 6, 8, 10, 10, 12, 14, 15, 16, 18, 20, 20, 22, 24, 25, 26, 28, 30, 30, 32, 34, 35, 36, 38, 40, 40, 42, 44, 45, 46, 48, 50, 50, 52, 54, 55, 56, 58, 60, 60, 62, 64, 65, 66, 68, 70, 70, 72, 74, 75, 76, 78, 80, 80, 82, 84, 85, 86, 88, 90, 90, 92, 94, 95, 96, 98] . After . numbers = [] newNumbers = [] i = 0 while i &lt; 101: numbers.append(i) i += 1 for i in numbers: if numbers[i] % 10 == 5: newNumbers.append(numbers[i]) if numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . Before . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) #code should add the price of the menu items selected by the user print(total) . Menu burger $3.99 fries $1.99 drink $0.99 0 . After . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} # use of dictionary total = 0 #shows the user the menu and prompts them to select an item print(&quot;Derek&#39;s Restaurant Menu&quot;) for k,v in menu.items(): # &quot;k&quot; is the item name, &quot;v&quot; is the price. &quot;k&quot; stands for key and &quot;v&quot; stands for value. print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times print(&quot;Please select items from the menu. Once you are done selecting items, type &#39;done&#39;&quot;) while True: # Loop continuously inp = input() # Get the input if inp == &quot;burger&quot;: # input for burger print(&quot;1 burger: $3.99&quot;) total = total + 3.99 elif inp == &quot;fries&quot;: # input for fries print(&quot;1 fries: $1.99&quot;) total = total + 1.99 elif inp == &quot;drink&quot;: # input for a drink print(&quot;1 drink: $0.99&quot;) total = total + 0.99 elif inp == &quot;done&quot;: # input for completing the order break # stop asking the user for inputs # print the total order cost print(&quot;Your total is $&quot; + str(total)) . Derek&#39;s Restaurant Menu burger $3.99 fries $1.99 drink $0.99 Please select items from the menu. Once you are done selecting items, type &#39;done&#39; 1 burger: $3.99 1 drink: $0.99 Your total is $4.98 .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%207/2022/10/09/CodeCorrections.html",
            "relUrl": "/apcsp%20week%207/2022/10/09/CodeCorrections.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "AP Prep Multiple Choice",
            "content": "1.1 Collaboration Notes . Daily Video 1 . Innovations are improved through collaboration in CSP | A computing innovation includes a program as an integral part of its function | Effective collaboration skills: Communication, consensus building, conflict resolution, negotiation | Computing innovation: reflects the diversity of talents and unique perspectives of all the programers who worked to create it | Collaboration on projects can reduce bias since there are various perspectives Video Quiz: Daily Video 2 . | How computing innovations are developed by groups of people | Consultation and communication between peers is important | Information contributed from all the group members can help understand the purpose of the program and create one that incorporates all the perspectives | Online tools can help collaboration such as pair programming | Pair programming: work together in pairs- the driver writes the code, the navigator reviews it | Think pair share: students work through a problem alone then pair with a partner then share with class | It is important to give credit 1.1 Collaboration Quiz . . 1.2 Program Function and Purpose Notes . Daily Video 1 . | It is important to know and be able to describe the purpose of a computing innovation | The purpose could be to solve problems, pursue interests through creative expression, etc. | Truly understanding the purpose of a program helps the developer(s) develop the program better Daily Video 2 . | Identify inputs/outputs to a program | Program inputs are data sent to a computer for processing by a program. Some forms can be: tactile, audio, visual, text | An event is associated with an action and supplies input data to a program | Events can be generated when a key is pressed, a mouse clicked, etc. Can be any defined action that affects the flow of execution | Inputs generally affect the output of a program | In a program, the code is made in a way that after an action, the code “jumps” to the code segment according to the event | Program’s output is based off input or prior state Daily Video 3 . | A program (software) is a collection of program statements the performs a specific task when run by a computer. | A code segment is a collection of program statements that is a part of a program | Software needs to work for a variety of inputs | The behavior is how the program functions during execution and if often described by how a user can interact with it. | Can be described broadly by what it does or in detail on how the program accomplishes its function | A program is a collection of statements: A statement is a single command, a group of statements is a code segment, code segments are executed -&gt; a program/software 1.2 Program Function and Purpose Quiz . . 1.3 Program Design and Development Notes . Daily Video 1 . | Use a development process to develop a program | Design a program and its user interface | A development process can be ordered and intentional or exploratory in nature | Common phases when developing a program: investigating and reflecting, designing, prototyping, testing | Requires refinement and revision based on feedback, testing, and reflection: may require revisiting phases | Break the project into smaller pieces and make sure each piece works before adding it to the whole | Investigate to determine requirements, constraints, concerns and interests of customer | Investigate by: collecting data through surveys, user testing, interviews, direct observations | Requirements describe how a program functions and may include a description of user interactions that a program should provide | Design phase that outlines how to accomplish a program’s goal may include: brainstorming, planning/storyboarding, organizing the program into modules and functional components, creation of diagrams, develop testing strategy | Constantly test your program Daily Video 2 . | When developing a program, it is important to cite and acknowledge code segments used from either another source or developed collaboratively | When acknowledging someone else, include the origin of code or authors name in the program documentation | Team of people usually work on a program by each focusing on different functional components | Each member’s work should be credited in program documentation Sometimes credit is given with comments in the code | Many developers use code segments, procedures, algorithms made by others who aren’t part of the project so it is important to credit them Daily Video 3 . | Describe the purpose of a code segment or program by writing documentation | Program documentation: a written description of the function of a code segment, event, procedure, or program and how it was developed EX: comments (don’t effect how the program runs) | Should actively document throughout development to help development as well as maintaining correct programs | Program documentation created to: describe the program, list specifications, describe different parts of the program, list of contributors | Document process: beginning: list specifications, during: keep track of progress, after: explain overall process | Documentation improves: programming process efficiency, ability to test and refine program, responding to bugs 1.3 Program Design and Development Quiz . . | . Questions I still have with problem sets . I found this question to be the most difficult for me throughout all of 1.1-1.3. After looking over the correct answer and explanation, it makes more sense however is still a little confusing to me. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%206/2022/10/02/APPrep.html",
            "relUrl": "/apcsp%20week%206/2022/10/02/APPrep.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "Java Script Tutorial",
            "content": "console.log(&quot;Hello, World!&quot;); . Hello, World! . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType(&quot;compscirole&quot;); // String logItType([1, 2, 3, 4]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 string ; compscirole object ; [ 1, 2, 3, 4 ] . // define a function to hold data for a Person function Person(name, ghID, classOf, compscirole) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.compscirole = compscirole; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977, &quot;Headmaster&quot;); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, compscirole: &#39;Headmaster&#39;, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, compscirole: &#39;Headmaster&#39;, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . // define a student Array of Person(s) var students = [ new Person(&quot;Derek&quot;, &quot;Senior&quot;, 2023, &quot;Front-end Developer&quot;), new Person(&quot;Saavan&quot;, &quot;Senior&quot;, 2023, &quot;DevOps&quot;), new Person(&quot;Rohan&quot;, &quot;Senior&quot;, 2023, &quot;Back-end Developer&quot;), new Person(&quot;Dillon&quot;, &quot;Junior&quot;, 2024, &quot;Scrum Master&quot;), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, compscirole: &#39;Headmaster&#39;, role: &#39;Teacher&#39; }, Person { name: &#39;Derek&#39;, ghID: &#39;Senior&#39;, classOf: 2023, compscirole: &#39;Front-end Developer&#39;, role: &#39;Student&#39; }, Person { name: &#39;Saavan&#39;, ghID: &#39;Senior&#39;, classOf: 2023, compscirole: &#39;DevOps&#39;, role: &#39;Student&#39; }, Person { name: &#39;Rohan&#39;, ghID: &#39;Senior&#39;, classOf: 2023, compscirole: &#39;Back-end Developer&#39;, role: &#39;Student&#39; }, Person { name: &#39;Dillon&#39;, ghID: &#39;Junior&#39;, classOf: 2024, compscirole: &#39;Scrum Master&#39;, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grade&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Comp Sci Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.compscirole + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGradeClass OfRoleComp Sci Role . Mr M | jm1021 | 1977 | Teacher | Headmaster | Derek | Senior | 2023 | Student | Front-end Developer | Saavan | Senior | 2023 | Student | DevOps | Rohan | Senior | 2023 | Student | Back-end Developer | Dillon | Junior | 2024 | Student | Scrum Master | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%205/2022/09/25/Javascript.html",
            "relUrl": "/apcsp%20week%205/2022/09/25/Javascript.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "TEDTalk Discussions and Takeaways",
            "content": "What I Learned . I learned a lot of things from this presentation. Laurie Santos enlightened me on the way to live an overall happier life and improve the way I live on a day to day basis. I learned how important it is to take time out of my day to be thankful and grateful for all the things given to me in life. She taught me to really count all the blessings I have in life. After learning this, I’ve started to try taking a minute or two out of my day to write out all the things I am grateful for. Not only did she say studies prove that this increases a better quality of life, but personally, I’m starting to see positive results. Santos also taught me the importance of helping other people. She expressed that people who help others are more happy in life. I’ve also started to help others before helping myself at times, and can really start to see a happier lifestyle panning out. . What My Partner Learned . My partner Saavan took away a ton of concepts as well. One thing Saavan took from Santos was that helping others help us more than we expect. He can relate to this because he noticed that the more he starts helping and giving to others, the happier his life becomes. Another thing he took away was writing a letter of gratitude to someone. He noticed that people that receive this letter will actually appreciate it more than you will ever know. Giving a letter of gratitude to someone spreads the happiness they bring you to them, which will reciprocate it back. . What My Group Took Away . Derek’s Thoughts: What I found interesting about the video is that everyone deals with stress, and it is not something easy to just deal with. One thing that Laurie Santos was that 40% of the students from her class in Yale said they feel helpless. This really struck me because it puts into perspective how many people deal with some sort of unhappiness and that we are not alone. . Rohan’s Thoughts: It was relatable, she mentioned good strategies to reduce stress. The statistics that she said were also very alarming to me. I also believe that stress hinders the ability to learn. . Dillon’s Thoughts: I found it very surprising how much anxiety and stress the average college student has during their time spent in academic environment. It makes me worry about myself and how college life will be like. I also reflect and think about how much correlation it has with high school stress at Del Norte. . Saavan’s Thoughts: I thought it was good to know the things we need to do to relieve stress. I believe that it is very important in working towards living a happier life, and its not as easy as it sounds. . Note of Gratitude to My Brother . I wanted to write a note of gratitude to my brother. I just wanted to thank him for listening to personal stuff I can only talk to him about, and helping me better myself in ways. I’m thankful that he takes the time out of his busy day to go to the gym with me if I ask. I also am thankful that he understands and tells me what I need to work on so that I can better myself academically and in my personal growth. . Gratitude List . Things Im Grateful for: . my parents | my brother | my friends | house | food | water | clothes | my dog | .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%203/2022/09/20/TEDTalknotes.html",
            "relUrl": "/apcsp%20week%203/2022/09/20/TEDTalknotes.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "AppLab Planning/Blogging",
            "content": "Applab Planning/Blogging . Outline of Quiz . For our outline, Saavan and I wanted to create a quiz revolved around NBA. So we planned out 3 NBA questions that we wanted to use, and started planning out how we want the site to look. We wanted a home screen to introduce the quiz with a start button, 3 separate screens for each question, 2 other screens for if you get the question wrong or right, and a final screen to address that you have won and the results. . Successes . This is me breaking down the success of figuring out how to code a button so that it switches to a new screen. . 1. Program Purpose and Function . The purpose of this program is so that the when the button is clicked, it switches the current screen to a new one. The input of this program is the onEvent, where if the start button is clicked, then it will do the function of the set screen, which is the output of screen2, which will change the current screen to that. . 2. Data Abstraction . The name of the variable is start_button. It is representing what needs to be “clicked”, in order for the input to work. . Discoveries . One discovery that I found was how to code a button so that it switches to a new screen. Another discovery I found was how to work a dropdown so that if it clicks on certain options it sets the screen to that option. . Challenges . There were a ton of problems that we encountered once we started creating our site. Some minor problems was figuring out how to code a button so that it goes to the next screen, how to code an image so that if it is clicked it goes to the next screen, etc. But once we figured out the code to that, if was very satisfying and much easier to create our App. However one idea that we came up with was making it so that if they get the question wrong or right, it takes them to a screen telling them that, and then a button to make them proceed or go back. This was a slight problem because we realized that we can’t just have one screen for wrong or right, but have that for each question, since the buttons would have to take you back or move you forward at different questions. . . This picture displays the 6 different screens we had to make, since we had to make a correct and wrong screen for each question, which would rather bring them back to the same question if they got it wrong, or proceed to the next question if they get it right, or the results if they get the final question right. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%203/2022/09/11/Applabplanning.html",
            "relUrl": "/apcsp%20week%203/2022/09/11/Applabplanning.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Performance Task Planning/Draft",
            "content": "Idea on Project . An idea I had for this project is somehow creating a website with a whole bunch of movies and TV shows that you can choose from, and a way to search for all of them. The technical requirements for this project include: . Final program code (created independently or collaboratively) | A video that displays the running of your program and demonstrates functionality you developed (created independently) | Written responses to all the prompts in the performance task (created independently) | . I feel like the things I can design now are probably the dropdown menu to choose from all these movies, and the code for when they click on the movie, for it to take them to a different screen to watch it. It also says &quot;students need practice implementing programs that first include sequencing, then incorporate selection and iteration, and finally use procedures and lists.&quot; I feel that we&#39;ve touched most if not all of these basics over the first couple of weeks. Somethings I would still need to learn is how to put the actual movie or TV show on the site, so when they hit play, they are watching it on the site. Some resources that I have available is code.org to maybe help we work with building apps more and understanding the code, the people around me in this class, and past students that have already taken this class. . from IPython.display import Image Image(filename=&quot;/Users/dmsol/Tera/images/Screen Shot 2022-09-11 at 12.29.24 PM.png&quot;, width=600, height=400) .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%203/2022/09/10/performancetaskplanning.html",
            "relUrl": "/apcsp%20week%203/2022/09/10/performancetaskplanning.html",
            "date": " • Sep 10, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "AppLab NBA Quiz and NBA Stats App",
            "content": "Partner NBA Quiz . Partner NBA Stats App .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%203/2022/09/09/Applabquiz.html",
            "relUrl": "/apcsp%20week%203/2022/09/09/Applabquiz.html",
            "date": " • Sep 9, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "My Loop Marvel Quiz",
            "content": "InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Derek&quot;, &quot;LastName&quot;: &quot;Sol&quot;, &quot;DOB&quot;: &quot;January 17&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;dmsol218@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;2018 Toyota Camry SE&quot;] }) . For loop/For loop with Index . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop algorithm iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output Derek Sol Residence: San Diego Birth Day: January 17 Cars: 2018 Toyota Camry SE . While Loop . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(InfoDb): record = InfoDb[i] print_data(record) i += 1 return while_loop() . While loop output Derek Sol Residence: San Diego Birth Day: January 17 Cars: 2018 Toyota Camry SE . Recursion . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Derek Sol Residence: San Diego Birth Day: January 17 Cars: 2018 Toyota Camry SE . Marvel Quiz Version 1 . q1 = &quot;&quot;&quot;What is Captain America&#39;s shield made out of? a. Vibranium b. Steel c. Iron d. Copper&quot;&quot;&quot; q2 = &quot;&quot;&quot;How many Infinity Stone are there? a. 4 b. 6 c. 3 d. 8&quot;&quot;&quot; q3 = &quot;&quot;&quot;Who lifts Thor&#39;s hammer in Endgame? a. Iron Man b. Vision c. Captain America d. Captain Marvel&quot;&quot;&quot; questions = {q1 : &quot;a&quot;,q2 : &quot;b&quot;,q3 : &quot;c&quot;} name = input(&quot;Enter your name: &quot;) print(&quot;Hello&quot;,name, &quot;welcome to the this Marvel quiz, lets get started...&quot;) score=0 for i in questions: print(i) ans = input(&quot;enter the answer(a/b/c/d) : &quot;) if ans==questions[i]: print(&quot;correct answer, you got 1 point&quot;) score = score+1 else: print(&quot;wrong answer, you lost 1 point&quot;) score=score-1 print(&quot;Final score is:&quot;, score) . Hello Derek Sol welcome to the this Marvel quiz, lets get started... What is Captain America&#39;s shield made out of? a. Vibranium b. Steel c. Iron d. Copper correct answer, you got 1 point How many Infinity Stone are there? a. 4 b. 6 c. 3 d. 8 correct answer, you got 1 point Who lifts Thor&#39;s hammer in Endgame? a. Iron Man b. Vision c. Captain America d. Captain Marvel correct answer, you got 1 point Final score is: 3 . Marvel Quiz Version 2 . def new_game(): guesses = [] correct_guesses = 0 question_num = 1 for key in questions: print(&quot;-&quot;) print(key) for i in options[question_num-1]: print(i) guess = input(&quot;Enter (A, B, C, or D): &quot;) guess = guess.upper() guesses.append(guess) correct_guesses += check_answer(questions.get(key),guess) question_num += 1 display_score(correct_guesses, guesses) # - def check_answer(answer, guess): if answer == guess: print(&quot;CORRECT!&quot;) return 1 else: print(&quot;WRONG!&quot;) return 0 # - def display_score(correct_guesses, guesses): print(&quot;-&quot;) print(&quot;RESULTS&quot;) print(&quot;-&quot;) print(&quot;Answers: &quot;, end=&quot;&quot;) for i in questions: print(questions.get(i), end =&quot; &quot;) print() print(&quot;Guesses: &quot;, end=&quot;&quot;) for i in guesses: print(i, end =&quot; &quot;) print() score = int((correct_guesses/len(questions))*100) print(&quot;Your score is: &quot;+str(score)+&quot;%&quot;) # - def play_again(): response = input(&quot;Do you want to play again?: (yes or no): &quot;) response = response.upper() if response == &quot;YES&quot;: return True else: return False # - questions = { &quot;What is Captain America&#39;s shield made out of?: &quot;: &quot;A&quot;, &quot;How many Infinity Stones are there?: &quot;: &quot;B&quot;, &quot;Who lifts Thor&#39;s hammer in Endgame?: &quot;: &quot;C&quot;, &quot;Who holds the Time Stone?: &quot;: &quot;A&quot;, } options = [[&quot;A. Vibranium&quot;, &quot;B. Copper&quot;, &quot;C. Iron&quot;, &quot;D. Steel&quot;], [&quot;A. 4&quot;, &quot;B. 6&quot;, &quot;C. 3&quot;, &quot;D. 2&quot;], [&quot;A. Iron Man&quot;, &quot;B. Vision&quot;, &quot;C. Captain America&quot;, &quot;D. Captain Marvel&quot;], [&quot;A. Doctor Strange&quot;, &quot;B. Ant-Man&quot;, &quot;C. Vision&quot;, &quot;D. Thor&quot;]] new_game() while play_again(): new_game() print(&quot;Bye!&quot;) . - What is Captain America&#39;s shield made out of?: A. Vibranium B. Copper C. Iron D. Steel CORRECT! - How many Infinity Stones are there?: A. 4 B. 6 C. 3 D. 2 CORRECT! - Who lifts Thor&#39;s hammer in Endgame?: A. Iron Man B. Vision C. Captain America D. Captain Marvel CORRECT! - Who holds the Time Stone?: A. Doctor Strange B. Ant-Man C. Vision D. Thor WRONG! - RESULTS - Answers: A B C A Guesses: A B C D Your score is: 75% - What is Captain America&#39;s shield made out of?: A. Vibranium B. Copper C. Iron D. Steel CORRECT! - How many Infinity Stones are there?: A. 4 B. 6 C. 3 D. 2 CORRECT! - Who lifts Thor&#39;s hammer in Endgame?: A. Iron Man B. Vision C. Captain America D. Captain Marvel CORRECT! - Who holds the Time Stone?: A. Doctor Strange B. Ant-Man C. Vision D. Thor CORRECT! - RESULTS - Answers: A B C A Guesses: A B C A Your score is: 100% Bye! .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%202/2022/09/04/loop.html",
            "relUrl": "/apcsp%20week%202/2022/09/04/loop.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Remote Theme Screenshot",
            "content": "from IPython.display import Image Image(filename=&quot;/Users/dmsol/Tera/images/midnight.png&quot;, width=700, height=500) . Problems that I noticed from changing the remote theme is that the pages at the top right are gone, like the &quot;about,&quot; &quot;notes,&quot; &quot;search,&quot; etc. .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%202/2022/09/03/remotetheme.html",
            "relUrl": "/apcsp%20week%202/2022/09/03/remotetheme.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Who is Derek Sol?",
            "content": "Things I like To Do . Play Basketball | Play video games | Spend time with friends and family | Watch TV Shows and Movies | .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%201/2022/08/28/Derekpersonal.html",
            "relUrl": "/apcsp%20week%201/2022/08/28/Derekpersonal.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "My Notebook Quiz",
            "content": "print(&quot;Hello World!&quot;) . Hello World! . msg = input(&quot;Enter a greeting: &quot;) print(msg) . this is my quiz . def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) question_and_answer(&quot;Name the Python output command mentioned in this lesson?&quot;) question_and_answer(&quot;If you see many lines of code in order, what would College Board call it?&quot;) question_and_answer(&quot;Describe a keyword used in Python to define a function?&quot;) . Question: Name the Python output command mentioned in this lesson? Answer: prompt Question: If you see many lines of code in order, what would College Board call it? Answer: sequence Question: Describe a keyword used in Python to define a function? Answer: def . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) if rsp == &quot;import&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, dmsol running /Library/Developer/CommandLineTools/usr/bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Answer: yes Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! dmsol you scored 3/3 . Disney Themed Quiz . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) rsp = question_with_response(&quot;What does Hakuna Matata mean?&quot;) if rsp == &quot;no worries&quot;: print(rsp + &quot; is right!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What was the first Disney Princess to have a movie?&quot;) if rsp == &quot;Snow White&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What was the name of Simba&#39;s father in the Lion King?&quot;) if rsp == &quot;Mufasa&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What was the first animated movie to be nominated for Best Picture at the Oscars?&quot;) if rsp == &quot;Beauty and the Beast&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) Percentage = correct/4 print(&quot;You got &quot; +str(int(Percentage*100))+&quot;%&quot;) . Hello, dmsol running /Library/Developer/CommandLineTools/usr/bin/python3 You will be asked 4 questions. Question: What does Hakuna Matata mean? no worries is right! Question: What was the first Disney Princess to have a movie? Cinderella is incorrect! Question: What was the name of Simba&#39;s father in the Lion King? Mufasa is correct! Question: What was the first animated movie to be nominated for Best Picture at the Oscars? Beauty and the Beast is correct! You got 75% .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%201/2022/08/28/Derek.html",
            "relUrl": "/apcsp%20week%201/2022/08/28/Derek.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "Bash Tutorial",
            "content": "echo &quot;Using conditional statement to create a project directory and project&quot; # Variable section export project_dir=$HOME/vscode # change vscode to different name to test git clone export project=$project_dir/APCSP # change APCSP to name of project from git clone export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice cd ~ # start in home directory # Conditional block to make a project directory if [ ! -d $project_dir ] then echo &quot;Directory $project_dir does not exists... makinng directory $project_dir&quot; mkdir -p $project_dir fi echo &quot;Directory $project_dir exists.&quot; # Conditional block to git clone a project from project_repo if [ ! -d $project ] then echo &quot;Directory $project does not exists... cloning $project_repo&quot; cd $project_dir git clone $project_repo cd ~ fi echo &quot;Directory $project exists.&quot; . Using conditional statement to create a project directory and project Directory /Users/dmsol/vscode exists. Directory /Users/dmsol/vscode/APCSP exists. . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project pwd echo &quot;&quot; echo &quot;list top level or root of files with project pulled from github&quot; ls echo &quot;&quot; echo &quot;list again with hidden files pulled from github&quot; ls -a # hidden files flag, many shell commands have flags echo &quot;&quot; echo &quot;list all files in long format&quot; ls -al # all files and long listing . Navigate to project, then navigate to area wwhere files were cloned /Users/dmsol/vscode/APCSP list top level or root of files with project pulled from github Gemfile _includes _word LICENSE _layouts assets Makefile _notebooks docker-compose.yml README.md _pages images _action_files _plugins index.html _config.yml _posts python _fastpages_docs _sass list again with hidden files pulled from github . Makefile _posts .. README.md _sass .devcontainer.json _action_files _word .git _config.yml assets .gitattributes _fastpages_docs docker-compose.yml .github _includes images .gitignore _layouts index.html .vscode _notebooks python Gemfile _pages LICENSE _plugins list all files in long format total 96 drwxr-xr-x 28 dmsol staff 896 Aug 21 22:08 . drwxr-xr-x 4 dmsol staff 128 Aug 24 11:54 .. -rw-r--r-- 1 dmsol staff 420 Aug 21 22:08 .devcontainer.json drwxr-xr-x 14 dmsol staff 448 Aug 25 15:18 .git -rw-r--r-- 1 dmsol staff 84 Aug 21 22:08 .gitattributes drwxr-xr-x 4 dmsol staff 128 Aug 21 22:08 .github -rw-r--r-- 1 dmsol staff 917 Aug 21 22:08 .gitignore drwxr-xr-x 3 dmsol staff 96 Aug 21 22:08 .vscode -rwxr-xr-x 1 dmsol staff 1304 Aug 21 22:08 Gemfile -rw-r--r-- 1 dmsol staff 11351 Aug 21 22:08 LICENSE -rwxr-xr-x 1 dmsol staff 1422 Aug 21 22:08 Makefile -rwxr-xr-x 1 dmsol staff 3614 Aug 21 22:08 README.md drwxr-xr-x 18 dmsol staff 576 Aug 21 22:08 _action_files -rw-r--r-- 1 dmsol staff 3716 Aug 21 22:08 _config.yml drwxr-xr-x 24 dmsol staff 768 Aug 21 22:08 _fastpages_docs drwxr-xr-x 29 dmsol staff 928 Aug 21 22:08 _includes drwxr-xr-x 6 dmsol staff 192 Aug 21 22:08 _layouts drwxr-xr-x 12 dmsol staff 384 Aug 25 15:18 _notebooks drwxr-xr-x 9 dmsol staff 288 Aug 25 15:18 _pages drwxr-xr-x 4 dmsol staff 128 Aug 21 22:08 _plugins drwxr-xr-x 29 dmsol staff 928 Aug 25 15:18 _posts drwxr-xr-x 3 dmsol staff 96 Aug 21 22:08 _sass drwxr-xr-x 3 dmsol staff 96 Aug 21 22:08 _word drwxr-xr-x 4 dmsol staff 128 Aug 21 22:08 assets -rwxr-xr-x 1 dmsol staff 1136 Aug 21 22:08 docker-compose.yml drwxr-xr-x 52 dmsol staff 1664 Aug 21 22:08 images -rw-r--r-- 1 dmsol staff 1061 Aug 21 22:08 index.html drwxr-xr-x 3 dmsol staff 96 Aug 21 22:08 python . # You must run cells above to define variable and project echo &quot;Look for posts&quot; export posts=$project/_posts # _posts inside project cd $posts # this should exist per fastpages pwd # present working directory ls -l # list posts . Look for posts /Users/dmsol/vscode/APCSP/_posts total 456 -rw-r--r-- 1 dmsol staff 21306 Aug 21 22:08 2022-06-01-TT160-deploy.md -rw-r--r-- 1 dmsol staff 5861 Aug 21 22:08 2022-07-07-PBL-binary.md -rw-r--r-- 1 dmsol staff 3085 Aug 21 22:08 2022-07-08-PBL-grade_calc.md -rw-r--r-- 1 dmsol staff 3698 Aug 21 22:08 2022-07-08-PBL-graph.md -rw-r--r-- 1 dmsol staff 5729 Aug 21 22:08 2022-07-08-PBL-life.md -rw-r--r-- 1 dmsol staff 14387 Aug 21 22:08 2022-07-08-PBL-snake.md -rw-r--r-- 1 dmsol staff 334 Aug 21 22:08 2022-07-10-PBL-database.md -rw-r--r-- 1 dmsol staff 2908 Aug 21 22:08 2022-07-10-PBL-jokes.md -rw-r--r-- 1 dmsol staff 4046 Aug 21 22:08 2022-07-10-PBL-rapidapi.md -rw-r--r-- 1 dmsol staff 6685 Aug 21 22:08 2022-07-19-PBL-calculator.md -rw-r--r-- 1 dmsol staff 23325 Aug 21 22:08 2022-07-25-CSP-workshop.md -rw-r--r-- 1 dmsol staff 2333 Aug 21 22:08 2022-08-15-TP000-student_score_history.md -rw-r--r-- 1 dmsol staff 4363 Aug 21 22:08 2022-08-15-TP100-pseudo_code.md -rw-r--r-- 1 dmsol staff 7968 Aug 21 22:08 2022-08-15-TR100-tool_setup.md -rw-r--r-- 1 dmsol staff 15026 Aug 21 22:08 2022-08-15-TT100-tools.md -rw-r--r-- 1 dmsol staff 5590 Aug 21 22:08 2022-08-15-TT101-vscode-wsl.md -rw-r--r-- 1 dmsol staff 2155 Aug 25 15:18 2022-08-22-TR110-intro_python.md -rw-r--r-- 1 dmsol staff 5173 Aug 21 22:08 2022-08-22-TT110-fastpages.md -rw-r--r-- 1 dmsol staff 2798 Aug 25 15:18 2022-08-22-TT110-focus.md -rw-r--r-- 1 dmsol staff 2737 Aug 21 22:08 2022-08-29-TR120-data_abstract.md -rw-r--r-- 1 dmsol staff 10683 Aug 21 22:08 2022-08-29-TT120-agile.md -rw-r--r-- 1 dmsol staff 4498 Aug 21 22:08 2022-08-29-TT120-html_fragments.md -rw-r--r-- 1 dmsol staff 9037 Aug 21 22:08 2022-09-05-TP130-create_performance_task.md -rw-r--r-- 1 dmsol staff 7753 Aug 21 22:08 2022-09-05-TP131-create-task-bria.md -rw-r--r-- 1 dmsol staff 8066 Aug 21 22:08 2022-09-05-TR130-creative_development.md -rw-r--r-- 1 dmsol staff 3520 Aug 21 22:08 2022-09-05-TT130-applab.md -rw-r--r-- 1 dmsol staff 720 Aug 21 22:08 README.md . echo &quot;Look for notebooks&quot; export notebooks=$project/_notebooks # _notebooks is inside project cd $notebooks # this should exist per fastpages pwd # present working directory ls -l # list notebooks . Look for notebooks /Users/dmsol/vscode/APCSP/_notebooks total 280 -rw-r--r-- 1 dmsol staff 14243 Aug 21 22:08 2022-06-01-TT150-webapi_tutorial.ipynb -rw-r--r-- 1 dmsol staff 8653 Aug 21 22:08 2022-07-21-PBL-neo4j_intro.ipynb -rw-r--r-- 1 dmsol staff 11694 Aug 25 15:18 2022-08-22-TP110-python_hello.ipynb -rw-r--r-- 1 dmsol staff 20003 Aug 25 15:18 2022-08-22-TT110-anthony_and_sahil.ipynb -rw-r--r-- 1 dmsol staff 9797 Aug 25 15:23 2022-08-22-TT110-bash_tutorial.ipynb -rw-r--r-- 1 dmsol staff 35721 Aug 25 15:18 2022-08-25-tool_check.ipynb -rw-r--r-- 1 dmsol staff 10141 Aug 21 22:08 2022-08-29-TP120-python_lists.ipynb -rw-r--r-- 1 dmsol staff 12632 Aug 21 22:08 2022-09-05-TT130-js_tutorial.ipynb -rw-r--r-- 1 dmsol staff 771 Aug 21 22:08 README.md drwxr-xr-x 3 dmsol staff 96 Aug 21 22:08 images . echo &quot;Look for images in notebooks, print working directory, list files&quot; cd $notebooks/images # this should exist per fastpages pwd ls -l . Look for images in notebooks, print working directory, list files /Users/dmsol/vscode/APCSP/_notebooks/images total 200 -rw-r--r-- 1 dmsol staff 101617 Aug 21 22:08 kernels.png . echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; cd $project echo &quot;show the contents of README.md&quot; echo &quot;&quot; cat README.md # show contents of file, in this case markdown echo &quot;&quot; echo &quot;end of README.md&quot; . Navigate to project, then navigate to area wwhere files were cloned show the contents of README.md cat: README.md: No such file or directory end of README.md . echo &quot;Show the shell environment variables, key on left of equal value on right&quot; echo &quot;&quot; env . Show the shell environment variables, key on left of equal value on right SHELL=/bin/bash TMPDIR=/var/folders/m3/xnfxr90d6696g4yv0yfqy1_40000gn/T/ CONDA_SHLVL=1 PYTHONUNBUFFERED=1 CONDA_PROMPT_MODIFIER=(base) OLDPWD=/Users/dmsol/vscode/APCSP/_notebooks ORIGINAL_XDG_CURRENT_DESKTOP=undefined MallocNanoZone=0 PYTHONIOENCODING=utf-8 USER=dmsol CONDA_EXE=/opt/anaconda3/bin/conda SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.Ub6XgHKNQG/Listeners __CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0 PAGER=cat VSCODE_AMD_ENTRYPOINT=vs/workbench/api/node/extensionHostProcess ELECTRON_RUN_AS_NODE=1 _CE_CONDA= PATH=/opt/anaconda3/bin:/opt/anaconda3/condabin:/Library/Frameworks/Python.framework/Versions/2.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin CONDA_PREFIX=/opt/anaconda3 PWD=/Users/dmsol/vscode/APCSP/_notebooks/images notebooks=/Users/dmsol/vscode/APCSP/_notebooks VSCODE_HANDLES_UNCAUGHT_ERRORS=true project_repo=https://github.com/nighthawkcoders/APCSP.git project=/Users/dmsol/vscode/APCSP project_dir=/Users/dmsol/vscode XPC_FLAGS=0x0 PS1=[PEXP [ ]ECT_PROMPT&gt; _CE_M= XPC_SERVICE_NAME=0 SHLVL=2 HOME=/Users/dmsol APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL=1 VSCODE_NLS_CONFIG={&#34;locale&#34;:&#34;en-us&#34;,&#34;availableLanguages&#34;:{},&#34;_languagePackSupport&#34;:true} CONDA_PYTHON_EXE=/opt/anaconda3/bin/python LOGNAME=dmsol VSCODE_IPC_HOOK=/Users/dmsol/Library/Application Support/Code/1.70.2-main.sock VSCODE_CODE_CACHE_PATH=/Users/dmsol/Library/Application Support/Code/CachedData/e4503b30fc78200f846c62cf8091b76ff5547662 CONDA_DEFAULT_ENV=base VSCODE_PID=27686 posts=/Users/dmsol/vscode/APCSP/_posts VSCODE_CWD=/ _=/usr/bin/env . cd $project echo &quot;&quot; echo &quot;show the secrets of .git&quot; cd .git ls -l echo &quot;&quot; echo &quot;look at config file&quot; cat config . show the secrets of .git total 88 -rw-r--r-- 1 dmsol staff 102 Aug 25 15:18 FETCH_HEAD -rw-r--r-- 1 dmsol staff 23 Aug 21 22:08 HEAD -rw-r--r-- 1 dmsol staff 41 Aug 25 15:18 ORIG_HEAD -rw-r--r-- 1 dmsol staff 314 Aug 21 22:08 config -rw-r--r-- 1 dmsol staff 73 Aug 21 22:08 description drwxr-xr-x 15 dmsol staff 480 Aug 21 22:08 hooks -rw-r--r-- 1 dmsol staff 20021 Aug 25 15:18 index drwxr-xr-x 3 dmsol staff 96 Aug 21 22:08 info drwxr-xr-x 4 dmsol staff 128 Aug 21 22:08 logs drwxr-xr-x 44 dmsol staff 1408 Aug 25 15:18 objects -rw-r--r-- 1 dmsol staff 271 Aug 21 22:08 packed-refs drwxr-xr-x 5 dmsol staff 160 Aug 21 22:08 refs look at config file [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true [remote &#34;origin&#34;] url = https://github.com/nighthawkcoders/APCSP.git fetch = +refs/heads/*:refs/remotes/origin/* [branch &#34;master&#34;] remote = origin merge = refs/heads/master .",
            "url": "https://dereksol.github.io/Tera/apcsp%20week%201/2022/08/25/bash.html",
            "relUrl": "/apcsp%20week%201/2022/08/25/bash.html",
            "date": " • Aug 25, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About Me",
          "content": "Derek Sol is the GOAT. DerekSol 1. . An absolute GOAT. &#8617; . |",
          "url": "https://dereksol.github.io/Tera/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Vocabulary",
          "content": "Term Description . Github | The platform for developing different softwares and websites. | . Jupyter Notebook | A platform that allows you to code in multiple different languages. | . Python | A programming language that is open sourced | . Markdown | A software language that allows you to format text. | . Shell Script | A computer program that is used to change a modify different things. | . Code | The language used to program and intialize computer function. | . Input | The command to initiate a certain action. | . Output | The result that is developed due to the input language. | . Repository | A hub that makes use of different code and websites. | . Commit | To initalize a series of code and output the actions. | . Push | To deliver information from one place to another. | . Pull | To request data back from one place to another | . Bash | Another computer language that is used in powershell | . Bin | A binary file that is used by different computer applications | . Scrum Master | The scrum master helps to facilitate the sprint by ensuring that an agile framework is followed. Responsible on tracking issues and maintaining scrum board. | . DevOps | DevOps is the combination of cultural philosophies, practices, and tools that increases an team’s ability to deliver applications and services at high velocity. | . Front-end Developer | A front-end developer builds the front-end portion of websites, the part that users actually see and interact with. | . Back-end Developer | Back-end developers a build and maintain the mechanisms that process data and perform actions like data storage, security, and other server-side functions that you cannot see. | .",
          "url": "https://dereksol.github.io/Tera/vocabulary/",
          "relUrl": "/vocabulary/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Notes",
          "content": "AP Gov Notes .",
          "url": "https://dereksol.github.io/Tera/Notes/",
          "relUrl": "/Notes/",
          "date": ""
      }
      
  

  

  

  
      ,"page5": {
          "title": "UIDemo",
          "content": "&lt;!DOCTYPE html&gt; . Basketball Site . Basketball Site . . Top Players . Player 1 . Team A . Player 2 . Team A . Player 3 . Team A . Player 4 . Team B . Player 5 . Team B . Player 6 . Team B . .",
          "url": "https://dereksol.github.io/Tera/UIdemo/",
          "relUrl": "/UIdemo/",
          "date": ""
      }
      
  

  

  

  

  
  

  
  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page19": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://dereksol.github.io/Tera/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}